// @generated by protobuf-ts 1.0.12 with parameters optimize_code_size
// @generated from protobuf file "modules/server-node/server/proto/vector.proto" (package "com.vector", syntax proto3)
// tslint:disable
import { RpcTransport } from "@protobuf-ts/runtime-rpc";
import { MethodInfo } from "@protobuf-ts/runtime-rpc";
import { MessageType } from "@protobuf-ts/runtime";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import { UnaryCall } from "@protobuf-ts/runtime-rpc";
import { RpcOptions } from "@protobuf-ts/runtime-rpc";
import { Any } from "../../../../google/protobuf/any";
/**
 * @generated from protobuf message com.vector.ClearStoreReply
 */
export interface ClearStoreReply {
    /**
     * @generated from protobuf field: string message = 1;
     */
    message: string;
}
/**
 * @generated from protobuf message com.vector.SubscriptionRequest
 */
export interface SubscriptionRequest {
    /**
     * @generated from protobuf oneof: EventName
     */
    eventName: {
        oneofKind: "isAliveEvent";
        /**
         * @generated from protobuf field: string is_alive_event = 1;
         */
        isAliveEvent: string;
    } | {
        oneofKind: "setupEvent";
        /**
         * @generated from protobuf field: string setup_event = 2;
         */
        setupEvent: string;
    } | {
        oneofKind: "conditionalTransferCreatedEvent";
        /**
         * @generated from protobuf field: string conditional_transfer_created_event = 3;
         */
        conditionalTransferCreatedEvent: string;
    } | {
        oneofKind: "conditionalTransferResolvedEvent";
        /**
         * @generated from protobuf field: string conditional_transfer_resolved_event = 4;
         */
        conditionalTransferResolvedEvent: string;
    } | {
        oneofKind: "depositReconciledEvent";
        /**
         * @generated from protobuf field: string deposit_reconciled_event = 5;
         */
        depositReconciledEvent: string;
    } | {
        oneofKind: "requestCollateralEvent";
        /**
         * @generated from protobuf field: string request_collateral_event = 6;
         */
        requestCollateralEvent: string;
    } | {
        oneofKind: "restoreStateEvent";
        /**
         * @generated from protobuf field: string restore_state_event = 7;
         */
        restoreStateEvent: string;
    } | {
        oneofKind: "withdrawCreatedEvent";
        /**
         * string setup_event
         *
         * @generated from protobuf field: string withdraw_created_event = 8;
         */
        withdrawCreatedEvent: string;
    } | {
        oneofKind: "withdrawResolvedEvent";
        /**
         * @generated from protobuf field: string withdraw_resolved_event = 9;
         */
        withdrawResolvedEvent: string;
    } | {
        oneofKind: "withdrawReconciledEvent";
        /**
         * @generated from protobuf field: string withdraw_reconciled_event = 10;
         */
        withdrawReconciledEvent: string;
    } | {
        oneofKind: undefined;
    };
    /**
     * @generated from protobuf field: com.vector.TPublicIdentifier public_identifier = 11;
     */
    publicIdentifier?: TPublicIdentifier;
}
/**
 * @generated from protobuf message com.vector.Subscription
 */
export interface Subscription {
    /**
     * @generated from protobuf field: com.vector.Subscription.TUrl url = 1;
     */
    url?: Subscription_TUrl;
}
/**
 * @generated from protobuf message com.vector.Subscription.TUrl
 */
export interface Subscription_TUrl {
    /**
     * @generated from protobuf field: string url = 1;
     */
    url: string;
}
/**
 * @generated from protobuf message com.vector.ListenerSchemaReply
 */
export interface ListenerSchemaReply {
    /**
     * @generated from protobuf field: string url = 1;
     */
    url: string;
}
/**
 * @generated from protobuf message com.vector.Balance
 */
export interface Balance {
    /**
     * @generated from protobuf field: repeated string amount = 1;
     */
    amount: string[];
    /**
     * @generated from protobuf field: repeated string to = 2;
     */
    to: string[];
}
/**
 * @generated from protobuf message com.vector.Address
 */
export interface Address {
    /**
     * @generated from protobuf field: string address = 1;
     */
    address: string;
}
/**
 * @generated from protobuf message com.vector.CoreChannelState
 */
export interface CoreChannelState {
    /**
     * @generated from protobuf field: com.vector.Address channel_address = 1;
     */
    channelAddress?: Address;
    /**
     * @generated from protobuf field: com.vector.Address alice = 2;
     */
    alice?: Address;
    /**
     * @generated from protobuf field: com.vector.Address bob = 3;
     */
    bob?: Address;
    /**
     * @generated from protobuf field: repeated string asset_ids = 4;
     */
    assetIds: string[];
    /**
     * @generated from protobuf field: repeated com.vector.Balance balances = 5;
     */
    balances: Balance[];
    /**
     * @generated from protobuf field: repeated string processed_deposits_a = 6;
     */
    processedDepositsA: string[];
    /**
     * @generated from protobuf field: repeated string processed_deposits_b = 7;
     */
    processedDepositsB: string[];
    /**
     * @generated from protobuf field: repeated string defund_nounces = 8;
     */
    defundNounces: string[];
    /**
     * @generated from protobuf field: string timeout = 9;
     */
    timeout: string;
    /**
     * @generated from protobuf field: int64 nonce = 10;
     */
    nonce: bigint;
    /**
     * @generated from protobuf field: string merkle_root = 11;
     */
    merkleRoot: string;
}
/**
 * @generated from protobuf message com.vector.WithdrawState
 */
export interface WithdrawState {
    /**
     * @generated from protobuf field: string initiator_signature = 1;
     */
    initiatorSignature: string;
    /**
     * @generated from protobuf field: com.vector.Address initiator = 2;
     */
    initiator?: Address;
    /**
     * @generated from protobuf field: com.vector.Address responder = 3;
     */
    responder?: Address;
    /**
     * @generated from protobuf field: bytes data = 4;
     */
    data: Uint8Array;
    /**
     * @generated from protobuf field: int64 nonce = 5;
     */
    nonce: bigint;
    /**
     * @generated from protobuf field: string fee = 6;
     */
    fee: string;
    /**
     * @generated from protobuf field: com.vector.Address call_to = 7;
     */
    callTo?: Address;
    /**
     * @generated from protobuf field: string call_data = 8;
     */
    callData: string;
}
/**
 * @generated from protobuf message com.vector.HashlockTransferState
 */
export interface HashlockTransferState {
    /**
     * @generated from protobuf field: string lock_hash = 1;
     */
    lockHash: string;
    /**
     * @generated from protobuf field: string expiry = 2;
     */
    expiry: string;
}
/**
 * @generated from protobuf message com.vector.TransferStateMap
 */
export interface TransferStateMap {
    /**
     * @generated from protobuf field: map<string, com.vector.HashlockTransferState> hashlock_transfer_state = 1;
     */
    hashlockTransferState: {
        [key: string]: HashlockTransferState;
    };
    /**
     * @generated from protobuf field: map<string, com.vector.WithdrawState> withdraw_state = 2;
     */
    withdrawState: {
        [key: string]: WithdrawState;
    };
}
/**
 * @generated from protobuf message com.vector.TransferState
 */
export interface TransferState {
    /**
     * @generated from protobuf oneof: values
     */
    values: {
        oneofKind: "transferStateMap";
        /**
         * @generated from protobuf field: com.vector.TransferStateMap transfer_state_map = 1;
         */
        transferStateMap: TransferStateMap;
    } | {
        oneofKind: "any";
        /**
         * @generated from protobuf field: google.protobuf.Any any = 2;
         */
        any: Any;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message com.vector.HashlockTransferResolver
 */
export interface HashlockTransferResolver {
    /**
     * @generated from protobuf field: string pre_image = 1;
     */
    preImage: string;
}
/**
 * @generated from protobuf message com.vector.WithdrawResolver
 */
export interface WithdrawResolver {
    /**
     * @generated from protobuf field: string responder_signature = 1;
     */
    responderSignature: string;
}
/**
 * @generated from protobuf message com.vector.TransferResolverMap
 */
export interface TransferResolverMap {
    /**
     * @generated from protobuf field: map<string, com.vector.HashlockTransferResolver> hashlock_transfer_resolver = 1;
     */
    hashlockTransferResolver: {
        [key: string]: HashlockTransferResolver;
    };
    /**
     * @generated from protobuf field: map<string, com.vector.WithdrawResolver> withdraw_resolver = 2;
     */
    withdrawResolver: {
        [key: string]: WithdrawResolver;
    };
}
/**
 * @generated from protobuf message com.vector.TransferResolver
 */
export interface TransferResolver {
    /**
     * @generated from protobuf oneof: values
     */
    values: {
        oneofKind: "transferResolverMap";
        /**
         * @generated from protobuf field: com.vector.TransferResolverMap transfer_resolver_map = 1;
         */
        transferResolverMap: TransferResolverMap;
    } | {
        oneofKind: "any";
        /**
         * @generated from protobuf field: google.protobuf.Any any = 2;
         */
        any: Any;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message com.vector.ContractAddresses
 */
export interface ContractAddresses {
    /**
     * @generated from protobuf field: com.vector.Address channel_factory_address = 1;
     */
    channelFactoryAddress?: Address;
    /**
     * @generated from protobuf field: com.vector.Address transfer_registry_address = 2;
     */
    transferRegistryAddress?: Address;
}
/**
 * @generated from protobuf message com.vector.NetworkContext
 */
export interface NetworkContext {
    /**
     * @generated from protobuf field: com.vector.ContractAddresses contract_addresses = 1;
     */
    contractAddresses?: ContractAddresses;
    /**
     * @generated from protobuf field: int32 chain_id = 2;
     */
    chainId: number;
    /**
     * @generated from protobuf field: string provider_url = 3;
     */
    providerUrl: string;
}
/**
 * @generated from protobuf message com.vector.CreateUpdateDetails
 */
export interface CreateUpdateDetails {
    /**
     * @generated from protobuf field: string transfer_id = 1;
     */
    transferId: string;
    /**
     * @generated from protobuf field: com.vector.Balance balance = 2;
     */
    balance?: Balance;
    /**
     * @generated from protobuf field: com.vector.Address transfer_definition = 3;
     */
    transferDefinition?: Address;
    /**
     * @generated from protobuf field: string transfer_timeout = 4;
     */
    transferTimeout: string;
    /**
     * @generated from protobuf field: com.vector.TransferState transfer_initial_state = 5;
     */
    transferInitialState?: TransferState;
    /**
     * @generated from protobuf field: repeated string transfer_encodings = 6;
     */
    transferEncodings: string[];
    /**
     * @generated from protobuf field: repeated string merkle_proof_data = 7;
     */
    merkleProofData: string[];
    /**
     * @generated from protobuf field: string merkle_root = 8;
     */
    merkleRoot: string;
    /**
     * @generated from protobuf field: google.protobuf.Any meta = 9;
     */
    meta?: Any;
}
/**
 * @generated from protobuf message com.vector.ResolveUpdateDetails
 */
export interface ResolveUpdateDetails {
    /**
     * @generated from protobuf field: string transfer_id = 1;
     */
    transferId: string;
    /**
     * @generated from protobuf field: com.vector.Address transfer_definition = 2;
     */
    transferDefinition?: Address;
    /**
     * @generated from protobuf field: com.vector.TransferResolver transfer_resolver = 3;
     */
    transferResolver?: TransferResolver;
    /**
     * @generated from protobuf field: string merkle_root = 4;
     */
    merkleRoot: string;
    /**
     * @generated from protobuf field: google.protobuf.Any meta = 5;
     */
    meta?: Any;
}
/**
 * @generated from protobuf message com.vector.DepositUpdateDetails
 */
export interface DepositUpdateDetails {
    /**
     * @generated from protobuf field: string total_deposits_alice = 1;
     */
    totalDepositsAlice: string;
    /**
     * @generated from protobuf field: string total_deposits_bob = 2;
     */
    totalDepositsBob: string;
    /**
     * @generated from protobuf field: google.protobuf.Any meta = 3;
     */
    meta?: Any;
}
/**
 * @generated from protobuf message com.vector.SetupUpdateDetails
 */
export interface SetupUpdateDetails {
    /**
     * @generated from protobuf field: string timeout = 1;
     */
    timeout: string;
    /**
     * @generated from protobuf field: com.vector.NetworkContext network_context = 2;
     */
    networkContext?: NetworkContext;
    /**
     * @generated from protobuf field: google.protobuf.Any meta = 3;
     */
    meta?: Any;
}
/**
 * @generated from protobuf message com.vector.ChannelUpdateDetailsMap
 */
export interface ChannelUpdateDetailsMap {
    /**
     * @generated from protobuf field: map<string, com.vector.CreateUpdateDetails> create_update_details = 1;
     */
    createUpdateDetails: {
        [key: string]: CreateUpdateDetails;
    };
    /**
     * @generated from protobuf field: map<string, com.vector.ResolveUpdateDetails> deposit_update_details = 2;
     */
    depositUpdateDetails: {
        [key: string]: ResolveUpdateDetails;
    };
    /**
     * @generated from protobuf field: map<string, com.vector.ResolveUpdateDetails> resolve_update_details = 3;
     */
    resolveUpdateDetails: {
        [key: string]: ResolveUpdateDetails;
    };
    /**
     * @generated from protobuf field: map<string, com.vector.SetupUpdateDetails> setup_update_details = 4;
     */
    setupUpdateDetails: {
        [key: string]: SetupUpdateDetails;
    };
}
/**
 * @generated from protobuf message com.vector.ChannelUpdate
 */
export interface ChannelUpdate {
    /**
     * @generated from protobuf field: string channel_address = 1;
     */
    channelAddress: string;
    /**
     * @generated from protobuf field: string from_identifier = 2;
     */
    fromIdentifier: string;
    /**
     * @generated from protobuf field: string to_identifier = 3;
     */
    toIdentifier: string;
    /**
     * @generated from protobuf field: string type = 4;
     */
    type: string;
    /**
     * @generated from protobuf field: int64 nonce = 5;
     */
    nonce: bigint;
    /**
     * @generated from protobuf field: com.vector.Balance balance = 6;
     */
    balance?: Balance;
    /**
     * @generated from protobuf field: com.vector.Address asset_id = 7;
     */
    assetId?: Address;
    /**
     * @generated from protobuf field: com.vector.ChannelUpdateDetailsMap details = 8;
     */
    details?: ChannelUpdateDetailsMap;
    /**
     * @generated from protobuf field: string aliceSignature = 9;
     */
    aliceSignature: string;
    /**
     * @generated from protobuf field: string bob_signature = 10;
     */
    bobSignature: string;
}
/**
 * @generated from protobuf message com.vector.FullChannelState
 */
export interface FullChannelState {
    /**
     * @generated from protobuf field: com.vector.CoreChannelState core_channel_state = 1;
     */
    coreChannelState?: CoreChannelState;
    /**
     * @generated from protobuf field: string alice_identifier = 2;
     */
    aliceIdentifier: string;
    /**
     * @generated from protobuf field: string bob_identifier = 3;
     */
    bobIdentifier: string;
    /**
     * @generated from protobuf field: com.vector.ChannelUpdate latest_update = 4;
     */
    latestUpdate?: ChannelUpdate;
    /**
     * @generated from protobuf field: com.vector.NetworkContext network_context = 5;
     */
    networkContext?: NetworkContext;
    /**
     * @generated from protobuf field: bool in_dispute = 6;
     */
    inDispute: boolean;
}
/**
 * @generated from protobuf message com.vector.FullChannelStateOrUndefined
 */
export interface FullChannelStateOrUndefined {
    /**
     * @generated from protobuf oneof: full_channel_state
     */
    fullChannelState: {
        oneofKind: "fullChannel";
        /**
         * @generated from protobuf field: com.vector.FullChannelState full_channel = 1;
         */
        fullChannel: FullChannelState;
    } | {
        oneofKind: "undefined";
        /**
         * @generated from protobuf field: google.protobuf.Any undefined = 2;
         */
        undefined: Any;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message com.vector.FullChannelStates
 */
export interface FullChannelStates {
    /**
     * @generated from protobuf field: repeated com.vector.FullChannelState full_channel_state = 1;
     */
    fullChannelState: FullChannelState[];
}
/**
 * @generated from protobuf message com.vector.TxHash
 */
export interface TxHash {
    /**
     * @generated from protobuf field: string txHash = 1;
     */
    txHash: string;
}
/**
 * @generated from protobuf message com.vector.Pong
 */
export interface Pong {
    /**
     * @generated from protobuf field: string message = 1;
     */
    message: string;
}
/**
 * @generated from protobuf message com.vector.Empty
 */
export interface Empty {
}
/**
 * @generated from protobuf message com.vector.Configs
 */
export interface Configs {
    /**
     * @generated from protobuf field: repeated com.vector.Config config = 1;
     */
    config: Config[];
}
/**
 * @generated from protobuf message com.vector.Config
 */
export interface Config {
    /**
     * @generated from protobuf field: int32 index = 1;
     */
    index: number;
    /**
     * @generated from protobuf field: string public_identifier = 2;
     */
    publicIdentifier: string;
    /**
     * @generated from protobuf field: string signer_address = 3;
     */
    signerAddress: string;
}
/**
 * @generated from protobuf message com.vector.Status
 */
export interface Status {
    /**
     * @generated from protobuf oneof: ProviderSyncing
     */
    providerSyncing: {
        oneofKind: "boolStat";
        /**
         * @generated from protobuf field: bool bool_stat = 1;
         */
        boolStat: boolean;
    } | {
        oneofKind: "obj";
        /**
         * @generated from protobuf field: com.vector.Status.Obj obj = 2;
         */
        obj: Status_Obj;
    } | {
        oneofKind: "myStat";
        /**
         * @generated from protobuf field: string my_stat = 3;
         */
        myStat: string;
    } | {
        oneofKind: "undefinedStat";
        /**
         * @generated from protobuf field: google.protobuf.Any undefined_stat = 4;
         */
        undefinedStat: Any;
    } | {
        oneofKind: undefined;
    };
    /**
     * @generated from protobuf field: string public_identifier = 5;
     */
    publicIdentifier: string;
    /**
     * @generated from protobuf field: string signer_address = 6;
     */
    signerAddress: string;
    /**
     * @generated from protobuf field: string version = 7;
     */
    version: string;
}
/**
 * @generated from protobuf message com.vector.Status.Obj
 */
export interface Status_Obj {
    /**
     * @generated from protobuf field: string starting_block = 1;
     */
    startingBlock: string;
    /**
     * @generated from protobuf field: string current_block = 2;
     */
    currentBlock: string;
    /**
     * @generated from protobuf field: string highest_block = 3;
     */
    highestBlock: string;
}
/**
 * @generated from protobuf message com.vector.DefundNonces
 */
export interface DefundNonces {
    /**
     * @generated from protobuf field: repeated string nonce = 1;
     */
    nonce: string[];
}
/**
 * @generated from protobuf message com.vector.Deposits
 */
export interface Deposits {
    /**
     * @generated from protobuf field: repeated string deposit = 1;
     */
    deposit: string[];
}
/**
 * @generated from protobuf message com.vector.ChannelStateRequest
 */
export interface ChannelStateRequest {
    /**
     * @generated from protobuf field: string channel_address = 1;
     */
    channelAddress: string;
    /**
     * @generated from protobuf field: string alice = 2;
     */
    alice: string;
    /**
     * @generated from protobuf field: string bob = 3;
     */
    bob: string;
    /**
     * @generated from protobuf field: repeated com.vector.Address asset_id = 4;
     */
    assetId: Address[];
    /**
     * @generated from protobuf field: repeated com.vector.Balance balances = 5;
     */
    balances: Balance[];
    /**
     * @generated from protobuf field: com.vector.Deposits processed_deposits_a = 6;
     */
    processedDepositsA?: Deposits;
    /**
     * @generated from protobuf field: com.vector.Deposits processed_deposits_b = 7;
     */
    processedDepositsB?: Deposits;
    /**
     * @generated from protobuf field: com.vector.DefundNonces defund_nonces = 8;
     */
    defundNonces?: DefundNonces;
    /**
     * @generated from protobuf field: string timeout = 9;
     */
    timeout: string;
    /**
     * @generated from protobuf field: int32 nonce = 10;
     */
    nonce: number;
    /**
     * @generated from protobuf field: string merkle_root = 11;
     */
    merkleRoot: string;
    /**
     * @generated from protobuf field: string alice_identifier = 12;
     */
    aliceIdentifier: string;
    /**
     * @generated from protobuf field: string bo_identifier = 13;
     */
    boIdentifier: string;
    /**
     * @generated from protobuf field: com.vector.ChannelUpdate latest_update = 14;
     */
    latestUpdate?: ChannelUpdate;
}
/**
 * @generated from protobuf message com.vector.CoreTransferState
 */
export interface CoreTransferState {
    /**
     * @generated from protobuf field: com.vector.Address channel_address = 1;
     */
    channelAddress?: Address;
    /**
     * @generated from protobuf field: string transfer_id = 2;
     */
    transferId: string;
    /**
     * @generated from protobuf field: com.vector.Address transfer_definition = 3;
     */
    transferDefinition?: Address;
    /**
     * @generated from protobuf field: com.vector.Address initiator = 4;
     */
    initiator?: Address;
    /**
     * @generated from protobuf field: com.vector.Address responder = 5;
     */
    responder?: Address;
    /**
     * @generated from protobuf field: com.vector.Address asset_id = 6;
     */
    assetId?: Address;
    /**
     * @generated from protobuf field: com.vector.Balance balance = 7;
     */
    balance?: Balance;
    /**
     * @generated from protobuf field: string transfer_timeout = 8;
     */
    transferTimeout: string;
    /**
     * @generated from protobuf field: string initial_state_hash = 9;
     */
    initialStateHash: string;
}
/**
 * @generated from protobuf message com.vector.FullTransferState
 */
export interface FullTransferState {
    /**
     * @generated from protobuf field: com.vector.CoreTransferState core_transfer_state = 1;
     */
    coreTransferState?: CoreTransferState;
    /**
     * @generated from protobuf field: int32 number = 2;
     */
    number: number;
    /**
     * @generated from protobuf field: repeated string transfer_encodings = 3;
     */
    transferEncodings: string[];
    /**
     * @generated from protobuf field: google.protobuf.Any transfer_state = 4;
     */
    transferState?: Any;
    /**
     * @generated from protobuf field: google.protobuf.Any transfer_resolver = 5;
     */
    transferResolver?: Any;
    /**
     * @generated from protobuf field: google.protobuf.Any meta = 6;
     */
    meta?: Any;
    /**
     * @generated from protobuf field: bool in_dispute = 7;
     */
    inDispute: boolean;
    /**
     * @generated from protobuf field: int64 channel_nonce = 8;
     */
    channelNonce: bigint;
    /**
     * @generated from protobuf field: string initiator_identifier = 9;
     */
    initiatorIdentifier: string;
    /**
     * @generated from protobuf field: string responder_identifier = 10;
     */
    responderIdentifier: string;
}
/**
 * @generated from protobuf message com.vector.FullTransferStates
 */
export interface FullTransferStates {
    /**
     * @generated from protobuf field: repeated com.vector.FullTransferState full_transfer_state = 1;
     */
    fullTransferState: FullTransferState[];
}
/**
 * @generated from protobuf message com.vector.FullTransferStateOrUndefined
 */
export interface FullTransferStateOrUndefined {
    /**
     * @generated from protobuf oneof: full_Channel
     */
    fullChannel: {
        oneofKind: "fullTransfer";
        /**
         * @generated from protobuf field: com.vector.FullTransferState full_transfer = 1;
         */
        fullTransfer: FullTransferState;
    } | {
        oneofKind: "undefined";
        /**
         * @generated from protobuf field: google.protobuf.Any undefined = 2;
         */
        undefined: Any;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message com.vector.RegisteredTransfer
 */
export interface RegisteredTransfer {
    /**
     * @generated from protobuf field: string state_encoding = 1;
     */
    stateEncoding: string;
    /**
     * @generated from protobuf field: string resolver_encoding = 2;
     */
    resolverEncoding: string;
    /**
     * @generated from protobuf field: com.vector.Address definition = 3;
     */
    definition?: Address;
    /**
     * @generated from protobuf field: string name = 4;
     */
    name: string;
    /**
     * @generated from protobuf field: string encoded_cancel = 5;
     */
    encodedCancel: string;
}
/**
 * @generated from protobuf message com.vector.RegisteredTransfers
 */
export interface RegisteredTransfers {
    /**
     * @generated from protobuf field: repeated com.vector.RegisteredTransfer registered_transfer = 1;
     */
    registeredTransfer: RegisteredTransfer[];
}
/**
 * @generated from protobuf message com.vector.Body
 */
export interface Body {
    /**
     * @generated from protobuf field: string method = 1;
     */
    method: string;
    /**
     * @generated from protobuf field: google.protobuf.Any params = 2;
     */
    params?: Any;
}
/**
 * @generated from protobuf message com.vector.EthProviderRequest
 */
export interface EthProviderRequest {
    /**
     * @generated from protobuf field: int32 chain_id = 1;
     */
    chainId: number;
    /**
     * @generated from protobuf field: com.vector.Body body = 2;
     */
    body?: Body;
}
/**
 * @generated from protobuf message com.vector.CreateNodeRequest
 */
export interface CreateNodeRequest {
    /**
     * @generated from protobuf field: int32 index = 1;
     */
    index: number;
    /**
     * @generated from protobuf field: string mnemonic = 2;
     */
    mnemonic: string;
}
/**
 * @generated from protobuf message com.vector.CreateNodeReply
 */
export interface CreateNodeReply {
    /**
     * @generated from protobuf field: string public_identifier = 1;
     */
    publicIdentifier: string;
    /**
     * @generated from protobuf field: string signer_address = 2;
     */
    signerAddress: string;
    /**
     * @generated from protobuf field: int32 index = 3;
     */
    index: number;
}
/**
 * @generated from protobuf message com.vector.ClearStoreRequest
 */
export interface ClearStoreRequest {
    /**
     * @generated from protobuf field: com.vector.ClearStoreRequest.AdminToken admin_token = 1;
     */
    adminToken?: ClearStoreRequest_AdminToken;
}
/**
 * @generated from protobuf message com.vector.ClearStoreRequest.AdminToken
 */
export interface ClearStoreRequest_AdminToken {
    /**
     * @generated from protobuf field: string example = 1;
     */
    example: string;
    /**
     * @generated from protobuf field: string description = 2;
     */
    description: string;
}
/**
 * @generated from protobuf message com.vector.TPublicIdentifier
 */
export interface TPublicIdentifier {
    /**
     * @generated from protobuf field: string public_identifier = 1;
     */
    publicIdentifier: string;
}
/**
 * @generated from protobuf message com.vector.SubscriptionWithPublicIdentifierRequest
 */
export interface SubscriptionWithPublicIdentifierRequest {
    /**
     * @generated from protobuf field: com.vector.TPublicIdentifier public_identifier = 1;
     */
    publicIdentifier?: TPublicIdentifier;
}
/**
 * @generated from protobuf message com.vector.SubscriptionWithPublicIdentifierReply
 */
export interface SubscriptionWithPublicIdentifierReply {
    /**
     * @generated from protobuf field: map<string, string> url = 1;
     */
    url: {
        [key: string]: string;
    };
}
/**
 * @generated from protobuf message com.vector.SubscribeRequest
 */
export interface SubscribeRequest {
    /**
     * @generated from protobuf field: com.vector.SubscribeRequest.RegisterListenerBodySchema body = 1;
     */
    body?: SubscribeRequest_RegisterListenerBodySchema;
}
/**
 * @generated from protobuf message com.vector.SubscribeRequest.RegisterListenerBodySchema
 */
export interface SubscribeRequest_RegisterListenerBodySchema {
    /**
     * @generated from protobuf field: com.vector.TPublicIdentifier public_identifier = 1;
     */
    publicIdentifier?: TPublicIdentifier;
    /**
     * @generated from protobuf field: map<string, string> events = 2;
     */
    events: {
        [key: string]: string;
    };
}
/**
 * @generated from protobuf message com.vector.SubscribeReply
 */
export interface SubscribeReply {
    /**
     * @generated from protobuf field: string message = 1;
     */
    message: string;
}
/**
 * @generated from protobuf message com.vector.RestoreStateRequest
 */
export interface RestoreStateRequest {
    /**
     * @generated from protobuf field: com.vector.TPublicIdentifier counterparty_identifier = 1;
     */
    counterpartyIdentifier?: TPublicIdentifier;
    /**
     * @generated from protobuf field: string chain_id = 2;
     */
    chainId: string;
    /**
     * @generated from protobuf field: com.vector.TPublicIdentifier public_identifier = 3;
     */
    publicIdentifier?: TPublicIdentifier;
}
/**
 * @generated from protobuf message com.vector.TAddress
 */
export interface TAddress {
    /**
     * @generated from protobuf field: string channel_address = 1;
     */
    channelAddress: string;
}
/**
 * @generated from protobuf message com.vector.RestoreStateReply
 */
export interface RestoreStateReply {
    /**
     * @generated from protobuf field: com.vector.TAddress channel_address = 1;
     */
    channelAddress?: TAddress;
}
/**
 * @generated from protobuf message com.vector.WithdrawReply
 */
export interface WithdrawReply {
    /**
     * @generated from protobuf field: com.vector.TAddress channel_address = 1;
     */
    channelAddress?: TAddress;
    /**
     * @generated from protobuf field: bytes transfer_id = 2;
     */
    transferId: Uint8Array;
    /**
     * @generated from protobuf field: bytes transaction_hash = 3;
     */
    transactionHash: Uint8Array;
}
/**
 * @generated from protobuf message com.vector.TBasicMeta
 */
export interface TBasicMeta {
    /**
     * map<google.protobuf.Any, google.protobuf.Any> basic_meta = 1;
     *
     * @generated from protobuf field: map<string, google.protobuf.Any> basic_meta = 1;
     */
    basicMeta: {
        [key: string]: Any;
    };
}
/**
 * @generated from protobuf message com.vector.WithdrawRequestSchema
 */
export interface WithdrawRequestSchema {
    /**
     * @generated from protobuf field: com.vector.TAddress channel_address = 1;
     */
    channelAddress?: TAddress;
    /**
     * @generated from protobuf field: string amount = 2;
     */
    amount: string;
    /**
     * @generated from protobuf field: com.vector.TAddress asset_id = 3;
     */
    assetId?: TAddress;
    /**
     * @generated from protobuf field: com.vector.TAddress recipient = 4;
     */
    recipient?: TAddress;
    /**
     * @generated from protobuf field: string fee = 5;
     */
    fee: string;
    /**
     * @generated from protobuf field: com.vector.TAddress call_to = 6;
     */
    callTo?: TAddress;
    /**
     * @generated from protobuf field: string call_data = 7;
     */
    callData: string;
    /**
     * @generated from protobuf field: com.vector.TBasicMeta meta = 8;
     */
    meta?: TBasicMeta;
}
/**
 * @generated from protobuf message com.vector.WithdrawRequest
 */
export interface WithdrawRequest {
    /**
     * @generated from protobuf field: com.vector.WithdrawRequestSchema withdraw_schema = 1;
     */
    withdrawSchema?: WithdrawRequestSchema;
    /**
     * @generated from protobuf field: com.vector.TPublicIdentifier public_identifier = 2;
     */
    publicIdentifier?: TPublicIdentifier;
}
/**
 * @generated from protobuf message com.vector.ResolveTransferSchema
 */
export interface ResolveTransferSchema {
    /**
     * @generated from protobuf field: com.vector.TAddress channel_address = 1;
     */
    channelAddress?: TAddress;
    /**
     * @generated from protobuf field: bytes transfer_id = 2;
     */
    transferId: Uint8Array;
    /**
     * @generated from protobuf field: com.vector.TBasicMeta meta = 3;
     */
    meta?: TBasicMeta;
    /**
     * @generated from protobuf field: com.vector.TransferResolverSchema transfer_resolver = 4;
     */
    transferResolver?: TransferResolverSchema;
}
/**
 * @generated from protobuf message com.vector.TransferResolverSchema
 */
export interface TransferResolverSchema {
    /**
     * map<google.protobuf.Any, google.protobuf.Any> resolver = 1;
     *
     * @generated from protobuf field: map<string, google.protobuf.Any> resolver = 1;
     */
    resolver: {
        [key: string]: Any;
    };
}
/**
 * @generated from protobuf message com.vector.ResolveTransferRequest
 */
export interface ResolveTransferRequest {
    /**
     * @generated from protobuf field: com.vector.ResolveTransferSchema resolver_transfer_schema = 1;
     */
    resolverTransferSchema?: ResolveTransferSchema;
    /**
     * @generated from protobuf field: com.vector.TPublicIdentifier public_identifier = 2;
     */
    publicIdentifier?: TPublicIdentifier;
}
/**
 * @generated from protobuf message com.vector.ResolveTransferReply
 */
export interface ResolveTransferReply {
    /**
     * @generated from protobuf field: com.vector.TAddress channel_address = 1;
     */
    channelAddress?: TAddress;
    /**
     * @generated from protobuf field: bytes transfer_id = 2;
     */
    transferId: Uint8Array;
    /**
     * @generated from protobuf field: bytes routing_id = 3;
     */
    routingId: Uint8Array;
}
/**
 * @generated from protobuf message com.vector.CreateConditionalTransferParamsSchema
 */
export interface CreateConditionalTransferParamsSchema {
    /**
     * @generated from protobuf field: com.vector.TAddress channel_address = 1;
     */
    channelAddress?: TAddress;
    /**
     * @generated from protobuf field: string amount = 2;
     */
    amount: string;
    /**
     * @generated from protobuf field: com.vector.TAddress asset_id = 3;
     */
    assetId?: TAddress;
    /**
     * @generated from protobuf field: com.vector.TPublicIdentifier recipient = 4;
     */
    recipient?: TPublicIdentifier;
    /**
     * @generated from protobuf field: int32 recipient_chainId = 5;
     */
    recipientChainId: number;
    /**
     * @generated from protobuf field: com.vector.TAddress recipient_assetId = 6;
     */
    recipientAssetId?: TAddress;
    /**
     * @generated from protobuf field: string timeout = 7;
     */
    timeout: string;
    /**
     * @generated from protobuf field: com.vector.TBasicMeta meta = 8;
     */
    meta?: TBasicMeta;
    /**
     * @generated from protobuf field: string type = 9;
     */
    type: string;
    /**
     * map<google.protobuf.Any, google.protobuf.Any> details = 10;
     *
     * @generated from protobuf field: map<string, google.protobuf.Any> details = 10;
     */
    details: {
        [key: string]: Any;
    };
}
/**
 * @generated from protobuf message com.vector.ConditionalTransferRequest
 */
export interface ConditionalTransferRequest {
    /**
     * @generated from protobuf field: com.vector.CreateConditionalTransferParamsSchema create_conditional_transfer_params_schema = 1;
     */
    createConditionalTransferParamsSchema?: CreateConditionalTransferParamsSchema;
    /**
     * @generated from protobuf field: com.vector.TPublicIdentifier public_identifier = 2;
     */
    publicIdentifier?: TPublicIdentifier;
}
/**
 * @generated from protobuf message com.vector.CollateralReply
 */
export interface CollateralReply {
    /**
     * @generated from protobuf field: com.vector.FullChannelState full_channel_state = 1;
     */
    fullChannelState?: FullChannelState;
    /**
     * @generated from protobuf field: com.vector.TAddress channel_address = 2;
     */
    channelAddress?: TAddress;
}
/**
 * @generated from protobuf message com.vector.RequestCollateralSchema
 */
export interface RequestCollateralSchema {
    /**
     * @generated from protobuf field: com.vector.TAddress channel_address = 1;
     */
    channelAddress?: TAddress;
    /**
     * @generated from protobuf field: com.vector.TAddress asset_id = 2;
     */
    assetId?: TAddress;
    /**
     * @generated from protobuf field: string amount = 3;
     */
    amount: string;
}
/**
 * @generated from protobuf message com.vector.CollateralRequest
 */
export interface CollateralRequest {
    /**
     * @generated from protobuf field: com.vector.RequestCollateralSchema collateral_request = 1;
     */
    collateralRequest?: RequestCollateralSchema;
    /**
     * @generated from protobuf field: com.vector.TPublicIdentifier public_identifier = 2;
     */
    publicIdentifier?: TPublicIdentifier;
}
/**
 * @generated from protobuf message com.vector.DepositEngineParamsSchema
 */
export interface DepositEngineParamsSchema {
    /**
     * @generated from protobuf field: com.vector.TAddress channel_address = 1;
     */
    channelAddress?: TAddress;
    /**
     * @generated from protobuf field: com.vector.TAddress asset_id = 2;
     */
    assetId?: TAddress;
    /**
     * @generated from protobuf field: com.vector.TBasicMeta meta = 3;
     */
    meta?: TBasicMeta;
}
/**
 * @generated from protobuf message com.vector.DepositRequest
 */
export interface DepositRequest {
    /**
     * @generated from protobuf field: com.vector.DepositEngineParamsSchema deposit_engine_params_schema = 1;
     */
    depositEngineParamsSchema?: DepositEngineParamsSchema;
    /**
     * @generated from protobuf field: com.vector.TPublicIdentifier public_identifier = 2;
     */
    publicIdentifier?: TPublicIdentifier;
}
/**
 * @generated from protobuf message com.vector.DefundTransferParamsSchema
 */
export interface DefundTransferParamsSchema {
    /**
     * @generated from protobuf field: bytes transfer_id = 1;
     */
    transferId: Uint8Array;
}
/**
 * @generated from protobuf message com.vector.TransferResquest
 */
export interface TransferResquest {
    /**
     * @generated from protobuf field: com.vector.DefundTransferParamsSchema defund_transfer_params_schema = 1;
     */
    defundTransferParamsSchema?: DefundTransferParamsSchema;
    /**
     * @generated from protobuf field: com.vector.TPublicIdentifier public_identifier = 2;
     */
    publicIdentifier?: TPublicIdentifier;
}
/**
 * @generated from protobuf message com.vector.DefundChannelParamsSchema
 */
export interface DefundChannelParamsSchema {
    /**
     * @generated from protobuf field: com.vector.TAddress channel_address = 1;
     */
    channelAddress?: TAddress;
}
/**
 * @generated from protobuf message com.vector.ChannelResquest
 */
export interface ChannelResquest {
    /**
     * @generated from protobuf field: com.vector.DefundChannelParamsSchema defund_channel_params_schema = 1;
     */
    defundChannelParamsSchema?: DefundChannelParamsSchema;
    /**
     * @generated from protobuf field: com.vector.TPublicIdentifier public_identifier = 2;
     */
    publicIdentifier?: TPublicIdentifier;
}
/**
 * @generated from protobuf message com.vector.DepositTxRequest
 */
export interface DepositTxRequest {
    /**
     * @generated from protobuf field: com.vector.TAddress channel_address = 1;
     */
    channelAddress?: TAddress;
    /**
     * @generated from protobuf field: string amount = 2;
     */
    amount: string;
    /**
     * @generated from protobuf field: com.vector.TAddress asset_id = 3;
     */
    assetId?: TAddress;
    /**
     * @generated from protobuf field: int32 chain_id = 4;
     */
    chainId: number;
    /**
     * @generated from protobuf field: com.vector.TPublicIdentifier public_identifier = 5;
     */
    publicIdentifier?: TPublicIdentifier;
}
/**
 * @generated from protobuf message com.vector.SetupRequest
 */
export interface SetupRequest {
    /**
     * @generated from protobuf field: com.vector.TPublicIdentifier counterparty_identifier = 1;
     */
    counterpartyIdentifier?: TPublicIdentifier;
    /**
     * @generated from protobuf field: int32 chain_id = 2;
     */
    chainId: number;
    /**
     * @generated from protobuf field: string timeout = 3;
     */
    timeout: string;
    /**
     * @generated from protobuf field: com.vector.TBasicMeta meta = 4;
     */
    meta?: TBasicMeta;
    /**
     * @generated from protobuf field: com.vector.TPublicIdentifier public_identifier = 5;
     */
    publicIdentifier?: TPublicIdentifier;
}
/**
 * @generated from protobuf message com.vector.SetupReply
 */
export interface SetupReply {
    /**
     * @generated from protobuf field: com.vector.FullChannelState full_channel_state = 1;
     */
    fullChannelState?: FullChannelState;
    /**
     * @generated from protobuf field: com.vector.TAddress channel_address = 2;
     */
    channelAddress?: TAddress;
}
/**
 * @generated from protobuf message com.vector.RegisteredTransfersRequest
 */
export interface RegisteredTransfersRequest {
    /**
     * @generated from protobuf field: int32 chain_id = 1;
     */
    chainId: number;
    /**
     * @generated from protobuf field: com.vector.TPublicIdentifier public_identifier = 2;
     */
    publicIdentifier?: TPublicIdentifier;
}
/**
 * @generated from protobuf message com.vector.ChannelStatesRequest
 */
export interface ChannelStatesRequest {
    /**
     * @generated from protobuf field: com.vector.TPublicIdentifier public_identifier = 1;
     */
    publicIdentifier?: TPublicIdentifier;
}
/**
 * @generated from protobuf message com.vector.ActiveTransfersRequest
 */
export interface ActiveTransfersRequest {
    /**
     * @generated from protobuf field: com.vector.TAddress channel_address = 1;
     */
    channelAddress?: TAddress;
    /**
     * @generated from protobuf field: com.vector.TPublicIdentifier public_identifier = 2;
     */
    publicIdentifier?: TPublicIdentifier;
}
/**
 * @generated from protobuf message com.vector.TransferStatesByRoutingIdRequest
 */
export interface TransferStatesByRoutingIdRequest {
    /**
     * @generated from protobuf field: com.vector.TAddress channel_address = 1;
     */
    channelAddress?: TAddress;
    /**
     * @generated from protobuf field: bytes routing_id = 2;
     */
    routingId: Uint8Array;
    /**
     * @generated from protobuf field: com.vector.TPublicIdentifier public_identifier = 3;
     */
    publicIdentifier?: TPublicIdentifier;
}
/**
 * @generated from protobuf message com.vector.TransferStateByRoutingIdRequest
 */
export interface TransferStateByRoutingIdRequest {
    /**
     * @generated from protobuf field: bytes routing_id = 1;
     */
    routingId: Uint8Array;
    /**
     * @generated from protobuf field: com.vector.TPublicIdentifier public_identifier = 2;
     */
    publicIdentifier?: TPublicIdentifier;
}
/**
 * @generated from protobuf message com.vector.TransfersRequest
 */
export interface TransfersRequest {
    /**
     * @generated from protobuf field: bytes transfer_id = 1;
     */
    transferId: Uint8Array;
    /**
     * @generated from protobuf field: com.vector.TPublicIdentifier public_identifier = 2;
     */
    publicIdentifier?: TPublicIdentifier;
}
/**
 * @generated from protobuf message com.vector.TransferEncodingSchema
 */
export interface TransferEncodingSchema {
    /**
     * @generated from protobuf field: string encoding = 1;
     */
    encoding: string;
}
/**
 * @generated from protobuf message com.vector.TransferStateSchema
 */
export interface TransferStateSchema {
    /**
     * map<google.protobuf.Any, google.protobuf.Any> state = 1;
     *
     * @generated from protobuf field: map<string, google.protobuf.Any> state = 1;
     */
    state: {
        [key: string]: Any;
    };
}
// message TransferResolverSchema {
//    map<google.protobuf.Any, google.protobuf.Any> state = 1;
// }

/**
 * @generated from protobuf message com.vector.TFullTransferState
 */
export interface TFullTransferState {
    /**
     * @generated from protobuf field: com.vector.TBalance balance = 1;
     */
    balance?: TBalance;
    /**
     * @generated from protobuf field: com.vector.TAddress asset_id = 2;
     */
    assetId?: TAddress;
    /**
     * @generated from protobuf field: com.vector.TAddress channel_address = 3;
     */
    channelAddress?: TAddress;
    /**
     * @generated from protobuf field: bool in_dispute = 4;
     */
    inDispute: boolean;
    /**
     * @generated from protobuf field: bytes transfer_id = 5;
     */
    transferId: Uint8Array;
    /**
     * @generated from protobuf field: com.vector.TAddress transfer_definition = 6;
     */
    transferDefinition?: TAddress;
    /**
     * @generated from protobuf field: string transfer_timeout = 7;
     */
    transferTimeout: string;
    /**
     * @generated from protobuf field: bytes initial_statehash = 8;
     */
    initialStatehash: Uint8Array;
    /**
     * @generated from protobuf field: com.vector.TAddress initiator = 9;
     */
    initiator?: TAddress; // either alice or bob
    /**
     * @generated from protobuf field: com.vector.TAddress responder = 10;
     */
    responder?: TAddress; // either alice or bob
    /**
     * @generated from protobuf field: com.vector.TAddress channel_factory_address = 11;
     */
    channelFactoryAddress?: TAddress; // networkContext?
    /**
     * @generated from protobuf field: int32 chain_id = 12;
     */
    chainId: number;
    /**
     * @generated from protobuf field: repeated com.vector.TransferEncodingSchema transfer_encodings = 13;
     */
    transferEncodings: TransferEncodingSchema[]; // Initial state encoding, resolver encoding
    /**
     * @generated from protobuf field: com.vector.TransferStateSchema transfer_state = 14;
     */
    transferState?: TransferStateSchema;
    /**
     * @generated from protobuf field: com.vector.TransferResolverSchema transferResolver = 15;
     */
    transferResolver?: TransferResolverSchema; // undefined iff not resolved
    /**
     * @generated from protobuf field: com.vector.TBasicMeta meta = 16;
     */
    meta?: TBasicMeta;
    /**
     * @generated from protobuf field: int64 channel_nonce = 17;
     */
    channelNonce: bigint;
    /**
     * @generated from protobuf field: com.vector.TPublicIdentifier initiator_identifier = 18;
     */
    initiatorIdentifier?: TPublicIdentifier;
    /**
     * @generated from protobuf field: com.vector.TPublicIdentifier responder_identifier = 19;
     */
    responderIdentifier?: TPublicIdentifier;
}
/**
 * @generated from protobuf message com.vector.TransferStateReply
 */
export interface TransferStateReply {
    /**
     * @generated from protobuf oneof: Response
     */
    response: {
        oneofKind: "defined";
        /**
         * @generated from protobuf field: string defined = 1;
         */
        defined: string;
    } | {
        oneofKind: "tfullTransferState";
        /**
         * @generated from protobuf field: com.vector.TFullTransferState tfull_transfer_state = 2;
         */
        tfullTransferState: TFullTransferState;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message com.vector.ChannelStateByParticipantsRequest
 */
export interface ChannelStateByParticipantsRequest {
    /**
     * @generated from protobuf field: com.vector.TPublicIdentifier public_identifier = 1;
     */
    publicIdentifier?: TPublicIdentifier;
    /**
     * @generated from protobuf field: com.vector.TPublicIdentifier counterparty = 2;
     */
    counterparty?: TPublicIdentifier;
    /**
     * @generated from protobuf field: int32 chain_id = 3;
     */
    chainId: number;
}
/**
 * @generated from protobuf message com.vector.AssetIds
 */
export interface AssetIds {
    /**
     * @generated from protobuf field: com.vector.TAddress asset_id = 1;
     */
    assetId?: TAddress;
}
/**
 * @generated from protobuf message com.vector.TBalance
 */
export interface TBalance {
    /**
     * @generated from protobuf field: repeated com.vector.TAddress to = 1;
     */
    to: TAddress[];
    /**
     * @generated from protobuf field: repeated string amount = 2;
     */
    amount: string[];
}
/**
 * @generated from protobuf message com.vector.EthProviderReply
 */
export interface EthProviderReply {
    /**
     * @generated from protobuf field: google.protobuf.Any response = 1;
     */
    response?: Any;
}
/**
 * @generated from protobuf service com.vector.VectorService
 */
export interface IVectorServiceClient {
    /**
     * @generated from protobuf rpc: GetPing(com.vector.Empty) returns (com.vector.Pong);
     */
    getPing(input: Empty, options?: RpcOptions): UnaryCall<Empty, Pong>;
    /**
     * @generated from protobuf rpc: GetConfig(com.vector.Empty) returns (com.vector.Configs);
     */
    getConfig(input: Empty, options?: RpcOptions): UnaryCall<Empty, Configs>;
    /**
     * @generated from protobuf rpc: GetStatus(com.vector.TPublicIdentifier) returns (com.vector.Status);
     */
    getStatus(input: TPublicIdentifier, options?: RpcOptions): UnaryCall<TPublicIdentifier, Status>;
    /**
     * @generated from protobuf rpc: GetChannelState(com.vector.ChannelStateRequest) returns (com.vector.FullChannelStateOrUndefined);
     */
    getChannelState(input: ChannelStateRequest, options?: RpcOptions): UnaryCall<ChannelStateRequest, FullChannelStateOrUndefined>;
    /**
     * @generated from protobuf rpc: GetChannelStates(com.vector.Empty) returns (com.vector.FullChannelStates);
     */
    getChannelStates(input: Empty, options?: RpcOptions): UnaryCall<Empty, FullChannelStates>;
    /**
     * @generated from protobuf rpc: GetChannelStateByParticipants(com.vector.ChannelStateByParticipantsRequest) returns (com.vector.FullChannelStateOrUndefined);
     */
    getChannelStateByParticipants(input: ChannelStateByParticipantsRequest, options?: RpcOptions): UnaryCall<ChannelStateByParticipantsRequest, FullChannelStateOrUndefined>;
    /**
     * @generated from protobuf rpc: TransferState(com.vector.TransfersRequest) returns (com.vector.TransferStateReply);
     */
    transferState(input: TransfersRequest, options?: RpcOptions): UnaryCall<TransfersRequest, TransferStateReply>;
    /**
     * @generated from protobuf rpc: GetTransferStateByRoutingId(com.vector.TransferStateByRoutingIdRequest) returns (com.vector.FullTransferStateOrUndefined);
     */
    getTransferStateByRoutingId(input: TransferStateByRoutingIdRequest, options?: RpcOptions): UnaryCall<TransferStateByRoutingIdRequest, FullTransferStateOrUndefined>;
    /**
     * @generated from protobuf rpc: GetTransferStatesByRoutingId(com.vector.TransferStatesByRoutingIdRequest) returns (com.vector.FullTransferStates);
     */
    getTransferStatesByRoutingId(input: TransferStatesByRoutingIdRequest, options?: RpcOptions): UnaryCall<TransferStatesByRoutingIdRequest, FullTransferStates>;
    /**
     * @generated from protobuf rpc: GetActiveTransfers(com.vector.ActiveTransfersRequest) returns (com.vector.FullTransferStates);
     */
    getActiveTransfers(input: ActiveTransfersRequest, options?: RpcOptions): UnaryCall<ActiveTransfersRequest, FullTransferStates>;
    /**
     * rpc GetChannelStates (ChannelStatesRequest) returns (FullTransferStates) {}
     *
     * @generated from protobuf rpc: GetRegisteredTransfers(com.vector.RegisteredTransfersRequest) returns (com.vector.RegisteredTransfers);
     */
    getRegisteredTransfers(input: RegisteredTransfersRequest, options?: RpcOptions): UnaryCall<RegisteredTransfersRequest, RegisteredTransfers>;
    /**
     * @generated from protobuf rpc: Setup(com.vector.SetupRequest) returns (com.vector.SetupReply);
     */
    setup(input: SetupRequest, options?: RpcOptions): UnaryCall<SetupRequest, SetupReply>;
    /**
     * @generated from protobuf rpc: InternalSetup(com.vector.SetupRequest) returns (com.vector.FullChannelState);
     */
    internalSetup(input: SetupRequest, options?: RpcOptions): UnaryCall<SetupRequest, FullChannelState>;
    /**
     * @generated from protobuf rpc: Deposit(com.vector.DepositRequest) returns (com.vector.FullChannelState);
     */
    deposit(input: DepositRequest, options?: RpcOptions): UnaryCall<DepositRequest, FullChannelState>;
    /**
     * @generated from protobuf rpc: SendDepositTx(com.vector.DepositTxRequest) returns (com.vector.TxHash);
     */
    sendDepositTx(input: DepositTxRequest, options?: RpcOptions): UnaryCall<DepositTxRequest, TxHash>;
    /**
     * @generated from protobuf rpc: SendDisputeChannelTx(com.vector.ChannelResquest) returns (com.vector.TxHash);
     */
    sendDisputeChannelTx(input: ChannelResquest, options?: RpcOptions): UnaryCall<ChannelResquest, TxHash>;
    /**
     * @generated from protobuf rpc: SendDefundChannelTx(com.vector.ChannelResquest) returns (com.vector.TxHash);
     */
    sendDefundChannelTx(input: ChannelResquest, options?: RpcOptions): UnaryCall<ChannelResquest, TxHash>;
    /**
     * @generated from protobuf rpc: SendDisputeTransfer(com.vector.TransferResquest) returns (com.vector.TxHash);
     */
    sendDisputeTransfer(input: TransferResquest, options?: RpcOptions): UnaryCall<TransferResquest, TxHash>;
    /**
     * @generated from protobuf rpc: SendDefundTransfer(com.vector.TransferResquest) returns (com.vector.TxHash);
     */
    sendDefundTransfer(input: TransferResquest, options?: RpcOptions): UnaryCall<TransferResquest, TxHash>;
    /**
     * @generated from protobuf rpc: SendRequestCollateral(com.vector.DepositRequest) returns (com.vector.CollateralReply);
     */
    sendRequestCollateral(input: DepositRequest, options?: RpcOptions): UnaryCall<DepositRequest, CollateralReply>;
    /**
     * @generated from protobuf rpc: CreateTransfer(com.vector.ConditionalTransferRequest) returns (com.vector.ResolveTransferReply);
     */
    createTransfer(input: ConditionalTransferRequest, options?: RpcOptions): UnaryCall<ConditionalTransferRequest, ResolveTransferReply>;
    /**
     * @generated from protobuf rpc: ResolveTransfer(com.vector.ResolveTransferRequest) returns (com.vector.ResolveTransferReply);
     */
    resolveTransfer(input: ResolveTransferRequest, options?: RpcOptions): UnaryCall<ResolveTransferRequest, ResolveTransferReply>;
    /**
     * @generated from protobuf rpc: Withdraw(com.vector.WithdrawRequest) returns (com.vector.WithdrawReply);
     */
    withdraw(input: WithdrawRequest, options?: RpcOptions): UnaryCall<WithdrawRequest, WithdrawReply>;
    /**
     * @generated from protobuf rpc: RestoreState(com.vector.RestoreStateRequest) returns (com.vector.RestoreStateReply);
     */
    restoreState(input: RestoreStateRequest, options?: RpcOptions): UnaryCall<RestoreStateRequest, RestoreStateReply>;
    /**
     *   [ChannelRpcMethods.chan_restoreState]: FullChannelState;
     *   { schema: { body: NodeParams.RestoreStateSchema, response: NodeResponses.RestoreStateSchema } },
     *   NodeResponses.RestoreState
     *
     * @generated from protobuf rpc: Subscribe(com.vector.SubscribeRequest) returns (com.vector.SubscribeReply);
     */
    subscribe(input: SubscribeRequest, options?: RpcOptions): UnaryCall<SubscribeRequest, SubscribeReply>;
    /**
     *   [ChannelRpcMethods.chan_subscribe]: { event: string; once: boolean };
     *   body: NodeParams.RegisterListenerSchema
     *
     * rpc GetUrl (GetUrlRequest) returns (ListenerSchemaReply) {}
     *
     * @generated from protobuf rpc: GetSubscription(com.vector.SubscriptionRequest) returns (com.vector.Subscription);
     */
    getSubscription(input: SubscriptionRequest, options?: RpcOptions): UnaryCall<SubscriptionRequest, Subscription>;
    /**
     * @generated from protobuf rpc: GetSubscriptionWithOnlyPublicIdentifier(com.vector.SubscriptionWithPublicIdentifierRequest) returns (com.vector.SubscriptionWithPublicIdentifierReply);
     */
    getSubscriptionWithOnlyPublicIdentifier(input: SubscriptionWithPublicIdentifierRequest, options?: RpcOptions): UnaryCall<SubscriptionWithPublicIdentifierRequest, SubscriptionWithPublicIdentifierReply>;
    /**
     *  NodeParams.GetListenerSchema,
     *
     * @generated from protobuf rpc: ClearStore(com.vector.ClearStoreRequest) returns (com.vector.ClearStoreReply);
     */
    clearStore(input: ClearStoreRequest, options?: RpcOptions): UnaryCall<ClearStoreRequest, ClearStoreReply>;
    /**
     * @generated from protobuf rpc: CreateNode(com.vector.CreateNodeRequest) returns (com.vector.CreateNodeReply);
     */
    createNode(input: CreateNodeRequest, options?: RpcOptions): UnaryCall<CreateNodeRequest, CreateNodeReply>;
    /**
     * @generated from protobuf rpc: EthProvider(com.vector.EthProviderRequest) returns (com.vector.EthProviderReply);
     */
    ethProvider(input: EthProviderRequest, options?: RpcOptions): UnaryCall<EthProviderRequest, EthProviderReply>;
}
/**
 * Type for protobuf message com.vector.ClearStoreReply
 */
class ClearStoreReply$Type extends MessageType<ClearStoreReply> {
    constructor() {
        super("com.vector.ClearStoreReply", [
            { no: 1, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
}
export const ClearStoreReply = new ClearStoreReply$Type();
/**
 * Type for protobuf message com.vector.SubscriptionRequest
 */
class SubscriptionRequest$Type extends MessageType<SubscriptionRequest> {
    constructor() {
        super("com.vector.SubscriptionRequest", [
            { no: 1, name: "is_alive_event", kind: "scalar", oneof: "eventName", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "setup_event", kind: "scalar", oneof: "eventName", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "conditional_transfer_created_event", kind: "scalar", oneof: "eventName", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "conditional_transfer_resolved_event", kind: "scalar", oneof: "eventName", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "deposit_reconciled_event", kind: "scalar", oneof: "eventName", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "request_collateral_event", kind: "scalar", oneof: "eventName", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "restore_state_event", kind: "scalar", oneof: "eventName", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "withdraw_created_event", kind: "scalar", oneof: "eventName", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "withdraw_resolved_event", kind: "scalar", oneof: "eventName", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "withdraw_reconciled_event", kind: "scalar", oneof: "eventName", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "public_identifier", kind: "message", T: () => TPublicIdentifier }
        ]);
    }
}
export const SubscriptionRequest = new SubscriptionRequest$Type();
/**
 * Type for protobuf message com.vector.Subscription
 */
class Subscription$Type extends MessageType<Subscription> {
    constructor() {
        super("com.vector.Subscription", [
            { no: 1, name: "url", kind: "message", T: () => Subscription_TUrl }
        ]);
    }
}
export const Subscription = new Subscription$Type();
/**
 * Type for protobuf message com.vector.Subscription.TUrl
 */
class Subscription_TUrl$Type extends MessageType<Subscription_TUrl> {
    constructor() {
        super("com.vector.Subscription.TUrl", [
            { no: 1, name: "url", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
}
export const Subscription_TUrl = new Subscription_TUrl$Type();
/**
 * Type for protobuf message com.vector.ListenerSchemaReply
 */
class ListenerSchemaReply$Type extends MessageType<ListenerSchemaReply> {
    constructor() {
        super("com.vector.ListenerSchemaReply", [
            { no: 1, name: "url", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
}
export const ListenerSchemaReply = new ListenerSchemaReply$Type();
/**
 * Type for protobuf message com.vector.Balance
 */
class Balance$Type extends MessageType<Balance> {
    constructor() {
        super("com.vector.Balance", [
            { no: 1, name: "amount", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "to", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
}
export const Balance = new Balance$Type();
/**
 * Type for protobuf message com.vector.Address
 */
class Address$Type extends MessageType<Address> {
    constructor() {
        super("com.vector.Address", [
            { no: 1, name: "address", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
}
export const Address = new Address$Type();
/**
 * Type for protobuf message com.vector.CoreChannelState
 */
class CoreChannelState$Type extends MessageType<CoreChannelState> {
    constructor() {
        super("com.vector.CoreChannelState", [
            { no: 1, name: "channel_address", kind: "message", T: () => Address },
            { no: 2, name: "alice", kind: "message", T: () => Address },
            { no: 3, name: "bob", kind: "message", T: () => Address },
            { no: 4, name: "asset_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "balances", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Balance },
            { no: 6, name: "processed_deposits_a", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "processed_deposits_b", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "defund_nounces", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "timeout", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "nonce", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 11, name: "merkle_root", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
}
export const CoreChannelState = new CoreChannelState$Type();
/**
 * Type for protobuf message com.vector.WithdrawState
 */
class WithdrawState$Type extends MessageType<WithdrawState> {
    constructor() {
        super("com.vector.WithdrawState", [
            { no: 1, name: "initiator_signature", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "initiator", kind: "message", T: () => Address },
            { no: 3, name: "responder", kind: "message", T: () => Address },
            { no: 4, name: "data", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 5, name: "nonce", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "fee", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "call_to", kind: "message", T: () => Address },
            { no: 8, name: "call_data", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
}
export const WithdrawState = new WithdrawState$Type();
/**
 * Type for protobuf message com.vector.HashlockTransferState
 */
class HashlockTransferState$Type extends MessageType<HashlockTransferState> {
    constructor() {
        super("com.vector.HashlockTransferState", [
            { no: 1, name: "lock_hash", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "expiry", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
}
export const HashlockTransferState = new HashlockTransferState$Type();
/**
 * Type for protobuf message com.vector.TransferStateMap
 */
class TransferStateMap$Type extends MessageType<TransferStateMap> {
    constructor() {
        super("com.vector.TransferStateMap", [
            { no: 1, name: "hashlock_transfer_state", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => HashlockTransferState } },
            { no: 2, name: "withdraw_state", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => WithdrawState } }
        ]);
    }
}
export const TransferStateMap = new TransferStateMap$Type();
/**
 * Type for protobuf message com.vector.TransferState
 */
class TransferState$Type extends MessageType<TransferState> {
    constructor() {
        super("com.vector.TransferState", [
            { no: 1, name: "transfer_state_map", kind: "message", oneof: "values", T: () => TransferStateMap },
            { no: 2, name: "any", kind: "message", oneof: "values", T: () => Any }
        ]);
    }
}
export const TransferState = new TransferState$Type();
/**
 * Type for protobuf message com.vector.HashlockTransferResolver
 */
class HashlockTransferResolver$Type extends MessageType<HashlockTransferResolver> {
    constructor() {
        super("com.vector.HashlockTransferResolver", [
            { no: 1, name: "pre_image", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
}
export const HashlockTransferResolver = new HashlockTransferResolver$Type();
/**
 * Type for protobuf message com.vector.WithdrawResolver
 */
class WithdrawResolver$Type extends MessageType<WithdrawResolver> {
    constructor() {
        super("com.vector.WithdrawResolver", [
            { no: 1, name: "responder_signature", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
}
export const WithdrawResolver = new WithdrawResolver$Type();
/**
 * Type for protobuf message com.vector.TransferResolverMap
 */
class TransferResolverMap$Type extends MessageType<TransferResolverMap> {
    constructor() {
        super("com.vector.TransferResolverMap", [
            { no: 1, name: "hashlock_transfer_resolver", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => HashlockTransferResolver } },
            { no: 2, name: "withdraw_resolver", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => WithdrawResolver } }
        ]);
    }
}
export const TransferResolverMap = new TransferResolverMap$Type();
/**
 * Type for protobuf message com.vector.TransferResolver
 */
class TransferResolver$Type extends MessageType<TransferResolver> {
    constructor() {
        super("com.vector.TransferResolver", [
            { no: 1, name: "transfer_resolver_map", kind: "message", oneof: "values", T: () => TransferResolverMap },
            { no: 2, name: "any", kind: "message", oneof: "values", T: () => Any }
        ]);
    }
}
export const TransferResolver = new TransferResolver$Type();
/**
 * Type for protobuf message com.vector.ContractAddresses
 */
class ContractAddresses$Type extends MessageType<ContractAddresses> {
    constructor() {
        super("com.vector.ContractAddresses", [
            { no: 1, name: "channel_factory_address", kind: "message", T: () => Address },
            { no: 2, name: "transfer_registry_address", kind: "message", T: () => Address }
        ]);
    }
}
export const ContractAddresses = new ContractAddresses$Type();
/**
 * Type for protobuf message com.vector.NetworkContext
 */
class NetworkContext$Type extends MessageType<NetworkContext> {
    constructor() {
        super("com.vector.NetworkContext", [
            { no: 1, name: "contract_addresses", kind: "message", T: () => ContractAddresses },
            { no: 2, name: "chain_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "provider_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
}
export const NetworkContext = new NetworkContext$Type();
/**
 * Type for protobuf message com.vector.CreateUpdateDetails
 */
class CreateUpdateDetails$Type extends MessageType<CreateUpdateDetails> {
    constructor() {
        super("com.vector.CreateUpdateDetails", [
            { no: 1, name: "transfer_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "balance", kind: "message", T: () => Balance },
            { no: 3, name: "transfer_definition", kind: "message", T: () => Address },
            { no: 4, name: "transfer_timeout", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "transfer_initial_state", kind: "message", T: () => TransferState },
            { no: 6, name: "transfer_encodings", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "merkle_proof_data", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "merkle_root", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "meta", kind: "message", T: () => Any }
        ]);
    }
}
export const CreateUpdateDetails = new CreateUpdateDetails$Type();
/**
 * Type for protobuf message com.vector.ResolveUpdateDetails
 */
class ResolveUpdateDetails$Type extends MessageType<ResolveUpdateDetails> {
    constructor() {
        super("com.vector.ResolveUpdateDetails", [
            { no: 1, name: "transfer_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "transfer_definition", kind: "message", T: () => Address },
            { no: 3, name: "transfer_resolver", kind: "message", T: () => TransferResolver },
            { no: 4, name: "merkle_root", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "meta", kind: "message", T: () => Any }
        ]);
    }
}
export const ResolveUpdateDetails = new ResolveUpdateDetails$Type();
/**
 * Type for protobuf message com.vector.DepositUpdateDetails
 */
class DepositUpdateDetails$Type extends MessageType<DepositUpdateDetails> {
    constructor() {
        super("com.vector.DepositUpdateDetails", [
            { no: 1, name: "total_deposits_alice", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "total_deposits_bob", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "meta", kind: "message", T: () => Any }
        ]);
    }
}
export const DepositUpdateDetails = new DepositUpdateDetails$Type();
/**
 * Type for protobuf message com.vector.SetupUpdateDetails
 */
class SetupUpdateDetails$Type extends MessageType<SetupUpdateDetails> {
    constructor() {
        super("com.vector.SetupUpdateDetails", [
            { no: 1, name: "timeout", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "network_context", kind: "message", T: () => NetworkContext },
            { no: 3, name: "meta", kind: "message", T: () => Any }
        ]);
    }
}
export const SetupUpdateDetails = new SetupUpdateDetails$Type();
/**
 * Type for protobuf message com.vector.ChannelUpdateDetailsMap
 */
class ChannelUpdateDetailsMap$Type extends MessageType<ChannelUpdateDetailsMap> {
    constructor() {
        super("com.vector.ChannelUpdateDetailsMap", [
            { no: 1, name: "create_update_details", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => CreateUpdateDetails } },
            { no: 2, name: "deposit_update_details", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => ResolveUpdateDetails } },
            { no: 3, name: "resolve_update_details", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => ResolveUpdateDetails } },
            { no: 4, name: "setup_update_details", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => SetupUpdateDetails } }
        ]);
    }
}
export const ChannelUpdateDetailsMap = new ChannelUpdateDetailsMap$Type();
/**
 * Type for protobuf message com.vector.ChannelUpdate
 */
class ChannelUpdate$Type extends MessageType<ChannelUpdate> {
    constructor() {
        super("com.vector.ChannelUpdate", [
            { no: 1, name: "channel_address", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "from_identifier", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "to_identifier", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "nonce", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "balance", kind: "message", T: () => Balance },
            { no: 7, name: "asset_id", kind: "message", T: () => Address },
            { no: 8, name: "details", kind: "message", T: () => ChannelUpdateDetailsMap },
            { no: 9, name: "aliceSignature", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "bob_signature", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
}
export const ChannelUpdate = new ChannelUpdate$Type();
/**
 * Type for protobuf message com.vector.FullChannelState
 */
class FullChannelState$Type extends MessageType<FullChannelState> {
    constructor() {
        super("com.vector.FullChannelState", [
            { no: 1, name: "core_channel_state", kind: "message", T: () => CoreChannelState },
            { no: 2, name: "alice_identifier", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "bob_identifier", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "latest_update", kind: "message", T: () => ChannelUpdate },
            { no: 5, name: "network_context", kind: "message", T: () => NetworkContext },
            { no: 6, name: "in_dispute", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
}
export const FullChannelState = new FullChannelState$Type();
/**
 * Type for protobuf message com.vector.FullChannelStateOrUndefined
 */
class FullChannelStateOrUndefined$Type extends MessageType<FullChannelStateOrUndefined> {
    constructor() {
        super("com.vector.FullChannelStateOrUndefined", [
            { no: 1, name: "full_channel", kind: "message", oneof: "fullChannelState", T: () => FullChannelState },
            { no: 2, name: "undefined", kind: "message", oneof: "fullChannelState", T: () => Any }
        ]);
    }
}
export const FullChannelStateOrUndefined = new FullChannelStateOrUndefined$Type();
/**
 * Type for protobuf message com.vector.FullChannelStates
 */
class FullChannelStates$Type extends MessageType<FullChannelStates> {
    constructor() {
        super("com.vector.FullChannelStates", [
            { no: 1, name: "full_channel_state", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => FullChannelState }
        ]);
    }
}
export const FullChannelStates = new FullChannelStates$Type();
/**
 * Type for protobuf message com.vector.TxHash
 */
class TxHash$Type extends MessageType<TxHash> {
    constructor() {
        super("com.vector.TxHash", [
            { no: 1, name: "txHash", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
}
export const TxHash = new TxHash$Type();
/**
 * Type for protobuf message com.vector.Pong
 */
class Pong$Type extends MessageType<Pong> {
    constructor() {
        super("com.vector.Pong", [
            { no: 1, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
}
export const Pong = new Pong$Type();
/**
 * Type for protobuf message com.vector.Empty
 */
class Empty$Type extends MessageType<Empty> {
    constructor() {
        super("com.vector.Empty", []);
    }
}
export const Empty = new Empty$Type();
/**
 * Type for protobuf message com.vector.Configs
 */
class Configs$Type extends MessageType<Configs> {
    constructor() {
        super("com.vector.Configs", [
            { no: 1, name: "config", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Config }
        ]);
    }
}
export const Configs = new Configs$Type();
/**
 * Type for protobuf message com.vector.Config
 */
class Config$Type extends MessageType<Config> {
    constructor() {
        super("com.vector.Config", [
            { no: 1, name: "index", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "public_identifier", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "signer_address", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
}
export const Config = new Config$Type();
/**
 * Type for protobuf message com.vector.Status
 */
class Status$Type extends MessageType<Status> {
    constructor() {
        super("com.vector.Status", [
            { no: 1, name: "bool_stat", kind: "scalar", oneof: "providerSyncing", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "obj", kind: "message", oneof: "providerSyncing", T: () => Status_Obj },
            { no: 3, name: "my_stat", kind: "scalar", oneof: "providerSyncing", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "undefined_stat", kind: "message", oneof: "providerSyncing", T: () => Any },
            { no: 5, name: "public_identifier", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "signer_address", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "version", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
}
export const Status = new Status$Type();
/**
 * Type for protobuf message com.vector.Status.Obj
 */
class Status_Obj$Type extends MessageType<Status_Obj> {
    constructor() {
        super("com.vector.Status.Obj", [
            { no: 1, name: "starting_block", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "current_block", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "highest_block", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
}
export const Status_Obj = new Status_Obj$Type();
/**
 * Type for protobuf message com.vector.DefundNonces
 */
class DefundNonces$Type extends MessageType<DefundNonces> {
    constructor() {
        super("com.vector.DefundNonces", [
            { no: 1, name: "nonce", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
}
export const DefundNonces = new DefundNonces$Type();
/**
 * Type for protobuf message com.vector.Deposits
 */
class Deposits$Type extends MessageType<Deposits> {
    constructor() {
        super("com.vector.Deposits", [
            { no: 1, name: "deposit", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
}
export const Deposits = new Deposits$Type();
/**
 * Type for protobuf message com.vector.ChannelStateRequest
 */
class ChannelStateRequest$Type extends MessageType<ChannelStateRequest> {
    constructor() {
        super("com.vector.ChannelStateRequest", [
            { no: 1, name: "channel_address", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "alice", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "bob", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "asset_id", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Address },
            { no: 5, name: "balances", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Balance },
            { no: 6, name: "processed_deposits_a", kind: "message", T: () => Deposits },
            { no: 7, name: "processed_deposits_b", kind: "message", T: () => Deposits },
            { no: 8, name: "defund_nonces", kind: "message", T: () => DefundNonces },
            { no: 9, name: "timeout", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "nonce", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 11, name: "merkle_root", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 12, name: "alice_identifier", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 13, name: "bo_identifier", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 14, name: "latest_update", kind: "message", T: () => ChannelUpdate }
        ]);
    }
}
export const ChannelStateRequest = new ChannelStateRequest$Type();
/**
 * Type for protobuf message com.vector.CoreTransferState
 */
class CoreTransferState$Type extends MessageType<CoreTransferState> {
    constructor() {
        super("com.vector.CoreTransferState", [
            { no: 1, name: "channel_address", kind: "message", T: () => Address },
            { no: 2, name: "transfer_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "transfer_definition", kind: "message", T: () => Address },
            { no: 4, name: "initiator", kind: "message", T: () => Address },
            { no: 5, name: "responder", kind: "message", T: () => Address },
            { no: 6, name: "asset_id", kind: "message", T: () => Address },
            { no: 7, name: "balance", kind: "message", T: () => Balance },
            { no: 8, name: "transfer_timeout", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "initial_state_hash", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
}
export const CoreTransferState = new CoreTransferState$Type();
/**
 * Type for protobuf message com.vector.FullTransferState
 */
class FullTransferState$Type extends MessageType<FullTransferState> {
    constructor() {
        super("com.vector.FullTransferState", [
            { no: 1, name: "core_transfer_state", kind: "message", T: () => CoreTransferState },
            { no: 2, name: "number", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "transfer_encodings", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "transfer_state", kind: "message", T: () => Any },
            { no: 5, name: "transfer_resolver", kind: "message", T: () => Any },
            { no: 6, name: "meta", kind: "message", T: () => Any },
            { no: 7, name: "in_dispute", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 8, name: "channel_nonce", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 9, name: "initiator_identifier", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "responder_identifier", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
}
export const FullTransferState = new FullTransferState$Type();
/**
 * Type for protobuf message com.vector.FullTransferStates
 */
class FullTransferStates$Type extends MessageType<FullTransferStates> {
    constructor() {
        super("com.vector.FullTransferStates", [
            { no: 1, name: "full_transfer_state", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => FullTransferState }
        ]);
    }
}
export const FullTransferStates = new FullTransferStates$Type();
/**
 * Type for protobuf message com.vector.FullTransferStateOrUndefined
 */
class FullTransferStateOrUndefined$Type extends MessageType<FullTransferStateOrUndefined> {
    constructor() {
        super("com.vector.FullTransferStateOrUndefined", [
            { no: 1, name: "full_transfer", kind: "message", oneof: "fullChannel", T: () => FullTransferState },
            { no: 2, name: "undefined", kind: "message", oneof: "fullChannel", T: () => Any }
        ]);
    }
}
export const FullTransferStateOrUndefined = new FullTransferStateOrUndefined$Type();
/**
 * Type for protobuf message com.vector.RegisteredTransfer
 */
class RegisteredTransfer$Type extends MessageType<RegisteredTransfer> {
    constructor() {
        super("com.vector.RegisteredTransfer", [
            { no: 1, name: "state_encoding", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "resolver_encoding", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "definition", kind: "message", T: () => Address },
            { no: 4, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "encoded_cancel", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
}
export const RegisteredTransfer = new RegisteredTransfer$Type();
/**
 * Type for protobuf message com.vector.RegisteredTransfers
 */
class RegisteredTransfers$Type extends MessageType<RegisteredTransfers> {
    constructor() {
        super("com.vector.RegisteredTransfers", [
            { no: 1, name: "registered_transfer", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => RegisteredTransfer }
        ]);
    }
}
export const RegisteredTransfers = new RegisteredTransfers$Type();
/**
 * Type for protobuf message com.vector.Body
 */
class Body$Type extends MessageType<Body> {
    constructor() {
        super("com.vector.Body", [
            { no: 1, name: "method", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "params", kind: "message", T: () => Any }
        ]);
    }
}
export const Body = new Body$Type();
/**
 * Type for protobuf message com.vector.EthProviderRequest
 */
class EthProviderRequest$Type extends MessageType<EthProviderRequest> {
    constructor() {
        super("com.vector.EthProviderRequest", [
            { no: 1, name: "chain_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "body", kind: "message", T: () => Body }
        ]);
    }
}
export const EthProviderRequest = new EthProviderRequest$Type();
/**
 * Type for protobuf message com.vector.CreateNodeRequest
 */
class CreateNodeRequest$Type extends MessageType<CreateNodeRequest> {
    constructor() {
        super("com.vector.CreateNodeRequest", [
            { no: 1, name: "index", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "mnemonic", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
}
export const CreateNodeRequest = new CreateNodeRequest$Type();
/**
 * Type for protobuf message com.vector.CreateNodeReply
 */
class CreateNodeReply$Type extends MessageType<CreateNodeReply> {
    constructor() {
        super("com.vector.CreateNodeReply", [
            { no: 1, name: "public_identifier", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "signer_address", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "index", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
}
export const CreateNodeReply = new CreateNodeReply$Type();
/**
 * Type for protobuf message com.vector.ClearStoreRequest
 */
class ClearStoreRequest$Type extends MessageType<ClearStoreRequest> {
    constructor() {
        super("com.vector.ClearStoreRequest", [
            { no: 1, name: "admin_token", kind: "message", T: () => ClearStoreRequest_AdminToken }
        ]);
    }
}
export const ClearStoreRequest = new ClearStoreRequest$Type();
/**
 * Type for protobuf message com.vector.ClearStoreRequest.AdminToken
 */
class ClearStoreRequest_AdminToken$Type extends MessageType<ClearStoreRequest_AdminToken> {
    constructor() {
        super("com.vector.ClearStoreRequest.AdminToken", [
            { no: 1, name: "example", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
}
export const ClearStoreRequest_AdminToken = new ClearStoreRequest_AdminToken$Type();
/**
 * Type for protobuf message com.vector.TPublicIdentifier
 */
class TPublicIdentifier$Type extends MessageType<TPublicIdentifier> {
    constructor() {
        super("com.vector.TPublicIdentifier", [
            { no: 1, name: "public_identifier", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
}
export const TPublicIdentifier = new TPublicIdentifier$Type();
/**
 * Type for protobuf message com.vector.SubscriptionWithPublicIdentifierRequest
 */
class SubscriptionWithPublicIdentifierRequest$Type extends MessageType<SubscriptionWithPublicIdentifierRequest> {
    constructor() {
        super("com.vector.SubscriptionWithPublicIdentifierRequest", [
            { no: 1, name: "public_identifier", kind: "message", T: () => TPublicIdentifier }
        ]);
    }
}
export const SubscriptionWithPublicIdentifierRequest = new SubscriptionWithPublicIdentifierRequest$Type();
/**
 * Type for protobuf message com.vector.SubscriptionWithPublicIdentifierReply
 */
class SubscriptionWithPublicIdentifierReply$Type extends MessageType<SubscriptionWithPublicIdentifierReply> {
    constructor() {
        super("com.vector.SubscriptionWithPublicIdentifierReply", [
            { no: 1, name: "url", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 9 /*ScalarType.STRING*/ } }
        ]);
    }
}
export const SubscriptionWithPublicIdentifierReply = new SubscriptionWithPublicIdentifierReply$Type();
/**
 * Type for protobuf message com.vector.SubscribeRequest
 */
class SubscribeRequest$Type extends MessageType<SubscribeRequest> {
    constructor() {
        super("com.vector.SubscribeRequest", [
            { no: 1, name: "body", kind: "message", T: () => SubscribeRequest_RegisterListenerBodySchema }
        ]);
    }
}
export const SubscribeRequest = new SubscribeRequest$Type();
/**
 * Type for protobuf message com.vector.SubscribeRequest.RegisterListenerBodySchema
 */
class SubscribeRequest_RegisterListenerBodySchema$Type extends MessageType<SubscribeRequest_RegisterListenerBodySchema> {
    constructor() {
        super("com.vector.SubscribeRequest.RegisterListenerBodySchema", [
            { no: 1, name: "public_identifier", kind: "message", T: () => TPublicIdentifier },
            { no: 2, name: "events", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 9 /*ScalarType.STRING*/ } }
        ]);
    }
}
export const SubscribeRequest_RegisterListenerBodySchema = new SubscribeRequest_RegisterListenerBodySchema$Type();
/**
 * Type for protobuf message com.vector.SubscribeReply
 */
class SubscribeReply$Type extends MessageType<SubscribeReply> {
    constructor() {
        super("com.vector.SubscribeReply", [
            { no: 1, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
}
export const SubscribeReply = new SubscribeReply$Type();
/**
 * Type for protobuf message com.vector.RestoreStateRequest
 */
class RestoreStateRequest$Type extends MessageType<RestoreStateRequest> {
    constructor() {
        super("com.vector.RestoreStateRequest", [
            { no: 1, name: "counterparty_identifier", kind: "message", T: () => TPublicIdentifier },
            { no: 2, name: "chain_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "public_identifier", kind: "message", T: () => TPublicIdentifier }
        ]);
    }
}
export const RestoreStateRequest = new RestoreStateRequest$Type();
/**
 * Type for protobuf message com.vector.TAddress
 */
class TAddress$Type extends MessageType<TAddress> {
    constructor() {
        super("com.vector.TAddress", [
            { no: 1, name: "channel_address", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
}
export const TAddress = new TAddress$Type();
/**
 * Type for protobuf message com.vector.RestoreStateReply
 */
class RestoreStateReply$Type extends MessageType<RestoreStateReply> {
    constructor() {
        super("com.vector.RestoreStateReply", [
            { no: 1, name: "channel_address", kind: "message", T: () => TAddress }
        ]);
    }
}
export const RestoreStateReply = new RestoreStateReply$Type();
/**
 * Type for protobuf message com.vector.WithdrawReply
 */
class WithdrawReply$Type extends MessageType<WithdrawReply> {
    constructor() {
        super("com.vector.WithdrawReply", [
            { no: 1, name: "channel_address", kind: "message", T: () => TAddress },
            { no: 2, name: "transfer_id", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 3, name: "transaction_hash", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
}
export const WithdrawReply = new WithdrawReply$Type();
/**
 * Type for protobuf message com.vector.TBasicMeta
 */
class TBasicMeta$Type extends MessageType<TBasicMeta> {
    constructor() {
        super("com.vector.TBasicMeta", [
            { no: 1, name: "basic_meta", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => Any } }
        ]);
    }
}
export const TBasicMeta = new TBasicMeta$Type();
/**
 * Type for protobuf message com.vector.WithdrawRequestSchema
 */
class WithdrawRequestSchema$Type extends MessageType<WithdrawRequestSchema> {
    constructor() {
        super("com.vector.WithdrawRequestSchema", [
            { no: 1, name: "channel_address", kind: "message", T: () => TAddress },
            { no: 2, name: "amount", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "asset_id", kind: "message", T: () => TAddress },
            { no: 4, name: "recipient", kind: "message", T: () => TAddress },
            { no: 5, name: "fee", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "call_to", kind: "message", T: () => TAddress },
            { no: 7, name: "call_data", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "meta", kind: "message", T: () => TBasicMeta }
        ]);
    }
}
export const WithdrawRequestSchema = new WithdrawRequestSchema$Type();
/**
 * Type for protobuf message com.vector.WithdrawRequest
 */
class WithdrawRequest$Type extends MessageType<WithdrawRequest> {
    constructor() {
        super("com.vector.WithdrawRequest", [
            { no: 1, name: "withdraw_schema", kind: "message", T: () => WithdrawRequestSchema },
            { no: 2, name: "public_identifier", kind: "message", T: () => TPublicIdentifier }
        ]);
    }
}
export const WithdrawRequest = new WithdrawRequest$Type();
/**
 * Type for protobuf message com.vector.ResolveTransferSchema
 */
class ResolveTransferSchema$Type extends MessageType<ResolveTransferSchema> {
    constructor() {
        super("com.vector.ResolveTransferSchema", [
            { no: 1, name: "channel_address", kind: "message", T: () => TAddress },
            { no: 2, name: "transfer_id", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 3, name: "meta", kind: "message", T: () => TBasicMeta },
            { no: 4, name: "transfer_resolver", kind: "message", T: () => TransferResolverSchema }
        ]);
    }
}
export const ResolveTransferSchema = new ResolveTransferSchema$Type();
/**
 * Type for protobuf message com.vector.TransferResolverSchema
 */
class TransferResolverSchema$Type extends MessageType<TransferResolverSchema> {
    constructor() {
        super("com.vector.TransferResolverSchema", [
            { no: 1, name: "resolver", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => Any } }
        ]);
    }
}
export const TransferResolverSchema = new TransferResolverSchema$Type();
/**
 * Type for protobuf message com.vector.ResolveTransferRequest
 */
class ResolveTransferRequest$Type extends MessageType<ResolveTransferRequest> {
    constructor() {
        super("com.vector.ResolveTransferRequest", [
            { no: 1, name: "resolver_transfer_schema", kind: "message", T: () => ResolveTransferSchema },
            { no: 2, name: "public_identifier", kind: "message", T: () => TPublicIdentifier }
        ]);
    }
}
export const ResolveTransferRequest = new ResolveTransferRequest$Type();
/**
 * Type for protobuf message com.vector.ResolveTransferReply
 */
class ResolveTransferReply$Type extends MessageType<ResolveTransferReply> {
    constructor() {
        super("com.vector.ResolveTransferReply", [
            { no: 1, name: "channel_address", kind: "message", T: () => TAddress },
            { no: 2, name: "transfer_id", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 3, name: "routing_id", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
}
export const ResolveTransferReply = new ResolveTransferReply$Type();
/**
 * Type for protobuf message com.vector.CreateConditionalTransferParamsSchema
 */
class CreateConditionalTransferParamsSchema$Type extends MessageType<CreateConditionalTransferParamsSchema> {
    constructor() {
        super("com.vector.CreateConditionalTransferParamsSchema", [
            { no: 1, name: "channel_address", kind: "message", T: () => TAddress },
            { no: 2, name: "amount", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "asset_id", kind: "message", T: () => TAddress },
            { no: 4, name: "recipient", kind: "message", T: () => TPublicIdentifier },
            { no: 5, name: "recipient_chainId", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "recipient_assetId", kind: "message", T: () => TAddress },
            { no: 7, name: "timeout", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "meta", kind: "message", T: () => TBasicMeta },
            { no: 9, name: "type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "details", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => Any } }
        ]);
    }
}
export const CreateConditionalTransferParamsSchema = new CreateConditionalTransferParamsSchema$Type();
/**
 * Type for protobuf message com.vector.ConditionalTransferRequest
 */
class ConditionalTransferRequest$Type extends MessageType<ConditionalTransferRequest> {
    constructor() {
        super("com.vector.ConditionalTransferRequest", [
            { no: 1, name: "create_conditional_transfer_params_schema", kind: "message", T: () => CreateConditionalTransferParamsSchema },
            { no: 2, name: "public_identifier", kind: "message", T: () => TPublicIdentifier }
        ]);
    }
}
export const ConditionalTransferRequest = new ConditionalTransferRequest$Type();
/**
 * Type for protobuf message com.vector.CollateralReply
 */
class CollateralReply$Type extends MessageType<CollateralReply> {
    constructor() {
        super("com.vector.CollateralReply", [
            { no: 1, name: "full_channel_state", kind: "message", T: () => FullChannelState },
            { no: 2, name: "channel_address", kind: "message", T: () => TAddress }
        ]);
    }
}
export const CollateralReply = new CollateralReply$Type();
/**
 * Type for protobuf message com.vector.RequestCollateralSchema
 */
class RequestCollateralSchema$Type extends MessageType<RequestCollateralSchema> {
    constructor() {
        super("com.vector.RequestCollateralSchema", [
            { no: 1, name: "channel_address", kind: "message", T: () => TAddress },
            { no: 2, name: "asset_id", kind: "message", T: () => TAddress },
            { no: 3, name: "amount", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
}
export const RequestCollateralSchema = new RequestCollateralSchema$Type();
/**
 * Type for protobuf message com.vector.CollateralRequest
 */
class CollateralRequest$Type extends MessageType<CollateralRequest> {
    constructor() {
        super("com.vector.CollateralRequest", [
            { no: 1, name: "collateral_request", kind: "message", T: () => RequestCollateralSchema },
            { no: 2, name: "public_identifier", kind: "message", T: () => TPublicIdentifier }
        ]);
    }
}
export const CollateralRequest = new CollateralRequest$Type();
/**
 * Type for protobuf message com.vector.DepositEngineParamsSchema
 */
class DepositEngineParamsSchema$Type extends MessageType<DepositEngineParamsSchema> {
    constructor() {
        super("com.vector.DepositEngineParamsSchema", [
            { no: 1, name: "channel_address", kind: "message", T: () => TAddress },
            { no: 2, name: "asset_id", kind: "message", T: () => TAddress },
            { no: 3, name: "meta", kind: "message", T: () => TBasicMeta }
        ]);
    }
}
export const DepositEngineParamsSchema = new DepositEngineParamsSchema$Type();
/**
 * Type for protobuf message com.vector.DepositRequest
 */
class DepositRequest$Type extends MessageType<DepositRequest> {
    constructor() {
        super("com.vector.DepositRequest", [
            { no: 1, name: "deposit_engine_params_schema", kind: "message", T: () => DepositEngineParamsSchema },
            { no: 2, name: "public_identifier", kind: "message", T: () => TPublicIdentifier }
        ]);
    }
}
export const DepositRequest = new DepositRequest$Type();
/**
 * Type for protobuf message com.vector.DefundTransferParamsSchema
 */
class DefundTransferParamsSchema$Type extends MessageType<DefundTransferParamsSchema> {
    constructor() {
        super("com.vector.DefundTransferParamsSchema", [
            { no: 1, name: "transfer_id", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
}
export const DefundTransferParamsSchema = new DefundTransferParamsSchema$Type();
/**
 * Type for protobuf message com.vector.TransferResquest
 */
class TransferResquest$Type extends MessageType<TransferResquest> {
    constructor() {
        super("com.vector.TransferResquest", [
            { no: 1, name: "defund_transfer_params_schema", kind: "message", T: () => DefundTransferParamsSchema },
            { no: 2, name: "public_identifier", kind: "message", T: () => TPublicIdentifier }
        ]);
    }
}
export const TransferResquest = new TransferResquest$Type();
/**
 * Type for protobuf message com.vector.DefundChannelParamsSchema
 */
class DefundChannelParamsSchema$Type extends MessageType<DefundChannelParamsSchema> {
    constructor() {
        super("com.vector.DefundChannelParamsSchema", [
            { no: 1, name: "channel_address", kind: "message", T: () => TAddress }
        ]);
    }
}
export const DefundChannelParamsSchema = new DefundChannelParamsSchema$Type();
/**
 * Type for protobuf message com.vector.ChannelResquest
 */
class ChannelResquest$Type extends MessageType<ChannelResquest> {
    constructor() {
        super("com.vector.ChannelResquest", [
            { no: 1, name: "defund_channel_params_schema", kind: "message", T: () => DefundChannelParamsSchema },
            { no: 2, name: "public_identifier", kind: "message", T: () => TPublicIdentifier }
        ]);
    }
}
export const ChannelResquest = new ChannelResquest$Type();
/**
 * Type for protobuf message com.vector.DepositTxRequest
 */
class DepositTxRequest$Type extends MessageType<DepositTxRequest> {
    constructor() {
        super("com.vector.DepositTxRequest", [
            { no: 1, name: "channel_address", kind: "message", T: () => TAddress },
            { no: 2, name: "amount", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "asset_id", kind: "message", T: () => TAddress },
            { no: 4, name: "chain_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "public_identifier", kind: "message", T: () => TPublicIdentifier }
        ]);
    }
}
export const DepositTxRequest = new DepositTxRequest$Type();
/**
 * Type for protobuf message com.vector.SetupRequest
 */
class SetupRequest$Type extends MessageType<SetupRequest> {
    constructor() {
        super("com.vector.SetupRequest", [
            { no: 1, name: "counterparty_identifier", kind: "message", T: () => TPublicIdentifier },
            { no: 2, name: "chain_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "timeout", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "meta", kind: "message", T: () => TBasicMeta },
            { no: 5, name: "public_identifier", kind: "message", T: () => TPublicIdentifier }
        ]);
    }
}
export const SetupRequest = new SetupRequest$Type();
/**
 * Type for protobuf message com.vector.SetupReply
 */
class SetupReply$Type extends MessageType<SetupReply> {
    constructor() {
        super("com.vector.SetupReply", [
            { no: 1, name: "full_channel_state", kind: "message", T: () => FullChannelState },
            { no: 2, name: "channel_address", kind: "message", T: () => TAddress }
        ]);
    }
}
export const SetupReply = new SetupReply$Type();
/**
 * Type for protobuf message com.vector.RegisteredTransfersRequest
 */
class RegisteredTransfersRequest$Type extends MessageType<RegisteredTransfersRequest> {
    constructor() {
        super("com.vector.RegisteredTransfersRequest", [
            { no: 1, name: "chain_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "public_identifier", kind: "message", T: () => TPublicIdentifier }
        ]);
    }
}
export const RegisteredTransfersRequest = new RegisteredTransfersRequest$Type();
/**
 * Type for protobuf message com.vector.ChannelStatesRequest
 */
class ChannelStatesRequest$Type extends MessageType<ChannelStatesRequest> {
    constructor() {
        super("com.vector.ChannelStatesRequest", [
            { no: 1, name: "public_identifier", kind: "message", T: () => TPublicIdentifier }
        ]);
    }
}
export const ChannelStatesRequest = new ChannelStatesRequest$Type();
/**
 * Type for protobuf message com.vector.ActiveTransfersRequest
 */
class ActiveTransfersRequest$Type extends MessageType<ActiveTransfersRequest> {
    constructor() {
        super("com.vector.ActiveTransfersRequest", [
            { no: 1, name: "channel_address", kind: "message", T: () => TAddress },
            { no: 2, name: "public_identifier", kind: "message", T: () => TPublicIdentifier }
        ]);
    }
}
export const ActiveTransfersRequest = new ActiveTransfersRequest$Type();
/**
 * Type for protobuf message com.vector.TransferStatesByRoutingIdRequest
 */
class TransferStatesByRoutingIdRequest$Type extends MessageType<TransferStatesByRoutingIdRequest> {
    constructor() {
        super("com.vector.TransferStatesByRoutingIdRequest", [
            { no: 1, name: "channel_address", kind: "message", T: () => TAddress },
            { no: 2, name: "routing_id", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 3, name: "public_identifier", kind: "message", T: () => TPublicIdentifier }
        ]);
    }
}
export const TransferStatesByRoutingIdRequest = new TransferStatesByRoutingIdRequest$Type();
/**
 * Type for protobuf message com.vector.TransferStateByRoutingIdRequest
 */
class TransferStateByRoutingIdRequest$Type extends MessageType<TransferStateByRoutingIdRequest> {
    constructor() {
        super("com.vector.TransferStateByRoutingIdRequest", [
            { no: 1, name: "routing_id", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "public_identifier", kind: "message", T: () => TPublicIdentifier }
        ]);
    }
}
export const TransferStateByRoutingIdRequest = new TransferStateByRoutingIdRequest$Type();
/**
 * Type for protobuf message com.vector.TransfersRequest
 */
class TransfersRequest$Type extends MessageType<TransfersRequest> {
    constructor() {
        super("com.vector.TransfersRequest", [
            { no: 1, name: "transfer_id", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "public_identifier", kind: "message", T: () => TPublicIdentifier }
        ]);
    }
}
export const TransfersRequest = new TransfersRequest$Type();
/**
 * Type for protobuf message com.vector.TransferEncodingSchema
 */
class TransferEncodingSchema$Type extends MessageType<TransferEncodingSchema> {
    constructor() {
        super("com.vector.TransferEncodingSchema", [
            { no: 1, name: "encoding", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
}
export const TransferEncodingSchema = new TransferEncodingSchema$Type();
/**
 * Type for protobuf message com.vector.TransferStateSchema
 */
class TransferStateSchema$Type extends MessageType<TransferStateSchema> {
    constructor() {
        super("com.vector.TransferStateSchema", [
            { no: 1, name: "state", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => Any } }
        ]);
    }
}
export const TransferStateSchema = new TransferStateSchema$Type();
/**
 * Type for protobuf message com.vector.TFullTransferState
 */
class TFullTransferState$Type extends MessageType<TFullTransferState> {
    constructor() {
        super("com.vector.TFullTransferState", [
            { no: 1, name: "balance", kind: "message", T: () => TBalance },
            { no: 2, name: "asset_id", kind: "message", T: () => TAddress },
            { no: 3, name: "channel_address", kind: "message", T: () => TAddress },
            { no: 4, name: "in_dispute", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "transfer_id", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 6, name: "transfer_definition", kind: "message", T: () => TAddress },
            { no: 7, name: "transfer_timeout", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "initial_statehash", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 9, name: "initiator", kind: "message", T: () => TAddress },
            { no: 10, name: "responder", kind: "message", T: () => TAddress },
            { no: 11, name: "channel_factory_address", kind: "message", T: () => TAddress },
            { no: 12, name: "chain_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 13, name: "transfer_encodings", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => TransferEncodingSchema },
            { no: 14, name: "transfer_state", kind: "message", T: () => TransferStateSchema },
            { no: 15, name: "transferResolver", kind: "message", T: () => TransferResolverSchema },
            { no: 16, name: "meta", kind: "message", T: () => TBasicMeta },
            { no: 17, name: "channel_nonce", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 18, name: "initiator_identifier", kind: "message", T: () => TPublicIdentifier },
            { no: 19, name: "responder_identifier", kind: "message", T: () => TPublicIdentifier }
        ]);
    }
}
export const TFullTransferState = new TFullTransferState$Type();
/**
 * Type for protobuf message com.vector.TransferStateReply
 */
class TransferStateReply$Type extends MessageType<TransferStateReply> {
    constructor() {
        super("com.vector.TransferStateReply", [
            { no: 1, name: "defined", kind: "scalar", oneof: "response", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "tfull_transfer_state", kind: "message", oneof: "response", T: () => TFullTransferState }
        ]);
    }
}
export const TransferStateReply = new TransferStateReply$Type();
/**
 * Type for protobuf message com.vector.ChannelStateByParticipantsRequest
 */
class ChannelStateByParticipantsRequest$Type extends MessageType<ChannelStateByParticipantsRequest> {
    constructor() {
        super("com.vector.ChannelStateByParticipantsRequest", [
            { no: 1, name: "public_identifier", kind: "message", T: () => TPublicIdentifier },
            { no: 2, name: "counterparty", kind: "message", T: () => TPublicIdentifier },
            { no: 3, name: "chain_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
}
export const ChannelStateByParticipantsRequest = new ChannelStateByParticipantsRequest$Type();
/**
 * Type for protobuf message com.vector.AssetIds
 */
class AssetIds$Type extends MessageType<AssetIds> {
    constructor() {
        super("com.vector.AssetIds", [
            { no: 1, name: "asset_id", kind: "message", T: () => TAddress }
        ]);
    }
}
export const AssetIds = new AssetIds$Type();
/**
 * Type for protobuf message com.vector.TBalance
 */
class TBalance$Type extends MessageType<TBalance> {
    constructor() {
        super("com.vector.TBalance", [
            { no: 1, name: "to", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => TAddress },
            { no: 2, name: "amount", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
}
export const TBalance = new TBalance$Type();
/**
 * Type for protobuf message com.vector.EthProviderReply
 */
class EthProviderReply$Type extends MessageType<EthProviderReply> {
    constructor() {
        super("com.vector.EthProviderReply", [
            { no: 1, name: "response", kind: "message", T: () => Any }
        ]);
    }
}
export const EthProviderReply = new EthProviderReply$Type();
/**
 * @generated from protobuf service com.vector.VectorService
 */
export class VectorServiceClient implements IVectorServiceClient {
    readonly typeName = "com.vector.VectorService";
    readonly methods: MethodInfo[] = [
        { service: this, name: "GetPing", localName: "getPing", I: Empty, O: Pong },
        { service: this, name: "GetConfig", localName: "getConfig", I: Empty, O: Configs },
        { service: this, name: "GetStatus", localName: "getStatus", I: TPublicIdentifier, O: Status },
        { service: this, name: "GetChannelState", localName: "getChannelState", I: ChannelStateRequest, O: FullChannelStateOrUndefined },
        { service: this, name: "GetChannelStates", localName: "getChannelStates", I: Empty, O: FullChannelStates },
        { service: this, name: "GetChannelStateByParticipants", localName: "getChannelStateByParticipants", I: ChannelStateByParticipantsRequest, O: FullChannelStateOrUndefined },
        { service: this, name: "TransferState", localName: "transferState", I: TransfersRequest, O: TransferStateReply },
        { service: this, name: "GetTransferStateByRoutingId", localName: "getTransferStateByRoutingId", I: TransferStateByRoutingIdRequest, O: FullTransferStateOrUndefined },
        { service: this, name: "GetTransferStatesByRoutingId", localName: "getTransferStatesByRoutingId", I: TransferStatesByRoutingIdRequest, O: FullTransferStates },
        { service: this, name: "GetActiveTransfers", localName: "getActiveTransfers", I: ActiveTransfersRequest, O: FullTransferStates },
        { service: this, name: "GetRegisteredTransfers", localName: "getRegisteredTransfers", I: RegisteredTransfersRequest, O: RegisteredTransfers },
        { service: this, name: "Setup", localName: "setup", I: SetupRequest, O: SetupReply },
        { service: this, name: "InternalSetup", localName: "internalSetup", I: SetupRequest, O: FullChannelState },
        { service: this, name: "Deposit", localName: "deposit", I: DepositRequest, O: FullChannelState },
        { service: this, name: "SendDepositTx", localName: "sendDepositTx", I: DepositTxRequest, O: TxHash },
        { service: this, name: "SendDisputeChannelTx", localName: "sendDisputeChannelTx", I: ChannelResquest, O: TxHash },
        { service: this, name: "SendDefundChannelTx", localName: "sendDefundChannelTx", I: ChannelResquest, O: TxHash },
        { service: this, name: "SendDisputeTransfer", localName: "sendDisputeTransfer", I: TransferResquest, O: TxHash },
        { service: this, name: "SendDefundTransfer", localName: "sendDefundTransfer", I: TransferResquest, O: TxHash },
        { service: this, name: "SendRequestCollateral", localName: "sendRequestCollateral", I: DepositRequest, O: CollateralReply },
        { service: this, name: "CreateTransfer", localName: "createTransfer", I: ConditionalTransferRequest, O: ResolveTransferReply },
        { service: this, name: "ResolveTransfer", localName: "resolveTransfer", I: ResolveTransferRequest, O: ResolveTransferReply },
        { service: this, name: "Withdraw", localName: "withdraw", I: WithdrawRequest, O: WithdrawReply },
        { service: this, name: "RestoreState", localName: "restoreState", I: RestoreStateRequest, O: RestoreStateReply },
        { service: this, name: "Subscribe", localName: "subscribe", I: SubscribeRequest, O: SubscribeReply },
        { service: this, name: "GetSubscription", localName: "getSubscription", I: SubscriptionRequest, O: Subscription },
        { service: this, name: "GetSubscriptionWithOnlyPublicIdentifier", localName: "getSubscriptionWithOnlyPublicIdentifier", I: SubscriptionWithPublicIdentifierRequest, O: SubscriptionWithPublicIdentifierReply },
        { service: this, name: "ClearStore", localName: "clearStore", I: ClearStoreRequest, O: ClearStoreReply },
        { service: this, name: "CreateNode", localName: "createNode", I: CreateNodeRequest, O: CreateNodeReply },
        { service: this, name: "EthProvider", localName: "ethProvider", I: EthProviderRequest, O: EthProviderReply }
    ];
    constructor(private readonly _transport: RpcTransport) {
    }
    getPing(input: Empty, options?: RpcOptions): UnaryCall<Empty, Pong> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options), i = method.I.create(input);
        return stackIntercept<Empty, Pong>("unary", this._transport, method, opt, i);
    }
    getConfig(input: Empty, options?: RpcOptions): UnaryCall<Empty, Configs> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options), i = method.I.create(input);
        return stackIntercept<Empty, Configs>("unary", this._transport, method, opt, i);
    }
    getStatus(input: TPublicIdentifier, options?: RpcOptions): UnaryCall<TPublicIdentifier, Status> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options), i = method.I.create(input);
        return stackIntercept<TPublicIdentifier, Status>("unary", this._transport, method, opt, i);
    }
    getChannelState(input: ChannelStateRequest, options?: RpcOptions): UnaryCall<ChannelStateRequest, FullChannelStateOrUndefined> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options), i = method.I.create(input);
        return stackIntercept<ChannelStateRequest, FullChannelStateOrUndefined>("unary", this._transport, method, opt, i);
    }
    getChannelStates(input: Empty, options?: RpcOptions): UnaryCall<Empty, FullChannelStates> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options), i = method.I.create(input);
        return stackIntercept<Empty, FullChannelStates>("unary", this._transport, method, opt, i);
    }
    getChannelStateByParticipants(input: ChannelStateByParticipantsRequest, options?: RpcOptions): UnaryCall<ChannelStateByParticipantsRequest, FullChannelStateOrUndefined> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options), i = method.I.create(input);
        return stackIntercept<ChannelStateByParticipantsRequest, FullChannelStateOrUndefined>("unary", this._transport, method, opt, i);
    }
    transferState(input: TransfersRequest, options?: RpcOptions): UnaryCall<TransfersRequest, TransferStateReply> {
        const method = this.methods[6], opt = this._transport.mergeOptions(options), i = method.I.create(input);
        return stackIntercept<TransfersRequest, TransferStateReply>("unary", this._transport, method, opt, i);
    }
    getTransferStateByRoutingId(input: TransferStateByRoutingIdRequest, options?: RpcOptions): UnaryCall<TransferStateByRoutingIdRequest, FullTransferStateOrUndefined> {
        const method = this.methods[7], opt = this._transport.mergeOptions(options), i = method.I.create(input);
        return stackIntercept<TransferStateByRoutingIdRequest, FullTransferStateOrUndefined>("unary", this._transport, method, opt, i);
    }
    getTransferStatesByRoutingId(input: TransferStatesByRoutingIdRequest, options?: RpcOptions): UnaryCall<TransferStatesByRoutingIdRequest, FullTransferStates> {
        const method = this.methods[8], opt = this._transport.mergeOptions(options), i = method.I.create(input);
        return stackIntercept<TransferStatesByRoutingIdRequest, FullTransferStates>("unary", this._transport, method, opt, i);
    }
    getActiveTransfers(input: ActiveTransfersRequest, options?: RpcOptions): UnaryCall<ActiveTransfersRequest, FullTransferStates> {
        const method = this.methods[9], opt = this._transport.mergeOptions(options), i = method.I.create(input);
        return stackIntercept<ActiveTransfersRequest, FullTransferStates>("unary", this._transport, method, opt, i);
    }
    getRegisteredTransfers(input: RegisteredTransfersRequest, options?: RpcOptions): UnaryCall<RegisteredTransfersRequest, RegisteredTransfers> {
        const method = this.methods[10], opt = this._transport.mergeOptions(options), i = method.I.create(input);
        return stackIntercept<RegisteredTransfersRequest, RegisteredTransfers>("unary", this._transport, method, opt, i);
    }
    setup(input: SetupRequest, options?: RpcOptions): UnaryCall<SetupRequest, SetupReply> {
        const method = this.methods[11], opt = this._transport.mergeOptions(options), i = method.I.create(input);
        return stackIntercept<SetupRequest, SetupReply>("unary", this._transport, method, opt, i);
    }
    internalSetup(input: SetupRequest, options?: RpcOptions): UnaryCall<SetupRequest, FullChannelState> {
        const method = this.methods[12], opt = this._transport.mergeOptions(options), i = method.I.create(input);
        return stackIntercept<SetupRequest, FullChannelState>("unary", this._transport, method, opt, i);
    }
    deposit(input: DepositRequest, options?: RpcOptions): UnaryCall<DepositRequest, FullChannelState> {
        const method = this.methods[13], opt = this._transport.mergeOptions(options), i = method.I.create(input);
        return stackIntercept<DepositRequest, FullChannelState>("unary", this._transport, method, opt, i);
    }
    sendDepositTx(input: DepositTxRequest, options?: RpcOptions): UnaryCall<DepositTxRequest, TxHash> {
        const method = this.methods[14], opt = this._transport.mergeOptions(options), i = method.I.create(input);
        return stackIntercept<DepositTxRequest, TxHash>("unary", this._transport, method, opt, i);
    }
    sendDisputeChannelTx(input: ChannelResquest, options?: RpcOptions): UnaryCall<ChannelResquest, TxHash> {
        const method = this.methods[15], opt = this._transport.mergeOptions(options), i = method.I.create(input);
        return stackIntercept<ChannelResquest, TxHash>("unary", this._transport, method, opt, i);
    }
    sendDefundChannelTx(input: ChannelResquest, options?: RpcOptions): UnaryCall<ChannelResquest, TxHash> {
        const method = this.methods[16], opt = this._transport.mergeOptions(options), i = method.I.create(input);
        return stackIntercept<ChannelResquest, TxHash>("unary", this._transport, method, opt, i);
    }
    sendDisputeTransfer(input: TransferResquest, options?: RpcOptions): UnaryCall<TransferResquest, TxHash> {
        const method = this.methods[17], opt = this._transport.mergeOptions(options), i = method.I.create(input);
        return stackIntercept<TransferResquest, TxHash>("unary", this._transport, method, opt, i);
    }
    sendDefundTransfer(input: TransferResquest, options?: RpcOptions): UnaryCall<TransferResquest, TxHash> {
        const method = this.methods[18], opt = this._transport.mergeOptions(options), i = method.I.create(input);
        return stackIntercept<TransferResquest, TxHash>("unary", this._transport, method, opt, i);
    }
    sendRequestCollateral(input: DepositRequest, options?: RpcOptions): UnaryCall<DepositRequest, CollateralReply> {
        const method = this.methods[19], opt = this._transport.mergeOptions(options), i = method.I.create(input);
        return stackIntercept<DepositRequest, CollateralReply>("unary", this._transport, method, opt, i);
    }
    createTransfer(input: ConditionalTransferRequest, options?: RpcOptions): UnaryCall<ConditionalTransferRequest, ResolveTransferReply> {
        const method = this.methods[20], opt = this._transport.mergeOptions(options), i = method.I.create(input);
        return stackIntercept<ConditionalTransferRequest, ResolveTransferReply>("unary", this._transport, method, opt, i);
    }
    resolveTransfer(input: ResolveTransferRequest, options?: RpcOptions): UnaryCall<ResolveTransferRequest, ResolveTransferReply> {
        const method = this.methods[21], opt = this._transport.mergeOptions(options), i = method.I.create(input);
        return stackIntercept<ResolveTransferRequest, ResolveTransferReply>("unary", this._transport, method, opt, i);
    }
    withdraw(input: WithdrawRequest, options?: RpcOptions): UnaryCall<WithdrawRequest, WithdrawReply> {
        const method = this.methods[22], opt = this._transport.mergeOptions(options), i = method.I.create(input);
        return stackIntercept<WithdrawRequest, WithdrawReply>("unary", this._transport, method, opt, i);
    }
    restoreState(input: RestoreStateRequest, options?: RpcOptions): UnaryCall<RestoreStateRequest, RestoreStateReply> {
        const method = this.methods[23], opt = this._transport.mergeOptions(options), i = method.I.create(input);
        return stackIntercept<RestoreStateRequest, RestoreStateReply>("unary", this._transport, method, opt, i);
    }
    subscribe(input: SubscribeRequest, options?: RpcOptions): UnaryCall<SubscribeRequest, SubscribeReply> {
        const method = this.methods[24], opt = this._transport.mergeOptions(options), i = method.I.create(input);
        return stackIntercept<SubscribeRequest, SubscribeReply>("unary", this._transport, method, opt, i);
    }
    getSubscription(input: SubscriptionRequest, options?: RpcOptions): UnaryCall<SubscriptionRequest, Subscription> {
        const method = this.methods[25], opt = this._transport.mergeOptions(options), i = method.I.create(input);
        return stackIntercept<SubscriptionRequest, Subscription>("unary", this._transport, method, opt, i);
    }
    getSubscriptionWithOnlyPublicIdentifier(input: SubscriptionWithPublicIdentifierRequest, options?: RpcOptions): UnaryCall<SubscriptionWithPublicIdentifierRequest, SubscriptionWithPublicIdentifierReply> {
        const method = this.methods[26], opt = this._transport.mergeOptions(options), i = method.I.create(input);
        return stackIntercept<SubscriptionWithPublicIdentifierRequest, SubscriptionWithPublicIdentifierReply>("unary", this._transport, method, opt, i);
    }
    clearStore(input: ClearStoreRequest, options?: RpcOptions): UnaryCall<ClearStoreRequest, ClearStoreReply> {
        const method = this.methods[27], opt = this._transport.mergeOptions(options), i = method.I.create(input);
        return stackIntercept<ClearStoreRequest, ClearStoreReply>("unary", this._transport, method, opt, i);
    }
    createNode(input: CreateNodeRequest, options?: RpcOptions): UnaryCall<CreateNodeRequest, CreateNodeReply> {
        const method = this.methods[28], opt = this._transport.mergeOptions(options), i = method.I.create(input);
        return stackIntercept<CreateNodeRequest, CreateNodeReply>("unary", this._transport, method, opt, i);
    }
    ethProvider(input: EthProviderRequest, options?: RpcOptions): UnaryCall<EthProviderRequest, EthProviderReply> {
        const method = this.methods[29], opt = this._transport.mergeOptions(options), i = method.I.create(input);
        return stackIntercept<EthProviderRequest, EthProviderReply>("unary", this._transport, method, opt, i);
    }
}
