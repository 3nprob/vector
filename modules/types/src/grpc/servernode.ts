// @generated by protobuf-ts 2.0.0-alpha.12 with parameters server_grpc1,client_call,generate_dependencies
// @generated from protobuf file "servernode.proto" (package "com.vector", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { WireType } from "@protobuf-ts/runtime";
import { BinaryWriteOptions } from "@protobuf-ts/runtime";
import { IBinaryWriter } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { BinaryReadOptions } from "@protobuf-ts/runtime";
import { IBinaryReader } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Struct } from "./google/protobuf/struct";
/**
 * generic defs
 *
 * @generated from protobuf message com.vector.Empty
 */
export interface Empty {
}
/**
 * @generated from protobuf message com.vector.GenericPublicIdentifierRequest
 */
export interface GenericPublicIdentifierRequest {
    /**
     * @generated from protobuf field: string public_identifier = 1;
     */
    publicIdentifier: string;
}
/**
 * @generated from protobuf message com.vector.GenericMessageResponse
 */
export interface GenericMessageResponse {
    /**
     * @generated from protobuf field: string message = 1;
     */
    message: string;
}
/**
 * @generated from protobuf message com.vector.TxHash
 */
export interface TxHash {
    /**
     * @generated from protobuf field: string txHash = 1;
     */
    txHash: string;
}
/**
 * channel update related fields
 *
 * @generated from protobuf message com.vector.CreateUpdateDetails
 */
export interface CreateUpdateDetails {
    /**
     * @generated from protobuf field: string transfer_id = 1;
     */
    transferId: string;
    /**
     * @generated from protobuf field: com.vector.Balance balance = 2;
     */
    balance?: Balance;
    /**
     * @generated from protobuf field: string transfer_definition = 3;
     */
    transferDefinition: string;
    /**
     * @generated from protobuf field: string transfer_timeout = 4;
     */
    transferTimeout: string;
    /**
     * @generated from protobuf field: google.protobuf.Struct transfer_initial_state = 5;
     */
    transferInitialState?: Struct;
    /**
     * @generated from protobuf field: repeated string transfer_encodings = 6;
     */
    transferEncodings: string[];
    /**
     * @generated from protobuf field: repeated string merkle_proof_data = 7;
     */
    merkleProofData: string[];
    /**
     * @generated from protobuf field: string merkle_root = 8;
     */
    merkleRoot: string;
    /**
     * @generated from protobuf field: optional google.protobuf.Struct meta = 9;
     */
    meta?: Struct;
}
/**
 * @generated from protobuf message com.vector.ResolveUpdateDetails
 */
export interface ResolveUpdateDetails {
    /**
     * @generated from protobuf field: string transfer_id = 1;
     */
    transferId: string;
    /**
     * @generated from protobuf field: string transfer_definition = 2;
     */
    transferDefinition: string;
    /**
     * @generated from protobuf field: google.protobuf.Struct transfer_resolver = 3;
     */
    transferResolver?: Struct;
    /**
     * @generated from protobuf field: string merkle_root = 4;
     */
    merkleRoot: string;
    /**
     * @generated from protobuf field: optional google.protobuf.Struct meta = 5;
     */
    meta?: Struct;
}
/**
 * @generated from protobuf message com.vector.DepositUpdateDetails
 */
export interface DepositUpdateDetails {
    /**
     * @generated from protobuf field: string total_deposits_alice = 1;
     */
    totalDepositsAlice: string;
    /**
     * @generated from protobuf field: string total_deposits_bob = 2;
     */
    totalDepositsBob: string;
    /**
     * @generated from protobuf field: optional google.protobuf.Struct meta = 3;
     */
    meta?: Struct;
}
/**
 * @generated from protobuf message com.vector.SetupUpdateDetails
 */
export interface SetupUpdateDetails {
    /**
     * @generated from protobuf field: string timeout = 1;
     */
    timeout: string;
    /**
     * @generated from protobuf field: com.vector.NetworkContext network_context = 2;
     */
    networkContext?: NetworkContext;
    /**
     * @generated from protobuf field: optional google.protobuf.Struct meta = 3;
     */
    meta?: Struct;
}
/**
 * @generated from protobuf message com.vector.ChannelUpdate
 */
export interface ChannelUpdate {
    /**
     * @generated from protobuf field: string channel_address = 1;
     */
    channelAddress: string;
    /**
     * @generated from protobuf field: string from_identifier = 2;
     */
    fromIdentifier: string;
    /**
     * @generated from protobuf field: string to_identifier = 3;
     */
    toIdentifier: string;
    /**
     * @generated from protobuf field: string type = 4;
     */
    type: string;
    /**
     * @generated from protobuf field: int32 nonce = 5;
     */
    nonce: number;
    /**
     * @generated from protobuf field: com.vector.Balance balance = 6;
     */
    balance?: Balance;
    /**
     * @generated from protobuf field: string asset_id = 7;
     */
    assetId: string;
    /**
     * @generated from protobuf oneof: details
     */
    details: {
        oneofKind: "setupUpdateDetails";
        /**
         * @generated from protobuf field: com.vector.SetupUpdateDetails setup_update_details = 8;
         */
        setupUpdateDetails: SetupUpdateDetails;
    } | {
        oneofKind: "depositUpdateDetails";
        /**
         * @generated from protobuf field: com.vector.DepositUpdateDetails deposit_update_details = 9;
         */
        depositUpdateDetails: DepositUpdateDetails;
    } | {
        oneofKind: "createUpdateDetails";
        /**
         * @generated from protobuf field: com.vector.CreateUpdateDetails create_update_details = 10;
         */
        createUpdateDetails: CreateUpdateDetails;
    } | {
        oneofKind: "resolveUpdateDetails";
        /**
         * @generated from protobuf field: com.vector.ResolveUpdateDetails resolve_update_details = 11;
         */
        resolveUpdateDetails: ResolveUpdateDetails;
    } | {
        oneofKind: undefined;
    };
    /**
     * @generated from protobuf field: optional string aliceSignature = 12;
     */
    aliceSignature?: string;
    /**
     * @generated from protobuf field: optional string bob_signature = 13;
     */
    bobSignature?: string;
}
/**
 * channel state helpers
 *
 * @generated from protobuf message com.vector.Balance
 */
export interface Balance {
    /**
     * @generated from protobuf field: repeated string amount = 1;
     */
    amount: string[];
    /**
     * @generated from protobuf field: repeated string to = 2;
     */
    to: string[];
}
/**
 * @generated from protobuf message com.vector.NetworkContext
 */
export interface NetworkContext {
    /**
     * @generated from protobuf field: string channel_factory_address = 1;
     */
    channelFactoryAddress: string;
    /**
     * @generated from protobuf field: string transfer_registry_address = 2;
     */
    transferRegistryAddress: string;
    /**
     * @generated from protobuf field: int32 chain_id = 3;
     */
    chainId: number;
    /**
     * @generated from protobuf field: string provider_url = 4;
     */
    providerUrl: string;
}
/**
 * channel state
 *
 * @generated from protobuf message com.vector.FullChannelState
 */
export interface FullChannelState {
    /**
     * @generated from protobuf field: string channel_address = 1;
     */
    channelAddress: string;
    /**
     * @generated from protobuf field: string alice = 2;
     */
    alice: string;
    /**
     * @generated from protobuf field: string bob = 3;
     */
    bob: string;
    /**
     * @generated from protobuf field: string alice_identifier = 4;
     */
    aliceIdentifier: string;
    /**
     * @generated from protobuf field: string bob_identifier = 5;
     */
    bobIdentifier: string;
    /**
     * @generated from protobuf field: repeated string asset_ids = 6;
     */
    assetIds: string[];
    /**
     * @generated from protobuf field: repeated com.vector.Balance balances = 7;
     */
    balances: Balance[];
    /**
     * @generated from protobuf field: repeated string processed_deposits_a = 8;
     */
    processedDepositsA: string[];
    /**
     * @generated from protobuf field: repeated string processed_deposits_b = 9;
     */
    processedDepositsB: string[];
    /**
     * @generated from protobuf field: repeated string defund_nonces = 10;
     */
    defundNonces: string[];
    /**
     * @generated from protobuf field: int32 nonce = 11;
     */
    nonce: number;
    /**
     * @generated from protobuf field: string merkle_root = 12;
     */
    merkleRoot: string;
    /**
     * @generated from protobuf field: bool in_dispute = 13;
     */
    inDispute: boolean;
    /**
     * @generated from protobuf field: com.vector.ChannelUpdate latest_update = 14;
     */
    latestUpdate?: ChannelUpdate;
    /**
     * @generated from protobuf field: com.vector.NetworkContext network_context = 15;
     */
    networkContext?: NetworkContext;
    /**
     * @generated from protobuf field: string timeout = 16;
     */
    timeout: string;
}
/**
 * @generated from protobuf message com.vector.FullChannelStates
 */
export interface FullChannelStates {
    /**
     * @generated from protobuf field: repeated com.vector.FullChannelState full_channel_state = 1;
     */
    fullChannelState: FullChannelState[];
}
/**
 * transfer states
 *
 * @generated from protobuf message com.vector.FullTransferState
 */
export interface FullTransferState {
    /**
     * @generated from protobuf field: string transfer_id = 1;
     */
    transferId: string;
    /**
     * @generated from protobuf field: string channel_address = 2;
     */
    channelAddress: string;
    /**
     * @generated from protobuf field: string transfer_definition = 3;
     */
    transferDefinition: string;
    /**
     * @generated from protobuf field: string initiator = 4;
     */
    initiator: string;
    /**
     * @generated from protobuf field: string responder = 5;
     */
    responder: string;
    /**
     * @generated from protobuf field: string initiator_identifier = 6;
     */
    initiatorIdentifier: string;
    /**
     * @generated from protobuf field: string responder_identifier = 7;
     */
    responderIdentifier: string;
    /**
     * @generated from protobuf field: string asset_id = 8;
     */
    assetId: string;
    /**
     * @generated from protobuf field: com.vector.Balance balance = 9;
     */
    balance?: Balance;
    /**
     * @generated from protobuf field: string transfer_timeout = 10;
     */
    transferTimeout: string;
    /**
     * @generated from protobuf field: string initial_state_hash = 11;
     */
    initialStateHash: string;
    /**
     * @generated from protobuf field: repeated string transfer_encodings = 12;
     */
    transferEncodings: string[];
    /**
     * @generated from protobuf field: google.protobuf.Struct transfer_state = 13;
     */
    transferState?: Struct;
    /**
     * @generated from protobuf field: optional google.protobuf.Struct transfer_resolver = 14;
     */
    transferResolver?: Struct;
    /**
     * @generated from protobuf field: bool in_dispute = 15;
     */
    inDispute: boolean;
    /**
     * @generated from protobuf field: int32 channel_nonce = 16;
     */
    channelNonce: number;
    /**
     * @generated from protobuf field: string channel_factory_address = 17;
     */
    channelFactoryAddress: string;
    /**
     * @generated from protobuf field: int32 chain_id = 18;
     */
    chainId: number;
    /**
     * @generated from protobuf field: optional google.protobuf.Struct meta = 19;
     */
    meta?: Struct;
}
/**
 * @generated from protobuf message com.vector.FullTransferStates
 */
export interface FullTransferStates {
    /**
     * @generated from protobuf field: repeated com.vector.FullTransferState full_transfer_states = 1;
     */
    fullTransferStates: FullTransferState[];
}
/**
 * requests
 *
 * @generated from protobuf message com.vector.GetRouterConfigRequest
 */
export interface GetRouterConfigRequest {
    /**
     * @generated from protobuf field: string public_identifier = 1;
     */
    publicIdentifier: string;
    /**
     * @generated from protobuf field: string router_identifier = 2;
     */
    routerIdentifier: string;
}
/**
 * @generated from protobuf message com.vector.ConditionalTransferRequest
 */
export interface ConditionalTransferRequest {
    /**
     * @generated from protobuf field: string public_identifier = 1;
     */
    publicIdentifier: string;
    /**
     * @generated from protobuf field: string channel_address = 2;
     */
    channelAddress: string;
    /**
     * @generated from protobuf field: string amount = 3;
     */
    amount: string;
    /**
     * @generated from protobuf field: string asset_id = 4;
     */
    assetId: string;
    /**
     * @generated from protobuf field: string recipient = 5;
     */
    recipient: string;
    /**
     * @generated from protobuf field: int32 recipient_chainId = 6;
     */
    recipientChainId: number;
    /**
     * @generated from protobuf field: string recipient_assetId = 7;
     */
    recipientAssetId: string;
    /**
     * @generated from protobuf field: string timeout = 8;
     */
    timeout: string;
    /**
     * @generated from protobuf field: string type = 9;
     */
    type: string;
    /**
     * @generated from protobuf field: google.protobuf.Struct details = 10;
     */
    details?: Struct;
    /**
     * @generated from protobuf field: optional google.protobuf.Struct meta = 11;
     */
    meta?: Struct;
}
/**
 * @generated from protobuf message com.vector.CollateralRequest
 */
export interface CollateralRequest {
    /**
     * @generated from protobuf field: string public_identifier = 1;
     */
    publicIdentifier: string;
    /**
     * @generated from protobuf field: string channel_address = 2;
     */
    channelAddress: string;
    /**
     * @generated from protobuf field: string asset_id = 3;
     */
    assetId: string;
    /**
     * @generated from protobuf field: string amount = 4;
     */
    amount: string;
}
/**
 * @generated from protobuf message com.vector.DepositRequest
 */
export interface DepositRequest {
    /**
     * @generated from protobuf field: string public_identifier = 1;
     */
    publicIdentifier: string;
    /**
     * @generated from protobuf field: string channel_address = 2;
     */
    channelAddress: string;
    /**
     * @generated from protobuf field: string asset_id = 3;
     */
    assetId: string;
    /**
     * @generated from protobuf field: optional google.protobuf.Struct meta = 4;
     */
    meta?: Struct;
}
/**
 * @generated from protobuf message com.vector.TransferRequest
 */
export interface TransferRequest {
    /**
     * @generated from protobuf field: string public_identifier = 1;
     */
    publicIdentifier: string;
    /**
     * @generated from protobuf field: string transfer_id = 2;
     */
    transferId: string;
}
/**
 * @generated from protobuf message com.vector.ChannelStateRequest
 */
export interface ChannelStateRequest {
    /**
     * @generated from protobuf field: string public_identifier = 1;
     */
    publicIdentifier: string;
    /**
     * @generated from protobuf field: string channel_address = 2;
     */
    channelAddress: string;
}
/**
 * @generated from protobuf message com.vector.DepositTxRequest
 */
export interface DepositTxRequest {
    /**
     * @generated from protobuf field: string channel_address = 1;
     */
    channelAddress: string;
    /**
     * @generated from protobuf field: string amount = 2;
     */
    amount: string;
    /**
     * @generated from protobuf field: string asset_id = 3;
     */
    assetId: string;
    /**
     * @generated from protobuf field: int32 chain_id = 4;
     */
    chainId: number;
    /**
     * @generated from protobuf field: string public_identifier = 5;
     */
    publicIdentifier: string;
}
/**
 * @generated from protobuf message com.vector.SetupRequest
 */
export interface SetupRequest {
    /**
     * @generated from protobuf field: string public_identifier = 1;
     */
    publicIdentifier: string;
    /**
     * @generated from protobuf field: string counterparty_identifier = 2;
     */
    counterpartyIdentifier: string;
    /**
     * @generated from protobuf field: int32 chain_id = 3;
     */
    chainId: number;
    /**
     * @generated from protobuf field: string timeout = 4;
     */
    timeout: string;
    /**
     * @generated from protobuf field: optional google.protobuf.Struct meta = 5;
     */
    meta?: Struct;
}
/**
 * @generated from protobuf message com.vector.RegisteredTransfersRequest
 */
export interface RegisteredTransfersRequest {
    /**
     * @generated from protobuf field: string public_identifier = 1;
     */
    publicIdentifier: string;
    /**
     * @generated from protobuf field: int32 chain_id = 2;
     */
    chainId: number;
}
/**
 * @generated from protobuf message com.vector.ActiveTransfersRequest
 */
export interface ActiveTransfersRequest {
    /**
     * @generated from protobuf field: string public_identifier = 1;
     */
    publicIdentifier: string;
    /**
     * @generated from protobuf field: string channel_address = 2;
     */
    channelAddress: string;
}
/**
 * @generated from protobuf message com.vector.TransferStateByRoutingIdRequest
 */
export interface TransferStateByRoutingIdRequest {
    /**
     * @generated from protobuf field: string public_identifier = 1;
     */
    publicIdentifier: string;
    /**
     * @generated from protobuf field: string channel_address = 2;
     */
    channelAddress: string;
    /**
     * @generated from protobuf field: string routing_id = 3;
     */
    routingId: string;
}
/**
 * @generated from protobuf message com.vector.TransferStatesByRoutingIdRequest
 */
export interface TransferStatesByRoutingIdRequest {
    /**
     * @generated from protobuf field: string public_identifier = 1;
     */
    publicIdentifier: string;
    /**
     * @generated from protobuf field: string routing_id = 2;
     */
    routingId: string;
}
/**
 * @generated from protobuf message com.vector.TransfersRequest
 */
export interface TransfersRequest {
    /**
     * @generated from protobuf field: string public_identifier = 1;
     */
    publicIdentifier: string;
    /**
     * @generated from protobuf field: string transfer_id = 2;
     */
    transferId: string;
}
/**
 * @generated from protobuf message com.vector.ChannelStateByParticipantsRequest
 */
export interface ChannelStateByParticipantsRequest {
    /**
     * @generated from protobuf field: string public_identifier = 1;
     */
    publicIdentifier: string;
    /**
     * @generated from protobuf field: string counterparty = 2;
     */
    counterparty: string;
    /**
     * @generated from protobuf field: int32 chain_id = 3;
     */
    chainId: number;
}
/**
 * @generated from protobuf message com.vector.WithdrawRequest
 */
export interface WithdrawRequest {
    /**
     * @generated from protobuf field: string public_identifier = 1;
     */
    publicIdentifier: string;
    /**
     * @generated from protobuf field: string channel_address = 2;
     */
    channelAddress: string;
    /**
     * @generated from protobuf field: string amount = 3;
     */
    amount: string;
    /**
     * @generated from protobuf field: string asset_id = 4;
     */
    assetId: string;
    /**
     * @generated from protobuf field: string recipient = 5;
     */
    recipient: string;
    /**
     * @generated from protobuf field: string fee = 6;
     */
    fee: string;
    /**
     * @generated from protobuf field: string call_to = 7;
     */
    callTo: string;
    /**
     * @generated from protobuf field: string call_data = 8;
     */
    callData: string;
    /**
     * @generated from protobuf field: optional google.protobuf.Struct meta = 9;
     */
    meta?: Struct;
}
/**
 * @generated from protobuf message com.vector.ResolveTransferRequest
 */
export interface ResolveTransferRequest {
    /**
     * @generated from protobuf field: string public_identifier = 1;
     */
    publicIdentifier: string;
    /**
     * @generated from protobuf field: string channel_address = 2;
     */
    channelAddress: string;
    /**
     * @generated from protobuf field: string transfer_id = 3;
     */
    transferId: string;
    /**
     * @generated from protobuf field: google.protobuf.Struct transfer_resolver = 4;
     */
    transferResolver?: Struct;
    /**
     * @generated from protobuf field: optional google.protobuf.Struct meta = 5;
     */
    meta?: Struct;
}
/**
 * @generated from protobuf message com.vector.Body
 */
export interface Body {
    /**
     * @generated from protobuf field: string method = 1;
     */
    method: string;
    /**
     * @generated from protobuf field: google.protobuf.Struct params = 2;
     */
    params?: Struct;
}
/**
 * @generated from protobuf message com.vector.EthProviderRequest
 */
export interface EthProviderRequest {
    /**
     * @generated from protobuf field: int32 chain_id = 1;
     */
    chainId: number;
    /**
     * @generated from protobuf field: com.vector.Body body = 2;
     */
    body?: Body;
}
/**
 * responses
 *
 * @generated from protobuf message com.vector.RestoreStateReply
 */
export interface RestoreStateReply {
    /**
     * @generated from protobuf field: string channel_address = 1;
     */
    channelAddress: string;
}
/**
 * @generated from protobuf message com.vector.WithdrawReply
 */
export interface WithdrawReply {
    /**
     * @generated from protobuf field: string channel_address = 1;
     */
    channelAddress: string;
    /**
     * @generated from protobuf field: string transfer_id = 2;
     */
    transferId: string;
    /**
     * @generated from protobuf field: string transaction_hash = 3;
     */
    transactionHash: string;
}
/**
 * @generated from protobuf message com.vector.EthProviderReply
 */
export interface EthProviderReply {
    /**
     * @generated from protobuf field: google.protobuf.Struct response = 1;
     */
    response?: Struct;
}
/**
 * @generated from protobuf message com.vector.Configs
 */
export interface Configs {
    /**
     * @generated from protobuf field: repeated com.vector.Config config = 1;
     */
    config: Config[];
}
/**
 * @generated from protobuf message com.vector.Config
 */
export interface Config {
    /**
     * @generated from protobuf field: int32 index = 1;
     */
    index: number;
    /**
     * @generated from protobuf field: string public_identifier = 2;
     */
    publicIdentifier: string;
    /**
     * @generated from protobuf field: string signer_address = 3;
     */
    signerAddress: string;
}
/**
 * @generated from protobuf message com.vector.AllowedSwaps
 */
export interface AllowedSwaps {
    /**
     * @generated from protobuf field: int32 from_chain_id = 1;
     */
    fromChainId: number;
    /**
     * @generated from protobuf field: int32 to_chain_id = 2;
     */
    toChainId: number;
    /**
     * @generated from protobuf field: string from_asset_id = 3;
     */
    fromAssetId: string;
    /**
     * @generated from protobuf field: string to_asset_id = 4;
     */
    toAssetId: string;
    /**
     * @generated from protobuf field: string price_type = 5;
     */
    priceType: string;
    /**
     * @generated from protobuf field: string hardcoded_rate = 6;
     */
    hardcodedRate: string;
}
/**
 * @generated from protobuf message com.vector.RouterConfig
 */
export interface RouterConfig {
    /**
     * @generated from protobuf field: repeated int32 supported_chains = 1;
     */
    supportedChains: number[];
    /**
     * @generated from protobuf field: repeated com.vector.AllowedSwaps allowed_swaps = 2;
     */
    allowedSwaps: AllowedSwaps[];
}
/**
 * @generated from protobuf message com.vector.ProviderSyncing
 */
export interface ProviderSyncing {
    /**
     * @generated from protobuf field: bool syncing = 1;
     */
    syncing: boolean;
    /**
     * @generated from protobuf field: string starting_block = 2;
     */
    startingBlock: string;
    /**
     * @generated from protobuf field: string current_block = 3;
     */
    currentBlock: string;
    /**
     * @generated from protobuf field: string highest_block = 4;
     */
    highestBlock: string;
}
/**
 * @generated from protobuf message com.vector.Status
 */
export interface Status {
    /**
     * @generated from protobuf field: map<int32, com.vector.ProviderSyncing> provider_syncing = 1;
     */
    providerSyncing: {
        [key: number]: ProviderSyncing;
    };
    /**
     * @generated from protobuf field: string public_identifier = 2;
     */
    publicIdentifier: string;
    /**
     * @generated from protobuf field: string signer_address = 3;
     */
    signerAddress: string;
    /**
     * @generated from protobuf field: string version = 4;
     */
    version: string;
}
/**
 * @generated from protobuf message com.vector.RegisteredTransfer
 */
export interface RegisteredTransfer {
    /**
     * @generated from protobuf field: string state_encoding = 1;
     */
    stateEncoding: string;
    /**
     * @generated from protobuf field: string resolver_encoding = 2;
     */
    resolverEncoding: string;
    /**
     * @generated from protobuf field: string definition = 3;
     */
    definition: string;
    /**
     * @generated from protobuf field: string name = 4;
     */
    name: string;
    /**
     * @generated from protobuf field: string encoded_cancel = 5;
     */
    encodedCancel: string;
}
/**
 * @generated from protobuf message com.vector.RegisteredTransfers
 */
export interface RegisteredTransfers {
    /**
     * @generated from protobuf field: repeated com.vector.RegisteredTransfer registered_transfer = 1;
     */
    registeredTransfer: RegisteredTransfer[];
}
/**
 * event payloads
 *
 * @generated from protobuf message com.vector.IsAlivePayload
 */
export interface IsAlivePayload {
    /**
     * @generated from protobuf field: string channel_address = 1;
     */
    channelAddress: string;
    /**
     * @generated from protobuf field: string alice_identifier = 2;
     */
    aliceIdentifier: string;
    /**
     * @generated from protobuf field: string bob_identifier = 3;
     */
    bobIdentifier: string;
    /**
     * @generated from protobuf field: int32 chain_id = 4;
     */
    chainId: number;
    /**
     * @generated from protobuf field: optional bool skip_check_in = 5;
     */
    skipCheckIn?: boolean;
}
/**
 * @generated from protobuf message com.vector.SetupPayload
 */
export interface SetupPayload {
    /**
     * @generated from protobuf field: string channel_address = 1;
     */
    channelAddress: string;
    /**
     * @generated from protobuf field: string alice_identifier = 2;
     */
    aliceIdentifier: string;
    /**
     * @generated from protobuf field: string bob_identifier = 3;
     */
    bobIdentifier: string;
    /**
     * @generated from protobuf field: int32 chain_id = 4;
     */
    chainId: number;
    /**
     * @generated from protobuf field: optional google.protobuf.Struct meta = 5;
     */
    meta?: Struct;
}
/**
 * @generated from protobuf message com.vector.ConditionalTransferCreatedPayload
 */
export interface ConditionalTransferCreatedPayload {
    /**
     * @generated from protobuf field: string channel_address = 1;
     */
    channelAddress: string;
    /**
     * @generated from protobuf field: string alice_identifier = 2;
     */
    aliceIdentifier: string;
    /**
     * @generated from protobuf field: string bob_identifier = 3;
     */
    bobIdentifier: string;
    /**
     * @generated from protobuf field: com.vector.FullTransferState transfer = 4;
     */
    transfer?: FullTransferState;
    /**
     * @generated from protobuf field: com.vector.Balance channel_balance = 5;
     */
    channelBalance?: Balance;
    /**
     * @generated from protobuf field: string condition_type = 6;
     */
    conditionType: string;
    /**
     * @generated from protobuf field: repeated string active_transfer_ids = 7;
     */
    activeTransferIds: string[];
    /**
     * @generated from protobuf field: optional google.protobuf.Struct meta = 8;
     */
    meta?: Struct;
}
/**
 * @generated from protobuf message com.vector.DepositReconciledPayload
 */
export interface DepositReconciledPayload {
    /**
     * @generated from protobuf field: string channel_address = 1;
     */
    channelAddress: string;
    /**
     * @generated from protobuf field: string alice_identifier = 2;
     */
    aliceIdentifier: string;
    /**
     * @generated from protobuf field: string bob_identifier = 3;
     */
    bobIdentifier: string;
    /**
     * @generated from protobuf field: string asset_id = 4;
     */
    assetId: string;
    /**
     * @generated from protobuf field: com.vector.Balance channel_balance = 5;
     */
    channelBalance?: Balance;
    /**
     * @generated from protobuf field: optional google.protobuf.Struct meta = 6;
     */
    meta?: Struct;
}
/**
 * @generated from protobuf message com.vector.RequestCollateralPayload
 */
export interface RequestCollateralPayload {
    /**
     * @generated from protobuf field: string channel_address = 1;
     */
    channelAddress: string;
    /**
     * @generated from protobuf field: string alice_identifier = 2;
     */
    aliceIdentifier: string;
    /**
     * @generated from protobuf field: string bob_identifier = 3;
     */
    bobIdentifier: string;
    /**
     * @generated from protobuf field: string asset_id = 4;
     */
    assetId: string;
    /**
     * @generated from protobuf field: optional string amount = 5;
     */
    amount?: string;
    /**
     * @generated from protobuf field: optional google.protobuf.Struct meta = 6;
     */
    meta?: Struct;
}
/**
 * @generated from protobuf message com.vector.WithdrawalCreatedPayload
 */
export interface WithdrawalCreatedPayload {
    /**
     * @generated from protobuf field: string channel_address = 1;
     */
    channelAddress: string;
    /**
     * @generated from protobuf field: string alice_identifier = 2;
     */
    aliceIdentifier: string;
    /**
     * @generated from protobuf field: string bob_identifier = 3;
     */
    bobIdentifier: string;
    /**
     * @generated from protobuf field: com.vector.FullTransferState transfer = 4;
     */
    transfer?: FullTransferState;
    /**
     * @generated from protobuf field: string fee = 5;
     */
    fee: string;
    /**
     * @generated from protobuf field: string asset_id = 6;
     */
    assetId: string;
    /**
     * @generated from protobuf field: string amount = 7;
     */
    amount: string;
    /**
     * @generated from protobuf field: string recipient = 8;
     */
    recipient: string;
    /**
     * @generated from protobuf field: string call_to = 9;
     */
    callTo: string;
    /**
     * @generated from protobuf field: string call_data = 10;
     */
    callData: string;
    /**
     * @generated from protobuf field: com.vector.Balance channel_balance = 11;
     */
    channelBalance?: Balance;
    /**
     * @generated from protobuf field: optional google.protobuf.Struct meta = 12;
     */
    meta?: Struct;
}
/**
 * @generated from protobuf message com.vector.WithdrawalReconciledPayload
 */
export interface WithdrawalReconciledPayload {
    /**
     * @generated from protobuf field: string channel_address = 1;
     */
    channelAddress: string;
    /**
     * @generated from protobuf field: string alice_identifier = 2;
     */
    aliceIdentifier: string;
    /**
     * @generated from protobuf field: string bob_identifier = 3;
     */
    bobIdentifier: string;
    /**
     * @generated from protobuf field: string transaction_hash = 4;
     */
    transactionHash: string;
    /**
     * @generated from protobuf field: string transfer_id = 5;
     */
    transferId: string;
    /**
     * @generated from protobuf field: optional google.protobuf.Struct meta = 6;
     */
    meta?: Struct;
}
/**
 * @generated from protobuf message com.vector.CreateNodeRequest
 */
export interface CreateNodeRequest {
    /**
     * @generated from protobuf field: int32 index = 1;
     */
    index: number;
    /**
     * @generated from protobuf field: string mnemonic = 2;
     */
    mnemonic: string;
    /**
     * @generated from protobuf field: bool skipCheckIn = 3;
     */
    skipCheckIn: boolean;
}
/**
 * @generated from protobuf message com.vector.CreateNodeReply
 */
export interface CreateNodeReply {
    /**
     * @generated from protobuf field: string public_identifier = 1;
     */
    publicIdentifier: string;
    /**
     * @generated from protobuf field: string signer_address = 2;
     */
    signerAddress: string;
    /**
     * @generated from protobuf field: int32 index = 3;
     */
    index: number;
}
/**
 * @generated from protobuf message com.vector.ClearStoreRequest
 */
export interface ClearStoreRequest {
    /**
     * @generated from protobuf field: string admin_token = 1;
     */
    adminToken: string;
}
/**
 * @generated from protobuf message com.vector.RestoreStateRequest
 */
export interface RestoreStateRequest {
    /**
     * @generated from protobuf field: string counterparty_identifier = 1;
     */
    counterpartyIdentifier: string;
    /**
     * @generated from protobuf field: string chain_id = 2;
     */
    chainId: string;
    /**
     * @generated from protobuf field: string public_identifier = 3;
     */
    publicIdentifier: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class Empty$Type extends MessageType<Empty> {
    constructor() {
        super("com.vector.Empty", []);
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Empty): Empty {
        return target ?? this.create();
    }
    internalBinaryWrite(message: Empty, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.vector.Empty
 */
export const Empty = new Empty$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GenericPublicIdentifierRequest$Type extends MessageType<GenericPublicIdentifierRequest> {
    constructor() {
        super("com.vector.GenericPublicIdentifierRequest", [
            { no: 1, name: "public_identifier", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GenericPublicIdentifierRequest): GenericPublicIdentifierRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string public_identifier */ 1:
                    message.publicIdentifier = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GenericPublicIdentifierRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string public_identifier = 1; */
        if (message.publicIdentifier !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.publicIdentifier);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.vector.GenericPublicIdentifierRequest
 */
export const GenericPublicIdentifierRequest = new GenericPublicIdentifierRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GenericMessageResponse$Type extends MessageType<GenericMessageResponse> {
    constructor() {
        super("com.vector.GenericMessageResponse", [
            { no: 1, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GenericMessageResponse): GenericMessageResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string message */ 1:
                    message.message = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GenericMessageResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string message = 1; */
        if (message.message !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.message);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.vector.GenericMessageResponse
 */
export const GenericMessageResponse = new GenericMessageResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TxHash$Type extends MessageType<TxHash> {
    constructor() {
        super("com.vector.TxHash", [
            { no: 1, name: "txHash", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TxHash): TxHash {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string txHash */ 1:
                    message.txHash = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TxHash, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string txHash = 1; */
        if (message.txHash !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.txHash);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.vector.TxHash
 */
export const TxHash = new TxHash$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateUpdateDetails$Type extends MessageType<CreateUpdateDetails> {
    constructor() {
        super("com.vector.CreateUpdateDetails", [
            { no: 1, name: "transfer_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "balance", kind: "message", T: () => Balance },
            { no: 3, name: "transfer_definition", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "transfer_timeout", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "transfer_initial_state", kind: "message", T: () => Struct },
            { no: 6, name: "transfer_encodings", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "merkle_proof_data", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "merkle_root", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "meta", kind: "message", T: () => Struct }
        ]);
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateUpdateDetails): CreateUpdateDetails {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string transfer_id */ 1:
                    message.transferId = reader.string();
                    break;
                case /* com.vector.Balance balance */ 2:
                    message.balance = Balance.internalBinaryRead(reader, reader.uint32(), options, message.balance);
                    break;
                case /* string transfer_definition */ 3:
                    message.transferDefinition = reader.string();
                    break;
                case /* string transfer_timeout */ 4:
                    message.transferTimeout = reader.string();
                    break;
                case /* google.protobuf.Struct transfer_initial_state */ 5:
                    message.transferInitialState = Struct.internalBinaryRead(reader, reader.uint32(), options, message.transferInitialState);
                    break;
                case /* repeated string transfer_encodings */ 6:
                    message.transferEncodings.push(reader.string());
                    break;
                case /* repeated string merkle_proof_data */ 7:
                    message.merkleProofData.push(reader.string());
                    break;
                case /* string merkle_root */ 8:
                    message.merkleRoot = reader.string();
                    break;
                case /* optional google.protobuf.Struct meta */ 9:
                    message.meta = Struct.internalBinaryRead(reader, reader.uint32(), options, message.meta);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateUpdateDetails, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string transfer_id = 1; */
        if (message.transferId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.transferId);
        /* com.vector.Balance balance = 2; */
        if (message.balance)
            Balance.internalBinaryWrite(message.balance, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* string transfer_definition = 3; */
        if (message.transferDefinition !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.transferDefinition);
        /* string transfer_timeout = 4; */
        if (message.transferTimeout !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.transferTimeout);
        /* google.protobuf.Struct transfer_initial_state = 5; */
        if (message.transferInitialState)
            Struct.internalBinaryWrite(message.transferInitialState, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* repeated string transfer_encodings = 6; */
        for (let i = 0; i < message.transferEncodings.length; i++)
            writer.tag(6, WireType.LengthDelimited).string(message.transferEncodings[i]);
        /* repeated string merkle_proof_data = 7; */
        for (let i = 0; i < message.merkleProofData.length; i++)
            writer.tag(7, WireType.LengthDelimited).string(message.merkleProofData[i]);
        /* string merkle_root = 8; */
        if (message.merkleRoot !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.merkleRoot);
        /* optional google.protobuf.Struct meta = 9; */
        if (message.meta)
            Struct.internalBinaryWrite(message.meta, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.vector.CreateUpdateDetails
 */
export const CreateUpdateDetails = new CreateUpdateDetails$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResolveUpdateDetails$Type extends MessageType<ResolveUpdateDetails> {
    constructor() {
        super("com.vector.ResolveUpdateDetails", [
            { no: 1, name: "transfer_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "transfer_definition", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "transfer_resolver", kind: "message", T: () => Struct },
            { no: 4, name: "merkle_root", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "meta", kind: "message", T: () => Struct }
        ]);
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResolveUpdateDetails): ResolveUpdateDetails {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string transfer_id */ 1:
                    message.transferId = reader.string();
                    break;
                case /* string transfer_definition */ 2:
                    message.transferDefinition = reader.string();
                    break;
                case /* google.protobuf.Struct transfer_resolver */ 3:
                    message.transferResolver = Struct.internalBinaryRead(reader, reader.uint32(), options, message.transferResolver);
                    break;
                case /* string merkle_root */ 4:
                    message.merkleRoot = reader.string();
                    break;
                case /* optional google.protobuf.Struct meta */ 5:
                    message.meta = Struct.internalBinaryRead(reader, reader.uint32(), options, message.meta);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResolveUpdateDetails, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string transfer_id = 1; */
        if (message.transferId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.transferId);
        /* string transfer_definition = 2; */
        if (message.transferDefinition !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.transferDefinition);
        /* google.protobuf.Struct transfer_resolver = 3; */
        if (message.transferResolver)
            Struct.internalBinaryWrite(message.transferResolver, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* string merkle_root = 4; */
        if (message.merkleRoot !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.merkleRoot);
        /* optional google.protobuf.Struct meta = 5; */
        if (message.meta)
            Struct.internalBinaryWrite(message.meta, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.vector.ResolveUpdateDetails
 */
export const ResolveUpdateDetails = new ResolveUpdateDetails$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DepositUpdateDetails$Type extends MessageType<DepositUpdateDetails> {
    constructor() {
        super("com.vector.DepositUpdateDetails", [
            { no: 1, name: "total_deposits_alice", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "total_deposits_bob", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "meta", kind: "message", T: () => Struct }
        ]);
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DepositUpdateDetails): DepositUpdateDetails {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string total_deposits_alice */ 1:
                    message.totalDepositsAlice = reader.string();
                    break;
                case /* string total_deposits_bob */ 2:
                    message.totalDepositsBob = reader.string();
                    break;
                case /* optional google.protobuf.Struct meta */ 3:
                    message.meta = Struct.internalBinaryRead(reader, reader.uint32(), options, message.meta);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DepositUpdateDetails, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string total_deposits_alice = 1; */
        if (message.totalDepositsAlice !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.totalDepositsAlice);
        /* string total_deposits_bob = 2; */
        if (message.totalDepositsBob !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.totalDepositsBob);
        /* optional google.protobuf.Struct meta = 3; */
        if (message.meta)
            Struct.internalBinaryWrite(message.meta, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.vector.DepositUpdateDetails
 */
export const DepositUpdateDetails = new DepositUpdateDetails$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetupUpdateDetails$Type extends MessageType<SetupUpdateDetails> {
    constructor() {
        super("com.vector.SetupUpdateDetails", [
            { no: 1, name: "timeout", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "network_context", kind: "message", T: () => NetworkContext },
            { no: 3, name: "meta", kind: "message", T: () => Struct }
        ]);
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetupUpdateDetails): SetupUpdateDetails {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string timeout */ 1:
                    message.timeout = reader.string();
                    break;
                case /* com.vector.NetworkContext network_context */ 2:
                    message.networkContext = NetworkContext.internalBinaryRead(reader, reader.uint32(), options, message.networkContext);
                    break;
                case /* optional google.protobuf.Struct meta */ 3:
                    message.meta = Struct.internalBinaryRead(reader, reader.uint32(), options, message.meta);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetupUpdateDetails, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string timeout = 1; */
        if (message.timeout !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.timeout);
        /* com.vector.NetworkContext network_context = 2; */
        if (message.networkContext)
            NetworkContext.internalBinaryWrite(message.networkContext, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* optional google.protobuf.Struct meta = 3; */
        if (message.meta)
            Struct.internalBinaryWrite(message.meta, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.vector.SetupUpdateDetails
 */
export const SetupUpdateDetails = new SetupUpdateDetails$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChannelUpdate$Type extends MessageType<ChannelUpdate> {
    constructor() {
        super("com.vector.ChannelUpdate", [
            { no: 1, name: "channel_address", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "from_identifier", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "to_identifier", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "nonce", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "balance", kind: "message", T: () => Balance },
            { no: 7, name: "asset_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "setup_update_details", kind: "message", oneof: "details", T: () => SetupUpdateDetails },
            { no: 9, name: "deposit_update_details", kind: "message", oneof: "details", T: () => DepositUpdateDetails },
            { no: 10, name: "create_update_details", kind: "message", oneof: "details", T: () => CreateUpdateDetails },
            { no: 11, name: "resolve_update_details", kind: "message", oneof: "details", T: () => ResolveUpdateDetails },
            { no: 12, name: "aliceSignature", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 13, name: "bob_signature", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChannelUpdate): ChannelUpdate {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string channel_address */ 1:
                    message.channelAddress = reader.string();
                    break;
                case /* string from_identifier */ 2:
                    message.fromIdentifier = reader.string();
                    break;
                case /* string to_identifier */ 3:
                    message.toIdentifier = reader.string();
                    break;
                case /* string type */ 4:
                    message.type = reader.string();
                    break;
                case /* int32 nonce */ 5:
                    message.nonce = reader.int32();
                    break;
                case /* com.vector.Balance balance */ 6:
                    message.balance = Balance.internalBinaryRead(reader, reader.uint32(), options, message.balance);
                    break;
                case /* string asset_id */ 7:
                    message.assetId = reader.string();
                    break;
                case /* com.vector.SetupUpdateDetails setup_update_details */ 8:
                    message.details = {
                        oneofKind: "setupUpdateDetails",
                        setupUpdateDetails: SetupUpdateDetails.internalBinaryRead(reader, reader.uint32(), options, (message.details as any).setupUpdateDetails)
                    };
                    break;
                case /* com.vector.DepositUpdateDetails deposit_update_details */ 9:
                    message.details = {
                        oneofKind: "depositUpdateDetails",
                        depositUpdateDetails: DepositUpdateDetails.internalBinaryRead(reader, reader.uint32(), options, (message.details as any).depositUpdateDetails)
                    };
                    break;
                case /* com.vector.CreateUpdateDetails create_update_details */ 10:
                    message.details = {
                        oneofKind: "createUpdateDetails",
                        createUpdateDetails: CreateUpdateDetails.internalBinaryRead(reader, reader.uint32(), options, (message.details as any).createUpdateDetails)
                    };
                    break;
                case /* com.vector.ResolveUpdateDetails resolve_update_details */ 11:
                    message.details = {
                        oneofKind: "resolveUpdateDetails",
                        resolveUpdateDetails: ResolveUpdateDetails.internalBinaryRead(reader, reader.uint32(), options, (message.details as any).resolveUpdateDetails)
                    };
                    break;
                case /* optional string aliceSignature */ 12:
                    message.aliceSignature = reader.string();
                    break;
                case /* optional string bob_signature */ 13:
                    message.bobSignature = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChannelUpdate, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string channel_address = 1; */
        if (message.channelAddress !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.channelAddress);
        /* string from_identifier = 2; */
        if (message.fromIdentifier !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.fromIdentifier);
        /* string to_identifier = 3; */
        if (message.toIdentifier !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.toIdentifier);
        /* string type = 4; */
        if (message.type !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.type);
        /* int32 nonce = 5; */
        if (message.nonce !== 0)
            writer.tag(5, WireType.Varint).int32(message.nonce);
        /* com.vector.Balance balance = 6; */
        if (message.balance)
            Balance.internalBinaryWrite(message.balance, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* string asset_id = 7; */
        if (message.assetId !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.assetId);
        /* com.vector.SetupUpdateDetails setup_update_details = 8; */
        if (message.details.oneofKind === "setupUpdateDetails")
            SetupUpdateDetails.internalBinaryWrite(message.details.setupUpdateDetails, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* com.vector.DepositUpdateDetails deposit_update_details = 9; */
        if (message.details.oneofKind === "depositUpdateDetails")
            DepositUpdateDetails.internalBinaryWrite(message.details.depositUpdateDetails, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* com.vector.CreateUpdateDetails create_update_details = 10; */
        if (message.details.oneofKind === "createUpdateDetails")
            CreateUpdateDetails.internalBinaryWrite(message.details.createUpdateDetails, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* com.vector.ResolveUpdateDetails resolve_update_details = 11; */
        if (message.details.oneofKind === "resolveUpdateDetails")
            ResolveUpdateDetails.internalBinaryWrite(message.details.resolveUpdateDetails, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* optional string aliceSignature = 12; */
        if (message.aliceSignature !== undefined)
            writer.tag(12, WireType.LengthDelimited).string(message.aliceSignature);
        /* optional string bob_signature = 13; */
        if (message.bobSignature !== undefined)
            writer.tag(13, WireType.LengthDelimited).string(message.bobSignature);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.vector.ChannelUpdate
 */
export const ChannelUpdate = new ChannelUpdate$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Balance$Type extends MessageType<Balance> {
    constructor() {
        super("com.vector.Balance", [
            { no: 1, name: "amount", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "to", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Balance): Balance {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string amount */ 1:
                    message.amount.push(reader.string());
                    break;
                case /* repeated string to */ 2:
                    message.to.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Balance, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string amount = 1; */
        for (let i = 0; i < message.amount.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.amount[i]);
        /* repeated string to = 2; */
        for (let i = 0; i < message.to.length; i++)
            writer.tag(2, WireType.LengthDelimited).string(message.to[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.vector.Balance
 */
export const Balance = new Balance$Type();
// @generated message type with reflection information, may provide speed optimized methods
class NetworkContext$Type extends MessageType<NetworkContext> {
    constructor() {
        super("com.vector.NetworkContext", [
            { no: 1, name: "channel_factory_address", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "transfer_registry_address", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "chain_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "provider_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: NetworkContext): NetworkContext {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string channel_factory_address */ 1:
                    message.channelFactoryAddress = reader.string();
                    break;
                case /* string transfer_registry_address */ 2:
                    message.transferRegistryAddress = reader.string();
                    break;
                case /* int32 chain_id */ 3:
                    message.chainId = reader.int32();
                    break;
                case /* string provider_url */ 4:
                    message.providerUrl = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: NetworkContext, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string channel_factory_address = 1; */
        if (message.channelFactoryAddress !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.channelFactoryAddress);
        /* string transfer_registry_address = 2; */
        if (message.transferRegistryAddress !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.transferRegistryAddress);
        /* int32 chain_id = 3; */
        if (message.chainId !== 0)
            writer.tag(3, WireType.Varint).int32(message.chainId);
        /* string provider_url = 4; */
        if (message.providerUrl !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.providerUrl);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.vector.NetworkContext
 */
export const NetworkContext = new NetworkContext$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FullChannelState$Type extends MessageType<FullChannelState> {
    constructor() {
        super("com.vector.FullChannelState", [
            { no: 1, name: "channel_address", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "alice", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "bob", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "alice_identifier", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "bob_identifier", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "asset_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "balances", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Balance },
            { no: 8, name: "processed_deposits_a", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "processed_deposits_b", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "defund_nonces", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "nonce", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 12, name: "merkle_root", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 13, name: "in_dispute", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 14, name: "latest_update", kind: "message", T: () => ChannelUpdate },
            { no: 15, name: "network_context", kind: "message", T: () => NetworkContext },
            { no: 16, name: "timeout", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FullChannelState): FullChannelState {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string channel_address */ 1:
                    message.channelAddress = reader.string();
                    break;
                case /* string alice */ 2:
                    message.alice = reader.string();
                    break;
                case /* string bob */ 3:
                    message.bob = reader.string();
                    break;
                case /* string alice_identifier */ 4:
                    message.aliceIdentifier = reader.string();
                    break;
                case /* string bob_identifier */ 5:
                    message.bobIdentifier = reader.string();
                    break;
                case /* repeated string asset_ids */ 6:
                    message.assetIds.push(reader.string());
                    break;
                case /* repeated com.vector.Balance balances */ 7:
                    message.balances.push(Balance.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated string processed_deposits_a */ 8:
                    message.processedDepositsA.push(reader.string());
                    break;
                case /* repeated string processed_deposits_b */ 9:
                    message.processedDepositsB.push(reader.string());
                    break;
                case /* repeated string defund_nonces */ 10:
                    message.defundNonces.push(reader.string());
                    break;
                case /* int32 nonce */ 11:
                    message.nonce = reader.int32();
                    break;
                case /* string merkle_root */ 12:
                    message.merkleRoot = reader.string();
                    break;
                case /* bool in_dispute */ 13:
                    message.inDispute = reader.bool();
                    break;
                case /* com.vector.ChannelUpdate latest_update */ 14:
                    message.latestUpdate = ChannelUpdate.internalBinaryRead(reader, reader.uint32(), options, message.latestUpdate);
                    break;
                case /* com.vector.NetworkContext network_context */ 15:
                    message.networkContext = NetworkContext.internalBinaryRead(reader, reader.uint32(), options, message.networkContext);
                    break;
                case /* string timeout */ 16:
                    message.timeout = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FullChannelState, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string channel_address = 1; */
        if (message.channelAddress !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.channelAddress);
        /* string alice = 2; */
        if (message.alice !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.alice);
        /* string bob = 3; */
        if (message.bob !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.bob);
        /* string alice_identifier = 4; */
        if (message.aliceIdentifier !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.aliceIdentifier);
        /* string bob_identifier = 5; */
        if (message.bobIdentifier !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.bobIdentifier);
        /* repeated string asset_ids = 6; */
        for (let i = 0; i < message.assetIds.length; i++)
            writer.tag(6, WireType.LengthDelimited).string(message.assetIds[i]);
        /* repeated com.vector.Balance balances = 7; */
        for (let i = 0; i < message.balances.length; i++)
            Balance.internalBinaryWrite(message.balances[i], writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* repeated string processed_deposits_a = 8; */
        for (let i = 0; i < message.processedDepositsA.length; i++)
            writer.tag(8, WireType.LengthDelimited).string(message.processedDepositsA[i]);
        /* repeated string processed_deposits_b = 9; */
        for (let i = 0; i < message.processedDepositsB.length; i++)
            writer.tag(9, WireType.LengthDelimited).string(message.processedDepositsB[i]);
        /* repeated string defund_nonces = 10; */
        for (let i = 0; i < message.defundNonces.length; i++)
            writer.tag(10, WireType.LengthDelimited).string(message.defundNonces[i]);
        /* int32 nonce = 11; */
        if (message.nonce !== 0)
            writer.tag(11, WireType.Varint).int32(message.nonce);
        /* string merkle_root = 12; */
        if (message.merkleRoot !== "")
            writer.tag(12, WireType.LengthDelimited).string(message.merkleRoot);
        /* bool in_dispute = 13; */
        if (message.inDispute !== false)
            writer.tag(13, WireType.Varint).bool(message.inDispute);
        /* com.vector.ChannelUpdate latest_update = 14; */
        if (message.latestUpdate)
            ChannelUpdate.internalBinaryWrite(message.latestUpdate, writer.tag(14, WireType.LengthDelimited).fork(), options).join();
        /* com.vector.NetworkContext network_context = 15; */
        if (message.networkContext)
            NetworkContext.internalBinaryWrite(message.networkContext, writer.tag(15, WireType.LengthDelimited).fork(), options).join();
        /* string timeout = 16; */
        if (message.timeout !== "")
            writer.tag(16, WireType.LengthDelimited).string(message.timeout);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.vector.FullChannelState
 */
export const FullChannelState = new FullChannelState$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FullChannelStates$Type extends MessageType<FullChannelStates> {
    constructor() {
        super("com.vector.FullChannelStates", [
            { no: 1, name: "full_channel_state", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => FullChannelState }
        ]);
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FullChannelStates): FullChannelStates {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.vector.FullChannelState full_channel_state */ 1:
                    message.fullChannelState.push(FullChannelState.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FullChannelStates, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.vector.FullChannelState full_channel_state = 1; */
        for (let i = 0; i < message.fullChannelState.length; i++)
            FullChannelState.internalBinaryWrite(message.fullChannelState[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.vector.FullChannelStates
 */
export const FullChannelStates = new FullChannelStates$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FullTransferState$Type extends MessageType<FullTransferState> {
    constructor() {
        super("com.vector.FullTransferState", [
            { no: 1, name: "transfer_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "channel_address", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "transfer_definition", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "initiator", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "responder", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "initiator_identifier", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "responder_identifier", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "asset_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "balance", kind: "message", T: () => Balance },
            { no: 10, name: "transfer_timeout", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "initial_state_hash", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 12, name: "transfer_encodings", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 13, name: "transfer_state", kind: "message", T: () => Struct },
            { no: 14, name: "transfer_resolver", kind: "message", T: () => Struct },
            { no: 15, name: "in_dispute", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 16, name: "channel_nonce", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 17, name: "channel_factory_address", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 18, name: "chain_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 19, name: "meta", kind: "message", T: () => Struct }
        ]);
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FullTransferState): FullTransferState {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string transfer_id */ 1:
                    message.transferId = reader.string();
                    break;
                case /* string channel_address */ 2:
                    message.channelAddress = reader.string();
                    break;
                case /* string transfer_definition */ 3:
                    message.transferDefinition = reader.string();
                    break;
                case /* string initiator */ 4:
                    message.initiator = reader.string();
                    break;
                case /* string responder */ 5:
                    message.responder = reader.string();
                    break;
                case /* string initiator_identifier */ 6:
                    message.initiatorIdentifier = reader.string();
                    break;
                case /* string responder_identifier */ 7:
                    message.responderIdentifier = reader.string();
                    break;
                case /* string asset_id */ 8:
                    message.assetId = reader.string();
                    break;
                case /* com.vector.Balance balance */ 9:
                    message.balance = Balance.internalBinaryRead(reader, reader.uint32(), options, message.balance);
                    break;
                case /* string transfer_timeout */ 10:
                    message.transferTimeout = reader.string();
                    break;
                case /* string initial_state_hash */ 11:
                    message.initialStateHash = reader.string();
                    break;
                case /* repeated string transfer_encodings */ 12:
                    message.transferEncodings.push(reader.string());
                    break;
                case /* google.protobuf.Struct transfer_state */ 13:
                    message.transferState = Struct.internalBinaryRead(reader, reader.uint32(), options, message.transferState);
                    break;
                case /* optional google.protobuf.Struct transfer_resolver */ 14:
                    message.transferResolver = Struct.internalBinaryRead(reader, reader.uint32(), options, message.transferResolver);
                    break;
                case /* bool in_dispute */ 15:
                    message.inDispute = reader.bool();
                    break;
                case /* int32 channel_nonce */ 16:
                    message.channelNonce = reader.int32();
                    break;
                case /* string channel_factory_address */ 17:
                    message.channelFactoryAddress = reader.string();
                    break;
                case /* int32 chain_id */ 18:
                    message.chainId = reader.int32();
                    break;
                case /* optional google.protobuf.Struct meta */ 19:
                    message.meta = Struct.internalBinaryRead(reader, reader.uint32(), options, message.meta);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FullTransferState, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string transfer_id = 1; */
        if (message.transferId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.transferId);
        /* string channel_address = 2; */
        if (message.channelAddress !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.channelAddress);
        /* string transfer_definition = 3; */
        if (message.transferDefinition !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.transferDefinition);
        /* string initiator = 4; */
        if (message.initiator !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.initiator);
        /* string responder = 5; */
        if (message.responder !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.responder);
        /* string initiator_identifier = 6; */
        if (message.initiatorIdentifier !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.initiatorIdentifier);
        /* string responder_identifier = 7; */
        if (message.responderIdentifier !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.responderIdentifier);
        /* string asset_id = 8; */
        if (message.assetId !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.assetId);
        /* com.vector.Balance balance = 9; */
        if (message.balance)
            Balance.internalBinaryWrite(message.balance, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* string transfer_timeout = 10; */
        if (message.transferTimeout !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.transferTimeout);
        /* string initial_state_hash = 11; */
        if (message.initialStateHash !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.initialStateHash);
        /* repeated string transfer_encodings = 12; */
        for (let i = 0; i < message.transferEncodings.length; i++)
            writer.tag(12, WireType.LengthDelimited).string(message.transferEncodings[i]);
        /* google.protobuf.Struct transfer_state = 13; */
        if (message.transferState)
            Struct.internalBinaryWrite(message.transferState, writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        /* optional google.protobuf.Struct transfer_resolver = 14; */
        if (message.transferResolver)
            Struct.internalBinaryWrite(message.transferResolver, writer.tag(14, WireType.LengthDelimited).fork(), options).join();
        /* bool in_dispute = 15; */
        if (message.inDispute !== false)
            writer.tag(15, WireType.Varint).bool(message.inDispute);
        /* int32 channel_nonce = 16; */
        if (message.channelNonce !== 0)
            writer.tag(16, WireType.Varint).int32(message.channelNonce);
        /* string channel_factory_address = 17; */
        if (message.channelFactoryAddress !== "")
            writer.tag(17, WireType.LengthDelimited).string(message.channelFactoryAddress);
        /* int32 chain_id = 18; */
        if (message.chainId !== 0)
            writer.tag(18, WireType.Varint).int32(message.chainId);
        /* optional google.protobuf.Struct meta = 19; */
        if (message.meta)
            Struct.internalBinaryWrite(message.meta, writer.tag(19, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.vector.FullTransferState
 */
export const FullTransferState = new FullTransferState$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FullTransferStates$Type extends MessageType<FullTransferStates> {
    constructor() {
        super("com.vector.FullTransferStates", [
            { no: 1, name: "full_transfer_states", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => FullTransferState }
        ]);
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FullTransferStates): FullTransferStates {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.vector.FullTransferState full_transfer_states */ 1:
                    message.fullTransferStates.push(FullTransferState.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FullTransferStates, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.vector.FullTransferState full_transfer_states = 1; */
        for (let i = 0; i < message.fullTransferStates.length; i++)
            FullTransferState.internalBinaryWrite(message.fullTransferStates[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.vector.FullTransferStates
 */
export const FullTransferStates = new FullTransferStates$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetRouterConfigRequest$Type extends MessageType<GetRouterConfigRequest> {
    constructor() {
        super("com.vector.GetRouterConfigRequest", [
            { no: 1, name: "public_identifier", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "router_identifier", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetRouterConfigRequest): GetRouterConfigRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string public_identifier */ 1:
                    message.publicIdentifier = reader.string();
                    break;
                case /* string router_identifier */ 2:
                    message.routerIdentifier = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetRouterConfigRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string public_identifier = 1; */
        if (message.publicIdentifier !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.publicIdentifier);
        /* string router_identifier = 2; */
        if (message.routerIdentifier !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.routerIdentifier);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.vector.GetRouterConfigRequest
 */
export const GetRouterConfigRequest = new GetRouterConfigRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ConditionalTransferRequest$Type extends MessageType<ConditionalTransferRequest> {
    constructor() {
        super("com.vector.ConditionalTransferRequest", [
            { no: 1, name: "public_identifier", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "channel_address", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "amount", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "asset_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "recipient", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "recipient_chainId", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 7, name: "recipient_assetId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "timeout", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "details", kind: "message", T: () => Struct },
            { no: 11, name: "meta", kind: "message", T: () => Struct }
        ]);
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ConditionalTransferRequest): ConditionalTransferRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string public_identifier */ 1:
                    message.publicIdentifier = reader.string();
                    break;
                case /* string channel_address */ 2:
                    message.channelAddress = reader.string();
                    break;
                case /* string amount */ 3:
                    message.amount = reader.string();
                    break;
                case /* string asset_id */ 4:
                    message.assetId = reader.string();
                    break;
                case /* string recipient */ 5:
                    message.recipient = reader.string();
                    break;
                case /* int32 recipient_chainId */ 6:
                    message.recipientChainId = reader.int32();
                    break;
                case /* string recipient_assetId */ 7:
                    message.recipientAssetId = reader.string();
                    break;
                case /* string timeout */ 8:
                    message.timeout = reader.string();
                    break;
                case /* string type */ 9:
                    message.type = reader.string();
                    break;
                case /* google.protobuf.Struct details */ 10:
                    message.details = Struct.internalBinaryRead(reader, reader.uint32(), options, message.details);
                    break;
                case /* optional google.protobuf.Struct meta */ 11:
                    message.meta = Struct.internalBinaryRead(reader, reader.uint32(), options, message.meta);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ConditionalTransferRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string public_identifier = 1; */
        if (message.publicIdentifier !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.publicIdentifier);
        /* string channel_address = 2; */
        if (message.channelAddress !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.channelAddress);
        /* string amount = 3; */
        if (message.amount !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.amount);
        /* string asset_id = 4; */
        if (message.assetId !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.assetId);
        /* string recipient = 5; */
        if (message.recipient !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.recipient);
        /* int32 recipient_chainId = 6; */
        if (message.recipientChainId !== 0)
            writer.tag(6, WireType.Varint).int32(message.recipientChainId);
        /* string recipient_assetId = 7; */
        if (message.recipientAssetId !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.recipientAssetId);
        /* string timeout = 8; */
        if (message.timeout !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.timeout);
        /* string type = 9; */
        if (message.type !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.type);
        /* google.protobuf.Struct details = 10; */
        if (message.details)
            Struct.internalBinaryWrite(message.details, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* optional google.protobuf.Struct meta = 11; */
        if (message.meta)
            Struct.internalBinaryWrite(message.meta, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.vector.ConditionalTransferRequest
 */
export const ConditionalTransferRequest = new ConditionalTransferRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CollateralRequest$Type extends MessageType<CollateralRequest> {
    constructor() {
        super("com.vector.CollateralRequest", [
            { no: 1, name: "public_identifier", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "channel_address", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "asset_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "amount", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CollateralRequest): CollateralRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string public_identifier */ 1:
                    message.publicIdentifier = reader.string();
                    break;
                case /* string channel_address */ 2:
                    message.channelAddress = reader.string();
                    break;
                case /* string asset_id */ 3:
                    message.assetId = reader.string();
                    break;
                case /* string amount */ 4:
                    message.amount = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CollateralRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string public_identifier = 1; */
        if (message.publicIdentifier !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.publicIdentifier);
        /* string channel_address = 2; */
        if (message.channelAddress !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.channelAddress);
        /* string asset_id = 3; */
        if (message.assetId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.assetId);
        /* string amount = 4; */
        if (message.amount !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.amount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.vector.CollateralRequest
 */
export const CollateralRequest = new CollateralRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DepositRequest$Type extends MessageType<DepositRequest> {
    constructor() {
        super("com.vector.DepositRequest", [
            { no: 1, name: "public_identifier", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "channel_address", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "asset_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "meta", kind: "message", T: () => Struct }
        ]);
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DepositRequest): DepositRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string public_identifier */ 1:
                    message.publicIdentifier = reader.string();
                    break;
                case /* string channel_address */ 2:
                    message.channelAddress = reader.string();
                    break;
                case /* string asset_id */ 3:
                    message.assetId = reader.string();
                    break;
                case /* optional google.protobuf.Struct meta */ 4:
                    message.meta = Struct.internalBinaryRead(reader, reader.uint32(), options, message.meta);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DepositRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string public_identifier = 1; */
        if (message.publicIdentifier !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.publicIdentifier);
        /* string channel_address = 2; */
        if (message.channelAddress !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.channelAddress);
        /* string asset_id = 3; */
        if (message.assetId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.assetId);
        /* optional google.protobuf.Struct meta = 4; */
        if (message.meta)
            Struct.internalBinaryWrite(message.meta, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.vector.DepositRequest
 */
export const DepositRequest = new DepositRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TransferRequest$Type extends MessageType<TransferRequest> {
    constructor() {
        super("com.vector.TransferRequest", [
            { no: 1, name: "public_identifier", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "transfer_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TransferRequest): TransferRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string public_identifier */ 1:
                    message.publicIdentifier = reader.string();
                    break;
                case /* string transfer_id */ 2:
                    message.transferId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TransferRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string public_identifier = 1; */
        if (message.publicIdentifier !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.publicIdentifier);
        /* string transfer_id = 2; */
        if (message.transferId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.transferId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.vector.TransferRequest
 */
export const TransferRequest = new TransferRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChannelStateRequest$Type extends MessageType<ChannelStateRequest> {
    constructor() {
        super("com.vector.ChannelStateRequest", [
            { no: 1, name: "public_identifier", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "channel_address", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChannelStateRequest): ChannelStateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string public_identifier */ 1:
                    message.publicIdentifier = reader.string();
                    break;
                case /* string channel_address */ 2:
                    message.channelAddress = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChannelStateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string public_identifier = 1; */
        if (message.publicIdentifier !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.publicIdentifier);
        /* string channel_address = 2; */
        if (message.channelAddress !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.channelAddress);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.vector.ChannelStateRequest
 */
export const ChannelStateRequest = new ChannelStateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DepositTxRequest$Type extends MessageType<DepositTxRequest> {
    constructor() {
        super("com.vector.DepositTxRequest", [
            { no: 1, name: "channel_address", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "amount", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "asset_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "chain_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "public_identifier", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DepositTxRequest): DepositTxRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string channel_address */ 1:
                    message.channelAddress = reader.string();
                    break;
                case /* string amount */ 2:
                    message.amount = reader.string();
                    break;
                case /* string asset_id */ 3:
                    message.assetId = reader.string();
                    break;
                case /* int32 chain_id */ 4:
                    message.chainId = reader.int32();
                    break;
                case /* string public_identifier */ 5:
                    message.publicIdentifier = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DepositTxRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string channel_address = 1; */
        if (message.channelAddress !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.channelAddress);
        /* string amount = 2; */
        if (message.amount !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.amount);
        /* string asset_id = 3; */
        if (message.assetId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.assetId);
        /* int32 chain_id = 4; */
        if (message.chainId !== 0)
            writer.tag(4, WireType.Varint).int32(message.chainId);
        /* string public_identifier = 5; */
        if (message.publicIdentifier !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.publicIdentifier);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.vector.DepositTxRequest
 */
export const DepositTxRequest = new DepositTxRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetupRequest$Type extends MessageType<SetupRequest> {
    constructor() {
        super("com.vector.SetupRequest", [
            { no: 1, name: "public_identifier", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "counterparty_identifier", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "chain_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "timeout", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "meta", kind: "message", T: () => Struct }
        ]);
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetupRequest): SetupRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string public_identifier */ 1:
                    message.publicIdentifier = reader.string();
                    break;
                case /* string counterparty_identifier */ 2:
                    message.counterpartyIdentifier = reader.string();
                    break;
                case /* int32 chain_id */ 3:
                    message.chainId = reader.int32();
                    break;
                case /* string timeout */ 4:
                    message.timeout = reader.string();
                    break;
                case /* optional google.protobuf.Struct meta */ 5:
                    message.meta = Struct.internalBinaryRead(reader, reader.uint32(), options, message.meta);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetupRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string public_identifier = 1; */
        if (message.publicIdentifier !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.publicIdentifier);
        /* string counterparty_identifier = 2; */
        if (message.counterpartyIdentifier !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.counterpartyIdentifier);
        /* int32 chain_id = 3; */
        if (message.chainId !== 0)
            writer.tag(3, WireType.Varint).int32(message.chainId);
        /* string timeout = 4; */
        if (message.timeout !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.timeout);
        /* optional google.protobuf.Struct meta = 5; */
        if (message.meta)
            Struct.internalBinaryWrite(message.meta, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.vector.SetupRequest
 */
export const SetupRequest = new SetupRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RegisteredTransfersRequest$Type extends MessageType<RegisteredTransfersRequest> {
    constructor() {
        super("com.vector.RegisteredTransfersRequest", [
            { no: 1, name: "public_identifier", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "chain_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RegisteredTransfersRequest): RegisteredTransfersRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string public_identifier */ 1:
                    message.publicIdentifier = reader.string();
                    break;
                case /* int32 chain_id */ 2:
                    message.chainId = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RegisteredTransfersRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string public_identifier = 1; */
        if (message.publicIdentifier !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.publicIdentifier);
        /* int32 chain_id = 2; */
        if (message.chainId !== 0)
            writer.tag(2, WireType.Varint).int32(message.chainId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.vector.RegisteredTransfersRequest
 */
export const RegisteredTransfersRequest = new RegisteredTransfersRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ActiveTransfersRequest$Type extends MessageType<ActiveTransfersRequest> {
    constructor() {
        super("com.vector.ActiveTransfersRequest", [
            { no: 1, name: "public_identifier", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "channel_address", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ActiveTransfersRequest): ActiveTransfersRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string public_identifier */ 1:
                    message.publicIdentifier = reader.string();
                    break;
                case /* string channel_address */ 2:
                    message.channelAddress = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ActiveTransfersRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string public_identifier = 1; */
        if (message.publicIdentifier !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.publicIdentifier);
        /* string channel_address = 2; */
        if (message.channelAddress !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.channelAddress);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.vector.ActiveTransfersRequest
 */
export const ActiveTransfersRequest = new ActiveTransfersRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TransferStateByRoutingIdRequest$Type extends MessageType<TransferStateByRoutingIdRequest> {
    constructor() {
        super("com.vector.TransferStateByRoutingIdRequest", [
            { no: 1, name: "public_identifier", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "channel_address", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "routing_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TransferStateByRoutingIdRequest): TransferStateByRoutingIdRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string public_identifier */ 1:
                    message.publicIdentifier = reader.string();
                    break;
                case /* string channel_address */ 2:
                    message.channelAddress = reader.string();
                    break;
                case /* string routing_id */ 3:
                    message.routingId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TransferStateByRoutingIdRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string public_identifier = 1; */
        if (message.publicIdentifier !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.publicIdentifier);
        /* string channel_address = 2; */
        if (message.channelAddress !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.channelAddress);
        /* string routing_id = 3; */
        if (message.routingId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.routingId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.vector.TransferStateByRoutingIdRequest
 */
export const TransferStateByRoutingIdRequest = new TransferStateByRoutingIdRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TransferStatesByRoutingIdRequest$Type extends MessageType<TransferStatesByRoutingIdRequest> {
    constructor() {
        super("com.vector.TransferStatesByRoutingIdRequest", [
            { no: 1, name: "public_identifier", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "routing_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TransferStatesByRoutingIdRequest): TransferStatesByRoutingIdRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string public_identifier */ 1:
                    message.publicIdentifier = reader.string();
                    break;
                case /* string routing_id */ 2:
                    message.routingId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TransferStatesByRoutingIdRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string public_identifier = 1; */
        if (message.publicIdentifier !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.publicIdentifier);
        /* string routing_id = 2; */
        if (message.routingId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.routingId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.vector.TransferStatesByRoutingIdRequest
 */
export const TransferStatesByRoutingIdRequest = new TransferStatesByRoutingIdRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TransfersRequest$Type extends MessageType<TransfersRequest> {
    constructor() {
        super("com.vector.TransfersRequest", [
            { no: 1, name: "public_identifier", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "transfer_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TransfersRequest): TransfersRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string public_identifier */ 1:
                    message.publicIdentifier = reader.string();
                    break;
                case /* string transfer_id */ 2:
                    message.transferId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TransfersRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string public_identifier = 1; */
        if (message.publicIdentifier !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.publicIdentifier);
        /* string transfer_id = 2; */
        if (message.transferId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.transferId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.vector.TransfersRequest
 */
export const TransfersRequest = new TransfersRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChannelStateByParticipantsRequest$Type extends MessageType<ChannelStateByParticipantsRequest> {
    constructor() {
        super("com.vector.ChannelStateByParticipantsRequest", [
            { no: 1, name: "public_identifier", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "counterparty", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "chain_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChannelStateByParticipantsRequest): ChannelStateByParticipantsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string public_identifier */ 1:
                    message.publicIdentifier = reader.string();
                    break;
                case /* string counterparty */ 2:
                    message.counterparty = reader.string();
                    break;
                case /* int32 chain_id */ 3:
                    message.chainId = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChannelStateByParticipantsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string public_identifier = 1; */
        if (message.publicIdentifier !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.publicIdentifier);
        /* string counterparty = 2; */
        if (message.counterparty !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.counterparty);
        /* int32 chain_id = 3; */
        if (message.chainId !== 0)
            writer.tag(3, WireType.Varint).int32(message.chainId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.vector.ChannelStateByParticipantsRequest
 */
export const ChannelStateByParticipantsRequest = new ChannelStateByParticipantsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WithdrawRequest$Type extends MessageType<WithdrawRequest> {
    constructor() {
        super("com.vector.WithdrawRequest", [
            { no: 1, name: "public_identifier", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "channel_address", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "amount", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "asset_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "recipient", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "fee", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "call_to", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "call_data", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "meta", kind: "message", T: () => Struct }
        ]);
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WithdrawRequest): WithdrawRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string public_identifier */ 1:
                    message.publicIdentifier = reader.string();
                    break;
                case /* string channel_address */ 2:
                    message.channelAddress = reader.string();
                    break;
                case /* string amount */ 3:
                    message.amount = reader.string();
                    break;
                case /* string asset_id */ 4:
                    message.assetId = reader.string();
                    break;
                case /* string recipient */ 5:
                    message.recipient = reader.string();
                    break;
                case /* string fee */ 6:
                    message.fee = reader.string();
                    break;
                case /* string call_to */ 7:
                    message.callTo = reader.string();
                    break;
                case /* string call_data */ 8:
                    message.callData = reader.string();
                    break;
                case /* optional google.protobuf.Struct meta */ 9:
                    message.meta = Struct.internalBinaryRead(reader, reader.uint32(), options, message.meta);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WithdrawRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string public_identifier = 1; */
        if (message.publicIdentifier !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.publicIdentifier);
        /* string channel_address = 2; */
        if (message.channelAddress !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.channelAddress);
        /* string amount = 3; */
        if (message.amount !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.amount);
        /* string asset_id = 4; */
        if (message.assetId !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.assetId);
        /* string recipient = 5; */
        if (message.recipient !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.recipient);
        /* string fee = 6; */
        if (message.fee !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.fee);
        /* string call_to = 7; */
        if (message.callTo !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.callTo);
        /* string call_data = 8; */
        if (message.callData !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.callData);
        /* optional google.protobuf.Struct meta = 9; */
        if (message.meta)
            Struct.internalBinaryWrite(message.meta, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.vector.WithdrawRequest
 */
export const WithdrawRequest = new WithdrawRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResolveTransferRequest$Type extends MessageType<ResolveTransferRequest> {
    constructor() {
        super("com.vector.ResolveTransferRequest", [
            { no: 1, name: "public_identifier", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "channel_address", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "transfer_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "transfer_resolver", kind: "message", T: () => Struct },
            { no: 5, name: "meta", kind: "message", T: () => Struct }
        ]);
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResolveTransferRequest): ResolveTransferRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string public_identifier */ 1:
                    message.publicIdentifier = reader.string();
                    break;
                case /* string channel_address */ 2:
                    message.channelAddress = reader.string();
                    break;
                case /* string transfer_id */ 3:
                    message.transferId = reader.string();
                    break;
                case /* google.protobuf.Struct transfer_resolver */ 4:
                    message.transferResolver = Struct.internalBinaryRead(reader, reader.uint32(), options, message.transferResolver);
                    break;
                case /* optional google.protobuf.Struct meta */ 5:
                    message.meta = Struct.internalBinaryRead(reader, reader.uint32(), options, message.meta);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResolveTransferRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string public_identifier = 1; */
        if (message.publicIdentifier !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.publicIdentifier);
        /* string channel_address = 2; */
        if (message.channelAddress !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.channelAddress);
        /* string transfer_id = 3; */
        if (message.transferId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.transferId);
        /* google.protobuf.Struct transfer_resolver = 4; */
        if (message.transferResolver)
            Struct.internalBinaryWrite(message.transferResolver, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* optional google.protobuf.Struct meta = 5; */
        if (message.meta)
            Struct.internalBinaryWrite(message.meta, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.vector.ResolveTransferRequest
 */
export const ResolveTransferRequest = new ResolveTransferRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Body$Type extends MessageType<Body> {
    constructor() {
        super("com.vector.Body", [
            { no: 1, name: "method", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "params", kind: "message", T: () => Struct }
        ]);
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Body): Body {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string method */ 1:
                    message.method = reader.string();
                    break;
                case /* google.protobuf.Struct params */ 2:
                    message.params = Struct.internalBinaryRead(reader, reader.uint32(), options, message.params);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Body, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string method = 1; */
        if (message.method !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.method);
        /* google.protobuf.Struct params = 2; */
        if (message.params)
            Struct.internalBinaryWrite(message.params, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.vector.Body
 */
export const Body = new Body$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EthProviderRequest$Type extends MessageType<EthProviderRequest> {
    constructor() {
        super("com.vector.EthProviderRequest", [
            { no: 1, name: "chain_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "body", kind: "message", T: () => Body }
        ]);
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EthProviderRequest): EthProviderRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 chain_id */ 1:
                    message.chainId = reader.int32();
                    break;
                case /* com.vector.Body body */ 2:
                    message.body = Body.internalBinaryRead(reader, reader.uint32(), options, message.body);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EthProviderRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 chain_id = 1; */
        if (message.chainId !== 0)
            writer.tag(1, WireType.Varint).int32(message.chainId);
        /* com.vector.Body body = 2; */
        if (message.body)
            Body.internalBinaryWrite(message.body, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.vector.EthProviderRequest
 */
export const EthProviderRequest = new EthProviderRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RestoreStateReply$Type extends MessageType<RestoreStateReply> {
    constructor() {
        super("com.vector.RestoreStateReply", [
            { no: 1, name: "channel_address", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RestoreStateReply): RestoreStateReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string channel_address */ 1:
                    message.channelAddress = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RestoreStateReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string channel_address = 1; */
        if (message.channelAddress !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.channelAddress);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.vector.RestoreStateReply
 */
export const RestoreStateReply = new RestoreStateReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WithdrawReply$Type extends MessageType<WithdrawReply> {
    constructor() {
        super("com.vector.WithdrawReply", [
            { no: 1, name: "channel_address", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "transfer_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "transaction_hash", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WithdrawReply): WithdrawReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string channel_address */ 1:
                    message.channelAddress = reader.string();
                    break;
                case /* string transfer_id */ 2:
                    message.transferId = reader.string();
                    break;
                case /* string transaction_hash */ 3:
                    message.transactionHash = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WithdrawReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string channel_address = 1; */
        if (message.channelAddress !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.channelAddress);
        /* string transfer_id = 2; */
        if (message.transferId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.transferId);
        /* string transaction_hash = 3; */
        if (message.transactionHash !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.transactionHash);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.vector.WithdrawReply
 */
export const WithdrawReply = new WithdrawReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EthProviderReply$Type extends MessageType<EthProviderReply> {
    constructor() {
        super("com.vector.EthProviderReply", [
            { no: 1, name: "response", kind: "message", T: () => Struct }
        ]);
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EthProviderReply): EthProviderReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.Struct response */ 1:
                    message.response = Struct.internalBinaryRead(reader, reader.uint32(), options, message.response);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EthProviderReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.protobuf.Struct response = 1; */
        if (message.response)
            Struct.internalBinaryWrite(message.response, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.vector.EthProviderReply
 */
export const EthProviderReply = new EthProviderReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Configs$Type extends MessageType<Configs> {
    constructor() {
        super("com.vector.Configs", [
            { no: 1, name: "config", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Config }
        ]);
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Configs): Configs {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.vector.Config config */ 1:
                    message.config.push(Config.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Configs, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.vector.Config config = 1; */
        for (let i = 0; i < message.config.length; i++)
            Config.internalBinaryWrite(message.config[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.vector.Configs
 */
export const Configs = new Configs$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Config$Type extends MessageType<Config> {
    constructor() {
        super("com.vector.Config", [
            { no: 1, name: "index", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "public_identifier", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "signer_address", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Config): Config {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 index */ 1:
                    message.index = reader.int32();
                    break;
                case /* string public_identifier */ 2:
                    message.publicIdentifier = reader.string();
                    break;
                case /* string signer_address */ 3:
                    message.signerAddress = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Config, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 index = 1; */
        if (message.index !== 0)
            writer.tag(1, WireType.Varint).int32(message.index);
        /* string public_identifier = 2; */
        if (message.publicIdentifier !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.publicIdentifier);
        /* string signer_address = 3; */
        if (message.signerAddress !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.signerAddress);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.vector.Config
 */
export const Config = new Config$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AllowedSwaps$Type extends MessageType<AllowedSwaps> {
    constructor() {
        super("com.vector.AllowedSwaps", [
            { no: 1, name: "from_chain_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "to_chain_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "from_asset_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "to_asset_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "price_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "hardcoded_rate", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AllowedSwaps): AllowedSwaps {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 from_chain_id */ 1:
                    message.fromChainId = reader.int32();
                    break;
                case /* int32 to_chain_id */ 2:
                    message.toChainId = reader.int32();
                    break;
                case /* string from_asset_id */ 3:
                    message.fromAssetId = reader.string();
                    break;
                case /* string to_asset_id */ 4:
                    message.toAssetId = reader.string();
                    break;
                case /* string price_type */ 5:
                    message.priceType = reader.string();
                    break;
                case /* string hardcoded_rate */ 6:
                    message.hardcodedRate = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AllowedSwaps, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 from_chain_id = 1; */
        if (message.fromChainId !== 0)
            writer.tag(1, WireType.Varint).int32(message.fromChainId);
        /* int32 to_chain_id = 2; */
        if (message.toChainId !== 0)
            writer.tag(2, WireType.Varint).int32(message.toChainId);
        /* string from_asset_id = 3; */
        if (message.fromAssetId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.fromAssetId);
        /* string to_asset_id = 4; */
        if (message.toAssetId !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.toAssetId);
        /* string price_type = 5; */
        if (message.priceType !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.priceType);
        /* string hardcoded_rate = 6; */
        if (message.hardcodedRate !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.hardcodedRate);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.vector.AllowedSwaps
 */
export const AllowedSwaps = new AllowedSwaps$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RouterConfig$Type extends MessageType<RouterConfig> {
    constructor() {
        super("com.vector.RouterConfig", [
            { no: 1, name: "supported_chains", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "allowed_swaps", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => AllowedSwaps }
        ]);
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RouterConfig): RouterConfig {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated int32 supported_chains */ 1:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.supportedChains.push(reader.int32());
                    else
                        message.supportedChains.push(reader.int32());
                    break;
                case /* repeated com.vector.AllowedSwaps allowed_swaps */ 2:
                    message.allowedSwaps.push(AllowedSwaps.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RouterConfig, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated int32 supported_chains = 1; */
        if (message.supportedChains.length) {
            writer.tag(1, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.supportedChains.length; i++)
                writer.int32(message.supportedChains[i]);
            writer.join();
        }
        /* repeated com.vector.AllowedSwaps allowed_swaps = 2; */
        for (let i = 0; i < message.allowedSwaps.length; i++)
            AllowedSwaps.internalBinaryWrite(message.allowedSwaps[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.vector.RouterConfig
 */
export const RouterConfig = new RouterConfig$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ProviderSyncing$Type extends MessageType<ProviderSyncing> {
    constructor() {
        super("com.vector.ProviderSyncing", [
            { no: 1, name: "syncing", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "starting_block", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "current_block", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "highest_block", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ProviderSyncing): ProviderSyncing {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool syncing */ 1:
                    message.syncing = reader.bool();
                    break;
                case /* string starting_block */ 2:
                    message.startingBlock = reader.string();
                    break;
                case /* string current_block */ 3:
                    message.currentBlock = reader.string();
                    break;
                case /* string highest_block */ 4:
                    message.highestBlock = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ProviderSyncing, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool syncing = 1; */
        if (message.syncing !== false)
            writer.tag(1, WireType.Varint).bool(message.syncing);
        /* string starting_block = 2; */
        if (message.startingBlock !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.startingBlock);
        /* string current_block = 3; */
        if (message.currentBlock !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.currentBlock);
        /* string highest_block = 4; */
        if (message.highestBlock !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.highestBlock);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.vector.ProviderSyncing
 */
export const ProviderSyncing = new ProviderSyncing$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Status$Type extends MessageType<Status> {
    constructor() {
        super("com.vector.Status", [
            { no: 1, name: "provider_syncing", kind: "map", K: 5 /*ScalarType.INT32*/, V: { kind: "message", T: () => ProviderSyncing } },
            { no: 2, name: "public_identifier", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "signer_address", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "version", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Status): Status {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* map<int32, com.vector.ProviderSyncing> provider_syncing */ 1:
                    this.binaryReadMap1(message.providerSyncing, reader, options);
                    break;
                case /* string public_identifier */ 2:
                    message.publicIdentifier = reader.string();
                    break;
                case /* string signer_address */ 3:
                    message.signerAddress = reader.string();
                    break;
                case /* string version */ 4:
                    message.version = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap1(map: Status["providerSyncing"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof Status["providerSyncing"] | undefined, val: Status["providerSyncing"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.int32();
                    break;
                case 2:
                    val = ProviderSyncing.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.vector.Status.provider_syncing");
            }
        }
        map[key ?? 0] = val ?? ProviderSyncing.create();
    }
    internalBinaryWrite(message: Status, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* map<int32, com.vector.ProviderSyncing> provider_syncing = 1; */
        for (let k of Object.keys(message.providerSyncing)) {
            writer.tag(1, WireType.LengthDelimited).fork().tag(1, WireType.Varint).int32(parseInt(k));
            writer.tag(2, WireType.LengthDelimited).fork();
            ProviderSyncing.internalBinaryWrite(message.providerSyncing[k as any], writer, options);
            writer.join().join();
        }
        /* string public_identifier = 2; */
        if (message.publicIdentifier !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.publicIdentifier);
        /* string signer_address = 3; */
        if (message.signerAddress !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.signerAddress);
        /* string version = 4; */
        if (message.version !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.version);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.vector.Status
 */
export const Status = new Status$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RegisteredTransfer$Type extends MessageType<RegisteredTransfer> {
    constructor() {
        super("com.vector.RegisteredTransfer", [
            { no: 1, name: "state_encoding", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "resolver_encoding", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "definition", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "encoded_cancel", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RegisteredTransfer): RegisteredTransfer {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string state_encoding */ 1:
                    message.stateEncoding = reader.string();
                    break;
                case /* string resolver_encoding */ 2:
                    message.resolverEncoding = reader.string();
                    break;
                case /* string definition */ 3:
                    message.definition = reader.string();
                    break;
                case /* string name */ 4:
                    message.name = reader.string();
                    break;
                case /* string encoded_cancel */ 5:
                    message.encodedCancel = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RegisteredTransfer, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string state_encoding = 1; */
        if (message.stateEncoding !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.stateEncoding);
        /* string resolver_encoding = 2; */
        if (message.resolverEncoding !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.resolverEncoding);
        /* string definition = 3; */
        if (message.definition !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.definition);
        /* string name = 4; */
        if (message.name !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.name);
        /* string encoded_cancel = 5; */
        if (message.encodedCancel !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.encodedCancel);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.vector.RegisteredTransfer
 */
export const RegisteredTransfer = new RegisteredTransfer$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RegisteredTransfers$Type extends MessageType<RegisteredTransfers> {
    constructor() {
        super("com.vector.RegisteredTransfers", [
            { no: 1, name: "registered_transfer", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => RegisteredTransfer }
        ]);
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RegisteredTransfers): RegisteredTransfers {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.vector.RegisteredTransfer registered_transfer */ 1:
                    message.registeredTransfer.push(RegisteredTransfer.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RegisteredTransfers, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.vector.RegisteredTransfer registered_transfer = 1; */
        for (let i = 0; i < message.registeredTransfer.length; i++)
            RegisteredTransfer.internalBinaryWrite(message.registeredTransfer[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.vector.RegisteredTransfers
 */
export const RegisteredTransfers = new RegisteredTransfers$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IsAlivePayload$Type extends MessageType<IsAlivePayload> {
    constructor() {
        super("com.vector.IsAlivePayload", [
            { no: 1, name: "channel_address", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "alice_identifier", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "bob_identifier", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "chain_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "skip_check_in", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IsAlivePayload): IsAlivePayload {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string channel_address */ 1:
                    message.channelAddress = reader.string();
                    break;
                case /* string alice_identifier */ 2:
                    message.aliceIdentifier = reader.string();
                    break;
                case /* string bob_identifier */ 3:
                    message.bobIdentifier = reader.string();
                    break;
                case /* int32 chain_id */ 4:
                    message.chainId = reader.int32();
                    break;
                case /* optional bool skip_check_in */ 5:
                    message.skipCheckIn = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IsAlivePayload, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string channel_address = 1; */
        if (message.channelAddress !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.channelAddress);
        /* string alice_identifier = 2; */
        if (message.aliceIdentifier !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.aliceIdentifier);
        /* string bob_identifier = 3; */
        if (message.bobIdentifier !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.bobIdentifier);
        /* int32 chain_id = 4; */
        if (message.chainId !== 0)
            writer.tag(4, WireType.Varint).int32(message.chainId);
        /* optional bool skip_check_in = 5; */
        if (message.skipCheckIn !== undefined)
            writer.tag(5, WireType.Varint).bool(message.skipCheckIn);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.vector.IsAlivePayload
 */
export const IsAlivePayload = new IsAlivePayload$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetupPayload$Type extends MessageType<SetupPayload> {
    constructor() {
        super("com.vector.SetupPayload", [
            { no: 1, name: "channel_address", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "alice_identifier", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "bob_identifier", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "chain_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "meta", kind: "message", T: () => Struct }
        ]);
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetupPayload): SetupPayload {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string channel_address */ 1:
                    message.channelAddress = reader.string();
                    break;
                case /* string alice_identifier */ 2:
                    message.aliceIdentifier = reader.string();
                    break;
                case /* string bob_identifier */ 3:
                    message.bobIdentifier = reader.string();
                    break;
                case /* int32 chain_id */ 4:
                    message.chainId = reader.int32();
                    break;
                case /* optional google.protobuf.Struct meta */ 5:
                    message.meta = Struct.internalBinaryRead(reader, reader.uint32(), options, message.meta);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetupPayload, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string channel_address = 1; */
        if (message.channelAddress !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.channelAddress);
        /* string alice_identifier = 2; */
        if (message.aliceIdentifier !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.aliceIdentifier);
        /* string bob_identifier = 3; */
        if (message.bobIdentifier !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.bobIdentifier);
        /* int32 chain_id = 4; */
        if (message.chainId !== 0)
            writer.tag(4, WireType.Varint).int32(message.chainId);
        /* optional google.protobuf.Struct meta = 5; */
        if (message.meta)
            Struct.internalBinaryWrite(message.meta, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.vector.SetupPayload
 */
export const SetupPayload = new SetupPayload$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ConditionalTransferCreatedPayload$Type extends MessageType<ConditionalTransferCreatedPayload> {
    constructor() {
        super("com.vector.ConditionalTransferCreatedPayload", [
            { no: 1, name: "channel_address", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "alice_identifier", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "bob_identifier", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "transfer", kind: "message", T: () => FullTransferState },
            { no: 5, name: "channel_balance", kind: "message", T: () => Balance },
            { no: 6, name: "condition_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "active_transfer_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "meta", kind: "message", T: () => Struct }
        ]);
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ConditionalTransferCreatedPayload): ConditionalTransferCreatedPayload {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string channel_address */ 1:
                    message.channelAddress = reader.string();
                    break;
                case /* string alice_identifier */ 2:
                    message.aliceIdentifier = reader.string();
                    break;
                case /* string bob_identifier */ 3:
                    message.bobIdentifier = reader.string();
                    break;
                case /* com.vector.FullTransferState transfer */ 4:
                    message.transfer = FullTransferState.internalBinaryRead(reader, reader.uint32(), options, message.transfer);
                    break;
                case /* com.vector.Balance channel_balance */ 5:
                    message.channelBalance = Balance.internalBinaryRead(reader, reader.uint32(), options, message.channelBalance);
                    break;
                case /* string condition_type */ 6:
                    message.conditionType = reader.string();
                    break;
                case /* repeated string active_transfer_ids */ 7:
                    message.activeTransferIds.push(reader.string());
                    break;
                case /* optional google.protobuf.Struct meta */ 8:
                    message.meta = Struct.internalBinaryRead(reader, reader.uint32(), options, message.meta);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ConditionalTransferCreatedPayload, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string channel_address = 1; */
        if (message.channelAddress !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.channelAddress);
        /* string alice_identifier = 2; */
        if (message.aliceIdentifier !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.aliceIdentifier);
        /* string bob_identifier = 3; */
        if (message.bobIdentifier !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.bobIdentifier);
        /* com.vector.FullTransferState transfer = 4; */
        if (message.transfer)
            FullTransferState.internalBinaryWrite(message.transfer, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* com.vector.Balance channel_balance = 5; */
        if (message.channelBalance)
            Balance.internalBinaryWrite(message.channelBalance, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* string condition_type = 6; */
        if (message.conditionType !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.conditionType);
        /* repeated string active_transfer_ids = 7; */
        for (let i = 0; i < message.activeTransferIds.length; i++)
            writer.tag(7, WireType.LengthDelimited).string(message.activeTransferIds[i]);
        /* optional google.protobuf.Struct meta = 8; */
        if (message.meta)
            Struct.internalBinaryWrite(message.meta, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.vector.ConditionalTransferCreatedPayload
 */
export const ConditionalTransferCreatedPayload = new ConditionalTransferCreatedPayload$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DepositReconciledPayload$Type extends MessageType<DepositReconciledPayload> {
    constructor() {
        super("com.vector.DepositReconciledPayload", [
            { no: 1, name: "channel_address", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "alice_identifier", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "bob_identifier", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "asset_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "channel_balance", kind: "message", T: () => Balance },
            { no: 6, name: "meta", kind: "message", T: () => Struct }
        ]);
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DepositReconciledPayload): DepositReconciledPayload {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string channel_address */ 1:
                    message.channelAddress = reader.string();
                    break;
                case /* string alice_identifier */ 2:
                    message.aliceIdentifier = reader.string();
                    break;
                case /* string bob_identifier */ 3:
                    message.bobIdentifier = reader.string();
                    break;
                case /* string asset_id */ 4:
                    message.assetId = reader.string();
                    break;
                case /* com.vector.Balance channel_balance */ 5:
                    message.channelBalance = Balance.internalBinaryRead(reader, reader.uint32(), options, message.channelBalance);
                    break;
                case /* optional google.protobuf.Struct meta */ 6:
                    message.meta = Struct.internalBinaryRead(reader, reader.uint32(), options, message.meta);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DepositReconciledPayload, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string channel_address = 1; */
        if (message.channelAddress !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.channelAddress);
        /* string alice_identifier = 2; */
        if (message.aliceIdentifier !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.aliceIdentifier);
        /* string bob_identifier = 3; */
        if (message.bobIdentifier !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.bobIdentifier);
        /* string asset_id = 4; */
        if (message.assetId !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.assetId);
        /* com.vector.Balance channel_balance = 5; */
        if (message.channelBalance)
            Balance.internalBinaryWrite(message.channelBalance, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* optional google.protobuf.Struct meta = 6; */
        if (message.meta)
            Struct.internalBinaryWrite(message.meta, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.vector.DepositReconciledPayload
 */
export const DepositReconciledPayload = new DepositReconciledPayload$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RequestCollateralPayload$Type extends MessageType<RequestCollateralPayload> {
    constructor() {
        super("com.vector.RequestCollateralPayload", [
            { no: 1, name: "channel_address", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "alice_identifier", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "bob_identifier", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "asset_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "amount", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "meta", kind: "message", T: () => Struct }
        ]);
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RequestCollateralPayload): RequestCollateralPayload {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string channel_address */ 1:
                    message.channelAddress = reader.string();
                    break;
                case /* string alice_identifier */ 2:
                    message.aliceIdentifier = reader.string();
                    break;
                case /* string bob_identifier */ 3:
                    message.bobIdentifier = reader.string();
                    break;
                case /* string asset_id */ 4:
                    message.assetId = reader.string();
                    break;
                case /* optional string amount */ 5:
                    message.amount = reader.string();
                    break;
                case /* optional google.protobuf.Struct meta */ 6:
                    message.meta = Struct.internalBinaryRead(reader, reader.uint32(), options, message.meta);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RequestCollateralPayload, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string channel_address = 1; */
        if (message.channelAddress !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.channelAddress);
        /* string alice_identifier = 2; */
        if (message.aliceIdentifier !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.aliceIdentifier);
        /* string bob_identifier = 3; */
        if (message.bobIdentifier !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.bobIdentifier);
        /* string asset_id = 4; */
        if (message.assetId !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.assetId);
        /* optional string amount = 5; */
        if (message.amount !== undefined)
            writer.tag(5, WireType.LengthDelimited).string(message.amount);
        /* optional google.protobuf.Struct meta = 6; */
        if (message.meta)
            Struct.internalBinaryWrite(message.meta, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.vector.RequestCollateralPayload
 */
export const RequestCollateralPayload = new RequestCollateralPayload$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WithdrawalCreatedPayload$Type extends MessageType<WithdrawalCreatedPayload> {
    constructor() {
        super("com.vector.WithdrawalCreatedPayload", [
            { no: 1, name: "channel_address", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "alice_identifier", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "bob_identifier", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "transfer", kind: "message", T: () => FullTransferState },
            { no: 5, name: "fee", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "asset_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "amount", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "recipient", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "call_to", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "call_data", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "channel_balance", kind: "message", T: () => Balance },
            { no: 12, name: "meta", kind: "message", T: () => Struct }
        ]);
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WithdrawalCreatedPayload): WithdrawalCreatedPayload {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string channel_address */ 1:
                    message.channelAddress = reader.string();
                    break;
                case /* string alice_identifier */ 2:
                    message.aliceIdentifier = reader.string();
                    break;
                case /* string bob_identifier */ 3:
                    message.bobIdentifier = reader.string();
                    break;
                case /* com.vector.FullTransferState transfer */ 4:
                    message.transfer = FullTransferState.internalBinaryRead(reader, reader.uint32(), options, message.transfer);
                    break;
                case /* string fee */ 5:
                    message.fee = reader.string();
                    break;
                case /* string asset_id */ 6:
                    message.assetId = reader.string();
                    break;
                case /* string amount */ 7:
                    message.amount = reader.string();
                    break;
                case /* string recipient */ 8:
                    message.recipient = reader.string();
                    break;
                case /* string call_to */ 9:
                    message.callTo = reader.string();
                    break;
                case /* string call_data */ 10:
                    message.callData = reader.string();
                    break;
                case /* com.vector.Balance channel_balance */ 11:
                    message.channelBalance = Balance.internalBinaryRead(reader, reader.uint32(), options, message.channelBalance);
                    break;
                case /* optional google.protobuf.Struct meta */ 12:
                    message.meta = Struct.internalBinaryRead(reader, reader.uint32(), options, message.meta);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WithdrawalCreatedPayload, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string channel_address = 1; */
        if (message.channelAddress !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.channelAddress);
        /* string alice_identifier = 2; */
        if (message.aliceIdentifier !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.aliceIdentifier);
        /* string bob_identifier = 3; */
        if (message.bobIdentifier !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.bobIdentifier);
        /* com.vector.FullTransferState transfer = 4; */
        if (message.transfer)
            FullTransferState.internalBinaryWrite(message.transfer, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* string fee = 5; */
        if (message.fee !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.fee);
        /* string asset_id = 6; */
        if (message.assetId !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.assetId);
        /* string amount = 7; */
        if (message.amount !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.amount);
        /* string recipient = 8; */
        if (message.recipient !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.recipient);
        /* string call_to = 9; */
        if (message.callTo !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.callTo);
        /* string call_data = 10; */
        if (message.callData !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.callData);
        /* com.vector.Balance channel_balance = 11; */
        if (message.channelBalance)
            Balance.internalBinaryWrite(message.channelBalance, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* optional google.protobuf.Struct meta = 12; */
        if (message.meta)
            Struct.internalBinaryWrite(message.meta, writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.vector.WithdrawalCreatedPayload
 */
export const WithdrawalCreatedPayload = new WithdrawalCreatedPayload$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WithdrawalReconciledPayload$Type extends MessageType<WithdrawalReconciledPayload> {
    constructor() {
        super("com.vector.WithdrawalReconciledPayload", [
            { no: 1, name: "channel_address", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "alice_identifier", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "bob_identifier", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "transaction_hash", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "transfer_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "meta", kind: "message", T: () => Struct }
        ]);
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WithdrawalReconciledPayload): WithdrawalReconciledPayload {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string channel_address */ 1:
                    message.channelAddress = reader.string();
                    break;
                case /* string alice_identifier */ 2:
                    message.aliceIdentifier = reader.string();
                    break;
                case /* string bob_identifier */ 3:
                    message.bobIdentifier = reader.string();
                    break;
                case /* string transaction_hash */ 4:
                    message.transactionHash = reader.string();
                    break;
                case /* string transfer_id */ 5:
                    message.transferId = reader.string();
                    break;
                case /* optional google.protobuf.Struct meta */ 6:
                    message.meta = Struct.internalBinaryRead(reader, reader.uint32(), options, message.meta);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WithdrawalReconciledPayload, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string channel_address = 1; */
        if (message.channelAddress !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.channelAddress);
        /* string alice_identifier = 2; */
        if (message.aliceIdentifier !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.aliceIdentifier);
        /* string bob_identifier = 3; */
        if (message.bobIdentifier !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.bobIdentifier);
        /* string transaction_hash = 4; */
        if (message.transactionHash !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.transactionHash);
        /* string transfer_id = 5; */
        if (message.transferId !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.transferId);
        /* optional google.protobuf.Struct meta = 6; */
        if (message.meta)
            Struct.internalBinaryWrite(message.meta, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.vector.WithdrawalReconciledPayload
 */
export const WithdrawalReconciledPayload = new WithdrawalReconciledPayload$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateNodeRequest$Type extends MessageType<CreateNodeRequest> {
    constructor() {
        super("com.vector.CreateNodeRequest", [
            { no: 1, name: "index", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "mnemonic", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "skipCheckIn", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateNodeRequest): CreateNodeRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 index */ 1:
                    message.index = reader.int32();
                    break;
                case /* string mnemonic */ 2:
                    message.mnemonic = reader.string();
                    break;
                case /* bool skipCheckIn */ 3:
                    message.skipCheckIn = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateNodeRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 index = 1; */
        if (message.index !== 0)
            writer.tag(1, WireType.Varint).int32(message.index);
        /* string mnemonic = 2; */
        if (message.mnemonic !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.mnemonic);
        /* bool skipCheckIn = 3; */
        if (message.skipCheckIn !== false)
            writer.tag(3, WireType.Varint).bool(message.skipCheckIn);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.vector.CreateNodeRequest
 */
export const CreateNodeRequest = new CreateNodeRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateNodeReply$Type extends MessageType<CreateNodeReply> {
    constructor() {
        super("com.vector.CreateNodeReply", [
            { no: 1, name: "public_identifier", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "signer_address", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "index", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateNodeReply): CreateNodeReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string public_identifier */ 1:
                    message.publicIdentifier = reader.string();
                    break;
                case /* string signer_address */ 2:
                    message.signerAddress = reader.string();
                    break;
                case /* int32 index */ 3:
                    message.index = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateNodeReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string public_identifier = 1; */
        if (message.publicIdentifier !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.publicIdentifier);
        /* string signer_address = 2; */
        if (message.signerAddress !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.signerAddress);
        /* int32 index = 3; */
        if (message.index !== 0)
            writer.tag(3, WireType.Varint).int32(message.index);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.vector.CreateNodeReply
 */
export const CreateNodeReply = new CreateNodeReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ClearStoreRequest$Type extends MessageType<ClearStoreRequest> {
    constructor() {
        super("com.vector.ClearStoreRequest", [
            { no: 1, name: "admin_token", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ClearStoreRequest): ClearStoreRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string admin_token */ 1:
                    message.adminToken = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ClearStoreRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string admin_token = 1; */
        if (message.adminToken !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.adminToken);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.vector.ClearStoreRequest
 */
export const ClearStoreRequest = new ClearStoreRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RestoreStateRequest$Type extends MessageType<RestoreStateRequest> {
    constructor() {
        super("com.vector.RestoreStateRequest", [
            { no: 1, name: "counterparty_identifier", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "chain_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "public_identifier", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RestoreStateRequest): RestoreStateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string counterparty_identifier */ 1:
                    message.counterpartyIdentifier = reader.string();
                    break;
                case /* string chain_id */ 2:
                    message.chainId = reader.string();
                    break;
                case /* string public_identifier */ 3:
                    message.publicIdentifier = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RestoreStateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string counterparty_identifier = 1; */
        if (message.counterpartyIdentifier !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.counterpartyIdentifier);
        /* string chain_id = 2; */
        if (message.chainId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.chainId);
        /* string public_identifier = 3; */
        if (message.publicIdentifier !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.publicIdentifier);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.vector.RestoreStateRequest
 */
export const RestoreStateRequest = new RestoreStateRequest$Type();
/**
 * @generated ServiceType for protobuf service com.vector.ServerNodeService
 */
export const ServerNodeService = new ServiceType("com.vector.ServerNodeService", [
    { name: "GetPing", options: {}, I: Empty, O: GenericMessageResponse },
    { name: "GetConfig", options: {}, I: Empty, O: Configs },
    { name: "GetStatus", options: {}, I: GenericPublicIdentifierRequest, O: Status },
    { name: "GetRouterConfig", options: {}, I: GetRouterConfigRequest, O: RouterConfig },
    { name: "GetChannelState", options: {}, I: ChannelStateRequest, O: FullChannelState },
    { name: "GetChannelStates", options: {}, I: GenericPublicIdentifierRequest, O: FullChannelStates },
    { name: "GetChannelStateByParticipants", options: {}, I: ChannelStateByParticipantsRequest, O: FullChannelState },
    { name: "GetTransferState", options: {}, I: TransfersRequest, O: FullTransferState },
    { name: "GetTransferStateByRoutingId", options: {}, I: TransferStateByRoutingIdRequest, O: FullTransferState },
    { name: "GetTransferStatesByRoutingId", options: {}, I: TransferStatesByRoutingIdRequest, O: FullTransferStates },
    { name: "GetActiveTransfers", options: {}, I: ActiveTransfersRequest, O: FullTransferStates },
    { name: "GetRegisteredTransfers", options: {}, I: RegisteredTransfersRequest, O: RegisteredTransfers },
    { name: "ClearStore", options: {}, I: ClearStoreRequest, O: Empty },
    { name: "CreateNode", options: {}, I: CreateNodeRequest, O: CreateNodeReply },
    { name: "Setup", options: {}, I: SetupRequest, O: FullChannelState },
    { name: "InternalSetup", options: {}, I: SetupRequest, O: FullChannelState },
    { name: "Deposit", options: {}, I: DepositRequest, O: FullChannelState },
    { name: "SendDepositTx", options: {}, I: DepositTxRequest, O: TxHash },
    { name: "SendRequestCollateral", options: {}, I: DepositRequest, O: FullChannelState },
    { name: "CreateTransfer", options: {}, I: ConditionalTransferRequest, O: FullChannelState },
    { name: "ResolveTransfer", options: {}, I: ResolveTransferRequest, O: FullChannelState },
    { name: "Withdraw", options: {}, I: WithdrawRequest, O: FullChannelState },
    { name: "RestoreState", options: {}, I: RestoreStateRequest, O: FullChannelState },
    { name: "SendDisputeChannelTx", options: {}, I: ChannelStateRequest, O: TxHash },
    { name: "SendDefundChannelTx", options: {}, I: ChannelStateRequest, O: TxHash },
    { name: "SendDisputeTransfer", options: {}, I: TransferRequest, O: TxHash },
    { name: "SendDefundTransfer", options: {}, I: TransferRequest, O: TxHash },
    { name: "IsAliveStream", serverStreaming: true, options: {}, I: Empty, O: IsAlivePayload },
    { name: "SetupStream", serverStreaming: true, options: {}, I: Empty, O: SetupPayload },
    { name: "ConditionalTransferCreatedStream", serverStreaming: true, options: {}, I: Empty, O: ConditionalTransferCreatedPayload },
    { name: "ConditionalTransferResolvedStream", serverStreaming: true, options: {}, I: Empty, O: ConditionalTransferCreatedPayload },
    { name: "DepositReconciledStream", serverStreaming: true, options: {}, I: Empty, O: DepositReconciledPayload },
    { name: "RequestCollateralStream", serverStreaming: true, options: {}, I: Empty, O: RequestCollateralPayload },
    { name: "WithdrawalCreatedStream", serverStreaming: true, options: {}, I: Empty, O: WithdrawalCreatedPayload },
    { name: "WithdrawalResolvedStream", serverStreaming: true, options: {}, I: Empty, O: WithdrawalCreatedPayload },
    { name: "WithdrawalReconciledStream", serverStreaming: true, options: {}, I: Empty, O: WithdrawalReconciledPayload },
    { name: "RestoreStateStream", serverStreaming: true, options: {}, I: Empty, O: SetupPayload },
    { name: "EthProvider", options: {}, I: EthProviderRequest, O: EthProviderReply }
]);
