// @generated by protobuf-ts 2.0.0-alpha.11 with parameters server_grpc,client_promise,generate_dependencies,optimize_code_size
// @generated from protobuf file "servernode.proto" (package "com.vector", syntax proto3)
// tslint:disable
import { EthProviderReply } from "./servernode";
import { EthProviderRequest } from "./servernode";
import { CreateNodeReply } from "./servernode";
import { CreateNodeRequest } from "./servernode";
import { ClearStoreReply } from "./servernode";
import { ClearStoreRequest } from "./servernode";
import { SubscriptionWithPublicIdentifierReply } from "./servernode";
import { SubscriptionWithPublicIdentifierRequest } from "./servernode";
import { Subscription } from "./servernode";
import { SubscriptionRequest } from "./servernode";
import { SubscribeReply } from "./servernode";
import { SubscribeRequest } from "./servernode";
import { RestoreStateReply } from "./servernode";
import { RestoreStateRequest } from "./servernode";
import { WithdrawReply } from "./servernode";
import { WithdrawRequest } from "./servernode";
import { ResolveTransferRequest } from "./servernode";
import { ResolveTransferReply } from "./servernode";
import { ConditionalTransferRequest } from "./servernode";
import { CollateralReply } from "./servernode";
import { TransferResquest } from "./servernode";
import { ChannelResquest } from "./servernode";
import { TxHash } from "./servernode";
import { DepositTxRequest } from "./servernode";
import { DepositRequest } from "./servernode";
import { FullChannelState } from "./servernode";
import { SetupReply } from "./servernode";
import { SetupRequest } from "./servernode";
import { RegisteredTransfers } from "./servernode";
import { RegisteredTransfersRequest } from "./servernode";
import { ActiveTransfersRequest } from "./servernode";
import { FullTransferStates } from "./servernode";
import { TransferStatesByRoutingIdRequest } from "./servernode";
import { FullTransferStateOrUndefined } from "./servernode";
import { TransferStateByRoutingIdRequest } from "./servernode";
import { TransferStateReply } from "./servernode";
import { TransfersRequest } from "./servernode";
import { ChannelStateByParticipantsRequest } from "./servernode";
import { FullChannelStates } from "./servernode";
import { FullChannelStateOrUndefined } from "./servernode";
import { ChannelStateRequest } from "./servernode";
import { Status } from "./servernode";
import { TPublicIdentifier } from "./servernode";
import { Configs } from "./servernode";
import { Pong } from "./servernode";
import { Empty } from "./servernode";
import * as grpc from "@grpc/grpc-js";
/**
 * @generated from protobuf service com.vector.ServerNodeService
 */
export interface IServerNodeService extends grpc.UntypedServiceImplementation {
    /**
     * @generated from protobuf rpc: GetPing(com.vector.Empty) returns (com.vector.Pong);
     */
    getPing: grpc.handleUnaryCall<Empty, Pong>;
    /**
     * @generated from protobuf rpc: GetConfig(com.vector.Empty) returns (com.vector.Configs);
     */
    getConfig: grpc.handleUnaryCall<Empty, Configs>;
    /**
     * @generated from protobuf rpc: GetStatus(com.vector.TPublicIdentifier) returns (com.vector.Status);
     */
    getStatus: grpc.handleUnaryCall<TPublicIdentifier, Status>;
    /**
     * @generated from protobuf rpc: GetChannelState(com.vector.ChannelStateRequest) returns (com.vector.FullChannelStateOrUndefined);
     */
    getChannelState: grpc.handleUnaryCall<ChannelStateRequest, FullChannelStateOrUndefined>;
    /**
     * @generated from protobuf rpc: GetChannelStates(com.vector.Empty) returns (com.vector.FullChannelStates);
     */
    getChannelStates: grpc.handleUnaryCall<Empty, FullChannelStates>;
    /**
     * @generated from protobuf rpc: GetChannelStateByParticipants(com.vector.ChannelStateByParticipantsRequest) returns (com.vector.FullChannelStateOrUndefined);
     */
    getChannelStateByParticipants: grpc.handleUnaryCall<ChannelStateByParticipantsRequest, FullChannelStateOrUndefined>;
    /**
     * @generated from protobuf rpc: TransferState(com.vector.TransfersRequest) returns (com.vector.TransferStateReply);
     */
    transferState: grpc.handleUnaryCall<TransfersRequest, TransferStateReply>;
    /**
     * @generated from protobuf rpc: GetTransferStateByRoutingId(com.vector.TransferStateByRoutingIdRequest) returns (com.vector.FullTransferStateOrUndefined);
     */
    getTransferStateByRoutingId: grpc.handleUnaryCall<TransferStateByRoutingIdRequest, FullTransferStateOrUndefined>;
    /**
     * @generated from protobuf rpc: GetTransferStatesByRoutingId(com.vector.TransferStatesByRoutingIdRequest) returns (com.vector.FullTransferStates);
     */
    getTransferStatesByRoutingId: grpc.handleUnaryCall<TransferStatesByRoutingIdRequest, FullTransferStates>;
    /**
     * @generated from protobuf rpc: GetActiveTransfers(com.vector.ActiveTransfersRequest) returns (com.vector.FullTransferStates);
     */
    getActiveTransfers: grpc.handleUnaryCall<ActiveTransfersRequest, FullTransferStates>;
    /**
     * rpc GetChannelStates (ChannelStatesRequest) returns (FullTransferStates) {}
     *
     * @generated from protobuf rpc: GetRegisteredTransfers(com.vector.RegisteredTransfersRequest) returns (com.vector.RegisteredTransfers);
     */
    getRegisteredTransfers: grpc.handleUnaryCall<RegisteredTransfersRequest, RegisteredTransfers>;
    /**
     * @generated from protobuf rpc: Setup(com.vector.SetupRequest) returns (com.vector.SetupReply);
     */
    setup: grpc.handleUnaryCall<SetupRequest, SetupReply>;
    /**
     * @generated from protobuf rpc: InternalSetup(com.vector.SetupRequest) returns (com.vector.FullChannelState);
     */
    internalSetup: grpc.handleUnaryCall<SetupRequest, FullChannelState>;
    /**
     * @generated from protobuf rpc: Deposit(com.vector.DepositRequest) returns (com.vector.FullChannelState);
     */
    deposit: grpc.handleUnaryCall<DepositRequest, FullChannelState>;
    /**
     * @generated from protobuf rpc: SendDepositTx(com.vector.DepositTxRequest) returns (com.vector.TxHash);
     */
    sendDepositTx: grpc.handleUnaryCall<DepositTxRequest, TxHash>;
    /**
     * @generated from protobuf rpc: SendDisputeChannelTx(com.vector.ChannelResquest) returns (com.vector.TxHash);
     */
    sendDisputeChannelTx: grpc.handleUnaryCall<ChannelResquest, TxHash>;
    /**
     * @generated from protobuf rpc: SendDefundChannelTx(com.vector.ChannelResquest) returns (com.vector.TxHash);
     */
    sendDefundChannelTx: grpc.handleUnaryCall<ChannelResquest, TxHash>;
    /**
     * @generated from protobuf rpc: SendDisputeTransfer(com.vector.TransferResquest) returns (com.vector.TxHash);
     */
    sendDisputeTransfer: grpc.handleUnaryCall<TransferResquest, TxHash>;
    /**
     * @generated from protobuf rpc: SendDefundTransfer(com.vector.TransferResquest) returns (com.vector.TxHash);
     */
    sendDefundTransfer: grpc.handleUnaryCall<TransferResquest, TxHash>;
    /**
     * @generated from protobuf rpc: SendRequestCollateral(com.vector.DepositRequest) returns (com.vector.CollateralReply);
     */
    sendRequestCollateral: grpc.handleUnaryCall<DepositRequest, CollateralReply>;
    /**
     * @generated from protobuf rpc: CreateTransfer(com.vector.ConditionalTransferRequest) returns (com.vector.ResolveTransferReply);
     */
    createTransfer: grpc.handleUnaryCall<ConditionalTransferRequest, ResolveTransferReply>;
    /**
     * @generated from protobuf rpc: ResolveTransfer(com.vector.ResolveTransferRequest) returns (com.vector.ResolveTransferReply);
     */
    resolveTransfer: grpc.handleUnaryCall<ResolveTransferRequest, ResolveTransferReply>;
    /**
     * @generated from protobuf rpc: Withdraw(com.vector.WithdrawRequest) returns (com.vector.WithdrawReply);
     */
    withdraw: grpc.handleUnaryCall<WithdrawRequest, WithdrawReply>;
    /**
     * @generated from protobuf rpc: RestoreState(com.vector.RestoreStateRequest) returns (com.vector.RestoreStateReply);
     */
    restoreState: grpc.handleUnaryCall<RestoreStateRequest, RestoreStateReply>;
    /**
     *   [ChannelRpcMethods.chan_restoreState]: FullChannelState;
     *   { schema: { body: NodeParams.RestoreStateSchema, response: NodeResponses.RestoreStateSchema } },
     *   NodeResponses.RestoreState
     *
     * @generated from protobuf rpc: Subscribe(com.vector.SubscribeRequest) returns (com.vector.SubscribeReply);
     */
    subscribe: grpc.handleUnaryCall<SubscribeRequest, SubscribeReply>;
    /**
     *   [ChannelRpcMethods.chan_subscribe]: { event: string; once: boolean };
     *   body: NodeParams.RegisterListenerSchema
     *
     * rpc GetUrl (GetUrlRequest) returns (ListenerSchemaReply) {}
     *
     * @generated from protobuf rpc: GetSubscription(com.vector.SubscriptionRequest) returns (com.vector.Subscription);
     */
    getSubscription: grpc.handleUnaryCall<SubscriptionRequest, Subscription>;
    /**
     * @generated from protobuf rpc: GetSubscriptionWithOnlyPublicIdentifier(com.vector.SubscriptionWithPublicIdentifierRequest) returns (com.vector.SubscriptionWithPublicIdentifierReply);
     */
    getSubscriptionWithOnlyPublicIdentifier: grpc.handleUnaryCall<SubscriptionWithPublicIdentifierRequest, SubscriptionWithPublicIdentifierReply>;
    /**
     *  NodeParams.GetListenerSchema,
     *
     * @generated from protobuf rpc: ClearStore(com.vector.ClearStoreRequest) returns (com.vector.ClearStoreReply);
     */
    clearStore: grpc.handleUnaryCall<ClearStoreRequest, ClearStoreReply>;
    /**
     * @generated from protobuf rpc: CreateNode(com.vector.CreateNodeRequest) returns (com.vector.CreateNodeReply);
     */
    createNode: grpc.handleUnaryCall<CreateNodeRequest, CreateNodeReply>;
    /**
     * @generated from protobuf rpc: EthProvider(com.vector.EthProviderRequest) returns (com.vector.EthProviderReply);
     */
    ethProvider: grpc.handleUnaryCall<EthProviderRequest, EthProviderReply>;
}
/**
 * @grpc/grpc-js definition for the protobuf service com.vector.ServerNodeService.
 *
 * Usage: Implement the interface IServerNodeService and add to a grpc server.
 *
 * ```typescript
 * const server = new grpc.Server();
 * const service: IServerNodeService = ...
 * server.addService(serverNodeServiceDefinition, service);
 * ```
 */
export const serverNodeServiceDefinition: grpc.ServiceDefinition<IServerNodeService> = {
    getPing: {
        path: "/com.vector.ServerNodeService/GetPing",
        originalName: "GetPing",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => Pong.fromBinary(bytes),
        requestDeserialize: bytes => Empty.fromBinary(bytes),
        responseSerialize: value => Buffer.from(Pong.toBinary(value)),
        requestSerialize: value => Buffer.from(Empty.toBinary(value))
    },
    getConfig: {
        path: "/com.vector.ServerNodeService/GetConfig",
        originalName: "GetConfig",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => Configs.fromBinary(bytes),
        requestDeserialize: bytes => Empty.fromBinary(bytes),
        responseSerialize: value => Buffer.from(Configs.toBinary(value)),
        requestSerialize: value => Buffer.from(Empty.toBinary(value))
    },
    getStatus: {
        path: "/com.vector.ServerNodeService/GetStatus",
        originalName: "GetStatus",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => Status.fromBinary(bytes),
        requestDeserialize: bytes => TPublicIdentifier.fromBinary(bytes),
        responseSerialize: value => Buffer.from(Status.toBinary(value)),
        requestSerialize: value => Buffer.from(TPublicIdentifier.toBinary(value))
    },
    getChannelState: {
        path: "/com.vector.ServerNodeService/GetChannelState",
        originalName: "GetChannelState",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => FullChannelStateOrUndefined.fromBinary(bytes),
        requestDeserialize: bytes => ChannelStateRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(FullChannelStateOrUndefined.toBinary(value)),
        requestSerialize: value => Buffer.from(ChannelStateRequest.toBinary(value))
    },
    getChannelStates: {
        path: "/com.vector.ServerNodeService/GetChannelStates",
        originalName: "GetChannelStates",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => FullChannelStates.fromBinary(bytes),
        requestDeserialize: bytes => Empty.fromBinary(bytes),
        responseSerialize: value => Buffer.from(FullChannelStates.toBinary(value)),
        requestSerialize: value => Buffer.from(Empty.toBinary(value))
    },
    getChannelStateByParticipants: {
        path: "/com.vector.ServerNodeService/GetChannelStateByParticipants",
        originalName: "GetChannelStateByParticipants",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => FullChannelStateOrUndefined.fromBinary(bytes),
        requestDeserialize: bytes => ChannelStateByParticipantsRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(FullChannelStateOrUndefined.toBinary(value)),
        requestSerialize: value => Buffer.from(ChannelStateByParticipantsRequest.toBinary(value))
    },
    transferState: {
        path: "/com.vector.ServerNodeService/TransferState",
        originalName: "TransferState",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => TransferStateReply.fromBinary(bytes),
        requestDeserialize: bytes => TransfersRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(TransferStateReply.toBinary(value)),
        requestSerialize: value => Buffer.from(TransfersRequest.toBinary(value))
    },
    getTransferStateByRoutingId: {
        path: "/com.vector.ServerNodeService/GetTransferStateByRoutingId",
        originalName: "GetTransferStateByRoutingId",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => FullTransferStateOrUndefined.fromBinary(bytes),
        requestDeserialize: bytes => TransferStateByRoutingIdRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(FullTransferStateOrUndefined.toBinary(value)),
        requestSerialize: value => Buffer.from(TransferStateByRoutingIdRequest.toBinary(value))
    },
    getTransferStatesByRoutingId: {
        path: "/com.vector.ServerNodeService/GetTransferStatesByRoutingId",
        originalName: "GetTransferStatesByRoutingId",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => FullTransferStates.fromBinary(bytes),
        requestDeserialize: bytes => TransferStatesByRoutingIdRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(FullTransferStates.toBinary(value)),
        requestSerialize: value => Buffer.from(TransferStatesByRoutingIdRequest.toBinary(value))
    },
    getActiveTransfers: {
        path: "/com.vector.ServerNodeService/GetActiveTransfers",
        originalName: "GetActiveTransfers",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => FullTransferStates.fromBinary(bytes),
        requestDeserialize: bytes => ActiveTransfersRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(FullTransferStates.toBinary(value)),
        requestSerialize: value => Buffer.from(ActiveTransfersRequest.toBinary(value))
    },
    getRegisteredTransfers: {
        path: "/com.vector.ServerNodeService/GetRegisteredTransfers",
        originalName: "GetRegisteredTransfers",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => RegisteredTransfers.fromBinary(bytes),
        requestDeserialize: bytes => RegisteredTransfersRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(RegisteredTransfers.toBinary(value)),
        requestSerialize: value => Buffer.from(RegisteredTransfersRequest.toBinary(value))
    },
    setup: {
        path: "/com.vector.ServerNodeService/Setup",
        originalName: "Setup",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => SetupReply.fromBinary(bytes),
        requestDeserialize: bytes => SetupRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(SetupReply.toBinary(value)),
        requestSerialize: value => Buffer.from(SetupRequest.toBinary(value))
    },
    internalSetup: {
        path: "/com.vector.ServerNodeService/InternalSetup",
        originalName: "InternalSetup",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => FullChannelState.fromBinary(bytes),
        requestDeserialize: bytes => SetupRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(FullChannelState.toBinary(value)),
        requestSerialize: value => Buffer.from(SetupRequest.toBinary(value))
    },
    deposit: {
        path: "/com.vector.ServerNodeService/Deposit",
        originalName: "Deposit",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => FullChannelState.fromBinary(bytes),
        requestDeserialize: bytes => DepositRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(FullChannelState.toBinary(value)),
        requestSerialize: value => Buffer.from(DepositRequest.toBinary(value))
    },
    sendDepositTx: {
        path: "/com.vector.ServerNodeService/SendDepositTx",
        originalName: "SendDepositTx",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => TxHash.fromBinary(bytes),
        requestDeserialize: bytes => DepositTxRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(TxHash.toBinary(value)),
        requestSerialize: value => Buffer.from(DepositTxRequest.toBinary(value))
    },
    sendDisputeChannelTx: {
        path: "/com.vector.ServerNodeService/SendDisputeChannelTx",
        originalName: "SendDisputeChannelTx",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => TxHash.fromBinary(bytes),
        requestDeserialize: bytes => ChannelResquest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(TxHash.toBinary(value)),
        requestSerialize: value => Buffer.from(ChannelResquest.toBinary(value))
    },
    sendDefundChannelTx: {
        path: "/com.vector.ServerNodeService/SendDefundChannelTx",
        originalName: "SendDefundChannelTx",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => TxHash.fromBinary(bytes),
        requestDeserialize: bytes => ChannelResquest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(TxHash.toBinary(value)),
        requestSerialize: value => Buffer.from(ChannelResquest.toBinary(value))
    },
    sendDisputeTransfer: {
        path: "/com.vector.ServerNodeService/SendDisputeTransfer",
        originalName: "SendDisputeTransfer",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => TxHash.fromBinary(bytes),
        requestDeserialize: bytes => TransferResquest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(TxHash.toBinary(value)),
        requestSerialize: value => Buffer.from(TransferResquest.toBinary(value))
    },
    sendDefundTransfer: {
        path: "/com.vector.ServerNodeService/SendDefundTransfer",
        originalName: "SendDefundTransfer",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => TxHash.fromBinary(bytes),
        requestDeserialize: bytes => TransferResquest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(TxHash.toBinary(value)),
        requestSerialize: value => Buffer.from(TransferResquest.toBinary(value))
    },
    sendRequestCollateral: {
        path: "/com.vector.ServerNodeService/SendRequestCollateral",
        originalName: "SendRequestCollateral",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => CollateralReply.fromBinary(bytes),
        requestDeserialize: bytes => DepositRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(CollateralReply.toBinary(value)),
        requestSerialize: value => Buffer.from(DepositRequest.toBinary(value))
    },
    createTransfer: {
        path: "/com.vector.ServerNodeService/CreateTransfer",
        originalName: "CreateTransfer",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => ResolveTransferReply.fromBinary(bytes),
        requestDeserialize: bytes => ConditionalTransferRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(ResolveTransferReply.toBinary(value)),
        requestSerialize: value => Buffer.from(ConditionalTransferRequest.toBinary(value))
    },
    resolveTransfer: {
        path: "/com.vector.ServerNodeService/ResolveTransfer",
        originalName: "ResolveTransfer",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => ResolveTransferReply.fromBinary(bytes),
        requestDeserialize: bytes => ResolveTransferRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(ResolveTransferReply.toBinary(value)),
        requestSerialize: value => Buffer.from(ResolveTransferRequest.toBinary(value))
    },
    withdraw: {
        path: "/com.vector.ServerNodeService/Withdraw",
        originalName: "Withdraw",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => WithdrawReply.fromBinary(bytes),
        requestDeserialize: bytes => WithdrawRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(WithdrawReply.toBinary(value)),
        requestSerialize: value => Buffer.from(WithdrawRequest.toBinary(value))
    },
    restoreState: {
        path: "/com.vector.ServerNodeService/RestoreState",
        originalName: "RestoreState",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => RestoreStateReply.fromBinary(bytes),
        requestDeserialize: bytes => RestoreStateRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(RestoreStateReply.toBinary(value)),
        requestSerialize: value => Buffer.from(RestoreStateRequest.toBinary(value))
    },
    subscribe: {
        path: "/com.vector.ServerNodeService/Subscribe",
        originalName: "Subscribe",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => SubscribeReply.fromBinary(bytes),
        requestDeserialize: bytes => SubscribeRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(SubscribeReply.toBinary(value)),
        requestSerialize: value => Buffer.from(SubscribeRequest.toBinary(value))
    },
    getSubscription: {
        path: "/com.vector.ServerNodeService/GetSubscription",
        originalName: "GetSubscription",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => Subscription.fromBinary(bytes),
        requestDeserialize: bytes => SubscriptionRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(Subscription.toBinary(value)),
        requestSerialize: value => Buffer.from(SubscriptionRequest.toBinary(value))
    },
    getSubscriptionWithOnlyPublicIdentifier: {
        path: "/com.vector.ServerNodeService/GetSubscriptionWithOnlyPublicIdentifier",
        originalName: "GetSubscriptionWithOnlyPublicIdentifier",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => SubscriptionWithPublicIdentifierReply.fromBinary(bytes),
        requestDeserialize: bytes => SubscriptionWithPublicIdentifierRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(SubscriptionWithPublicIdentifierReply.toBinary(value)),
        requestSerialize: value => Buffer.from(SubscriptionWithPublicIdentifierRequest.toBinary(value))
    },
    clearStore: {
        path: "/com.vector.ServerNodeService/ClearStore",
        originalName: "ClearStore",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => ClearStoreReply.fromBinary(bytes),
        requestDeserialize: bytes => ClearStoreRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(ClearStoreReply.toBinary(value)),
        requestSerialize: value => Buffer.from(ClearStoreRequest.toBinary(value))
    },
    createNode: {
        path: "/com.vector.ServerNodeService/CreateNode",
        originalName: "CreateNode",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => CreateNodeReply.fromBinary(bytes),
        requestDeserialize: bytes => CreateNodeRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(CreateNodeReply.toBinary(value)),
        requestSerialize: value => Buffer.from(CreateNodeRequest.toBinary(value))
    },
    ethProvider: {
        path: "/com.vector.ServerNodeService/EthProvider",
        originalName: "EthProvider",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => EthProviderReply.fromBinary(bytes),
        requestDeserialize: bytes => EthProviderRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(EthProviderReply.toBinary(value)),
        requestSerialize: value => Buffer.from(EthProviderRequest.toBinary(value))
    }
};
