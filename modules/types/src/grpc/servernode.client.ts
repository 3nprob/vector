// @generated by protobuf-ts 2.0.0-alpha.12 with parameters server_grpc1,client_call,generate_dependencies
// @generated from protobuf file "servernode.proto" (package "com.vector", syntax proto3)
// tslint:disable
import { RpcTransport } from "@protobuf-ts/runtime-rpc";
import { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { ServerNodeService } from "./servernode";
import { EthProviderReply } from "./servernode";
import { EthProviderRequest } from "./servernode";
import { WithdrawalReconciledPayload } from "./servernode";
import { WithdrawalCreatedPayload } from "./servernode";
import { RequestCollateralPayload } from "./servernode";
import { DepositReconciledPayload } from "./servernode";
import { ConditionalTransferCreatedPayload } from "./servernode";
import { SetupPayload } from "./servernode";
import { IsAlivePayload } from "./servernode";
import { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import { TransferRequest } from "./servernode";
import { RestoreStateRequest } from "./servernode";
import { WithdrawRequest } from "./servernode";
import { ResolveTransferRequest } from "./servernode";
import { ConditionalTransferRequest } from "./servernode";
import { TxHash } from "./servernode";
import { DepositTxRequest } from "./servernode";
import { DepositRequest } from "./servernode";
import { SetupRequest } from "./servernode";
import { CreateNodeReply } from "./servernode";
import { CreateNodeRequest } from "./servernode";
import { ClearStoreRequest } from "./servernode";
import { RegisteredTransfers } from "./servernode";
import { RegisteredTransfersRequest } from "./servernode";
import { ActiveTransfersRequest } from "./servernode";
import { FullTransferStates } from "./servernode";
import { TransferStatesByRoutingIdRequest } from "./servernode";
import { TransferStateByRoutingIdRequest } from "./servernode";
import { FullTransferState } from "./servernode";
import { TransfersRequest } from "./servernode";
import { ChannelStateByParticipantsRequest } from "./servernode";
import { FullChannelStates } from "./servernode";
import { FullChannelState } from "./servernode";
import { ChannelStateRequest } from "./servernode";
import { RouterConfig } from "./servernode";
import { GetRouterConfigRequest } from "./servernode";
import { Status } from "./servernode";
import { GenericPublicIdentifierRequest } from "./servernode";
import { Configs } from "./servernode";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import { GenericMessageResponse } from "./servernode";
import { Empty } from "./servernode";
import { UnaryCall } from "@protobuf-ts/runtime-rpc";
import { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * Server Node Service
 * Describes the Vector Server Node's interface
 *
 * @generated from protobuf service com.vector.ServerNodeService
 */
export interface IServerNodeServiceClient {
    /**
     * general metadata getters
     *
     * @generated from protobuf rpc: GetPing(com.vector.Empty) returns (com.vector.GenericMessageResponse);
     */
    getPing(input: Empty, options?: RpcOptions): UnaryCall<Empty, GenericMessageResponse>;
    /**
     * @generated from protobuf rpc: GetConfig(com.vector.Empty) returns (com.vector.Configs);
     */
    getConfig(input: Empty, options?: RpcOptions): UnaryCall<Empty, Configs>;
    /**
     * @generated from protobuf rpc: GetStatus(com.vector.GenericPublicIdentifierRequest) returns (com.vector.Status);
     */
    getStatus(input: GenericPublicIdentifierRequest, options?: RpcOptions): UnaryCall<GenericPublicIdentifierRequest, Status>;
    /**
     * @generated from protobuf rpc: GetRouterConfig(com.vector.GetRouterConfigRequest) returns (com.vector.RouterConfig);
     */
    getRouterConfig(input: GetRouterConfigRequest, options?: RpcOptions): UnaryCall<GetRouterConfigRequest, RouterConfig>;
    /**
     * channel and transfer state getters
     *
     * @generated from protobuf rpc: GetChannelState(com.vector.ChannelStateRequest) returns (com.vector.FullChannelState);
     */
    getChannelState(input: ChannelStateRequest, options?: RpcOptions): UnaryCall<ChannelStateRequest, FullChannelState>;
    /**
     * @generated from protobuf rpc: GetChannelStates(com.vector.Empty) returns (com.vector.FullChannelStates);
     */
    getChannelStates(input: Empty, options?: RpcOptions): UnaryCall<Empty, FullChannelStates>;
    /**
     * @generated from protobuf rpc: GetChannelStateByParticipants(com.vector.ChannelStateByParticipantsRequest) returns (com.vector.FullChannelState);
     */
    getChannelStateByParticipants(input: ChannelStateByParticipantsRequest, options?: RpcOptions): UnaryCall<ChannelStateByParticipantsRequest, FullChannelState>;
    /**
     * @generated from protobuf rpc: GetTransferState(com.vector.TransfersRequest) returns (com.vector.FullTransferState);
     */
    getTransferState(input: TransfersRequest, options?: RpcOptions): UnaryCall<TransfersRequest, FullTransferState>;
    /**
     * @generated from protobuf rpc: GetTransferStateByRoutingId(com.vector.TransferStateByRoutingIdRequest) returns (com.vector.FullTransferState);
     */
    getTransferStateByRoutingId(input: TransferStateByRoutingIdRequest, options?: RpcOptions): UnaryCall<TransferStateByRoutingIdRequest, FullTransferState>;
    /**
     * @generated from protobuf rpc: GetTransferStatesByRoutingId(com.vector.TransferStatesByRoutingIdRequest) returns (com.vector.FullTransferStates);
     */
    getTransferStatesByRoutingId(input: TransferStatesByRoutingIdRequest, options?: RpcOptions): UnaryCall<TransferStatesByRoutingIdRequest, FullTransferStates>;
    /**
     * @generated from protobuf rpc: GetActiveTransfers(com.vector.ActiveTransfersRequest) returns (com.vector.FullTransferStates);
     */
    getActiveTransfers(input: ActiveTransfersRequest, options?: RpcOptions): UnaryCall<ActiveTransfersRequest, FullTransferStates>;
    /**
     * @generated from protobuf rpc: GetRegisteredTransfers(com.vector.RegisteredTransfersRequest) returns (com.vector.RegisteredTransfers);
     */
    getRegisteredTransfers(input: RegisteredTransfersRequest, options?: RpcOptions): UnaryCall<RegisteredTransfersRequest, RegisteredTransfers>;
    /**
     * external interface for server node functionality
     *
     * @generated from protobuf rpc: ClearStore(com.vector.ClearStoreRequest) returns (com.vector.Empty);
     */
    clearStore(input: ClearStoreRequest, options?: RpcOptions): UnaryCall<ClearStoreRequest, Empty>;
    /**
     * @generated from protobuf rpc: CreateNode(com.vector.CreateNodeRequest) returns (com.vector.CreateNodeReply);
     */
    createNode(input: CreateNodeRequest, options?: RpcOptions): UnaryCall<CreateNodeRequest, CreateNodeReply>;
    /**
     * @generated from protobuf rpc: Setup(com.vector.SetupRequest) returns (com.vector.FullChannelState);
     */
    setup(input: SetupRequest, options?: RpcOptions): UnaryCall<SetupRequest, FullChannelState>;
    /**
     * @generated from protobuf rpc: InternalSetup(com.vector.SetupRequest) returns (com.vector.FullChannelState);
     */
    internalSetup(input: SetupRequest, options?: RpcOptions): UnaryCall<SetupRequest, FullChannelState>;
    /**
     * @generated from protobuf rpc: Deposit(com.vector.DepositRequest) returns (com.vector.FullChannelState);
     */
    deposit(input: DepositRequest, options?: RpcOptions): UnaryCall<DepositRequest, FullChannelState>;
    /**
     * @generated from protobuf rpc: SendDepositTx(com.vector.DepositTxRequest) returns (com.vector.TxHash);
     */
    sendDepositTx(input: DepositTxRequest, options?: RpcOptions): UnaryCall<DepositTxRequest, TxHash>;
    /**
     * @generated from protobuf rpc: SendRequestCollateral(com.vector.DepositRequest) returns (com.vector.FullChannelState);
     */
    sendRequestCollateral(input: DepositRequest, options?: RpcOptions): UnaryCall<DepositRequest, FullChannelState>;
    /**
     * @generated from protobuf rpc: CreateTransfer(com.vector.ConditionalTransferRequest) returns (com.vector.FullChannelState);
     */
    createTransfer(input: ConditionalTransferRequest, options?: RpcOptions): UnaryCall<ConditionalTransferRequest, FullChannelState>;
    /**
     * @generated from protobuf rpc: ResolveTransfer(com.vector.ResolveTransferRequest) returns (com.vector.FullChannelState);
     */
    resolveTransfer(input: ResolveTransferRequest, options?: RpcOptions): UnaryCall<ResolveTransferRequest, FullChannelState>;
    /**
     * @generated from protobuf rpc: Withdraw(com.vector.WithdrawRequest) returns (com.vector.FullChannelState);
     */
    withdraw(input: WithdrawRequest, options?: RpcOptions): UnaryCall<WithdrawRequest, FullChannelState>;
    /**
     * @generated from protobuf rpc: RestoreState(com.vector.RestoreStateRequest) returns (com.vector.FullChannelState);
     */
    restoreState(input: RestoreStateRequest, options?: RpcOptions): UnaryCall<RestoreStateRequest, FullChannelState>;
    /**
     * dispute methods
     *
     * @generated from protobuf rpc: SendDisputeChannelTx(com.vector.ChannelStateRequest) returns (com.vector.TxHash);
     */
    sendDisputeChannelTx(input: ChannelStateRequest, options?: RpcOptions): UnaryCall<ChannelStateRequest, TxHash>;
    /**
     * @generated from protobuf rpc: SendDefundChannelTx(com.vector.ChannelStateRequest) returns (com.vector.TxHash);
     */
    sendDefundChannelTx(input: ChannelStateRequest, options?: RpcOptions): UnaryCall<ChannelStateRequest, TxHash>;
    /**
     * @generated from protobuf rpc: SendDisputeTransfer(com.vector.TransferRequest) returns (com.vector.TxHash);
     */
    sendDisputeTransfer(input: TransferRequest, options?: RpcOptions): UnaryCall<TransferRequest, TxHash>;
    /**
     * @generated from protobuf rpc: SendDefundTransfer(com.vector.TransferRequest) returns (com.vector.TxHash);
     */
    sendDefundTransfer(input: TransferRequest, options?: RpcOptions): UnaryCall<TransferRequest, TxHash>;
    /**
     * subscriptions - server to client stream
     *
     * @generated from protobuf rpc: IsAliveStream(com.vector.Empty) returns (stream com.vector.IsAlivePayload);
     */
    isAliveStream(input: Empty, options?: RpcOptions): ServerStreamingCall<Empty, IsAlivePayload>;
    /**
     * @generated from protobuf rpc: SetupStream(com.vector.Empty) returns (stream com.vector.SetupPayload);
     */
    setupStream(input: Empty, options?: RpcOptions): ServerStreamingCall<Empty, SetupPayload>;
    /**
     * @generated from protobuf rpc: ConditionalTransferCreatedStream(com.vector.Empty) returns (stream com.vector.ConditionalTransferCreatedPayload);
     */
    conditionalTransferCreatedStream(input: Empty, options?: RpcOptions): ServerStreamingCall<Empty, ConditionalTransferCreatedPayload>;
    /**
     * @generated from protobuf rpc: ConditionalTransferResolvedStream(com.vector.Empty) returns (stream com.vector.ConditionalTransferCreatedPayload);
     */
    conditionalTransferResolvedStream(input: Empty, options?: RpcOptions): ServerStreamingCall<Empty, ConditionalTransferCreatedPayload>;
    /**
     * @generated from protobuf rpc: DepositReconciledStream(com.vector.Empty) returns (stream com.vector.DepositReconciledPayload);
     */
    depositReconciledStream(input: Empty, options?: RpcOptions): ServerStreamingCall<Empty, DepositReconciledPayload>;
    /**
     * @generated from protobuf rpc: RequestCollateralStream(com.vector.Empty) returns (stream com.vector.RequestCollateralPayload);
     */
    requestCollateralStream(input: Empty, options?: RpcOptions): ServerStreamingCall<Empty, RequestCollateralPayload>;
    /**
     * @generated from protobuf rpc: WithdrawalCreatedStream(com.vector.Empty) returns (stream com.vector.WithdrawalCreatedPayload);
     */
    withdrawalCreatedStream(input: Empty, options?: RpcOptions): ServerStreamingCall<Empty, WithdrawalCreatedPayload>;
    /**
     * @generated from protobuf rpc: WithdrawalResolvedStream(com.vector.Empty) returns (stream com.vector.WithdrawalCreatedPayload);
     */
    withdrawalResolvedStream(input: Empty, options?: RpcOptions): ServerStreamingCall<Empty, WithdrawalCreatedPayload>;
    /**
     * @generated from protobuf rpc: WithdrawalReconciledStream(com.vector.Empty) returns (stream com.vector.WithdrawalReconciledPayload);
     */
    withdrawalReconciledStream(input: Empty, options?: RpcOptions): ServerStreamingCall<Empty, WithdrawalReconciledPayload>;
    /**
     * @generated from protobuf rpc: RestoreStateStream(com.vector.Empty) returns (stream com.vector.SetupPayload);
     */
    restoreStateStream(input: Empty, options?: RpcOptions): ServerStreamingCall<Empty, SetupPayload>;
    /**
     * eth provider pass-through
     *
     * @generated from protobuf rpc: EthProvider(com.vector.EthProviderRequest) returns (com.vector.EthProviderReply);
     */
    ethProvider(input: EthProviderRequest, options?: RpcOptions): UnaryCall<EthProviderRequest, EthProviderReply>;
}
/**
 * Server Node Service
 * Describes the Vector Server Node's interface
 *
 * @generated from protobuf service com.vector.ServerNodeService
 */
export class ServerNodeServiceClient implements IServerNodeServiceClient, ServiceInfo {
    typeName = ServerNodeService.typeName;
    methods = ServerNodeService.methods;
    options = ServerNodeService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * general metadata getters
     *
     * @generated from protobuf rpc: GetPing(com.vector.Empty) returns (com.vector.GenericMessageResponse);
     */
    getPing(input: Empty, options?: RpcOptions): UnaryCall<Empty, GenericMessageResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<Empty, GenericMessageResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetConfig(com.vector.Empty) returns (com.vector.Configs);
     */
    getConfig(input: Empty, options?: RpcOptions): UnaryCall<Empty, Configs> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<Empty, Configs>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetStatus(com.vector.GenericPublicIdentifierRequest) returns (com.vector.Status);
     */
    getStatus(input: GenericPublicIdentifierRequest, options?: RpcOptions): UnaryCall<GenericPublicIdentifierRequest, Status> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<GenericPublicIdentifierRequest, Status>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetRouterConfig(com.vector.GetRouterConfigRequest) returns (com.vector.RouterConfig);
     */
    getRouterConfig(input: GetRouterConfigRequest, options?: RpcOptions): UnaryCall<GetRouterConfigRequest, RouterConfig> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetRouterConfigRequest, RouterConfig>("unary", this._transport, method, opt, input);
    }
    /**
     * channel and transfer state getters
     *
     * @generated from protobuf rpc: GetChannelState(com.vector.ChannelStateRequest) returns (com.vector.FullChannelState);
     */
    getChannelState(input: ChannelStateRequest, options?: RpcOptions): UnaryCall<ChannelStateRequest, FullChannelState> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<ChannelStateRequest, FullChannelState>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetChannelStates(com.vector.Empty) returns (com.vector.FullChannelStates);
     */
    getChannelStates(input: Empty, options?: RpcOptions): UnaryCall<Empty, FullChannelStates> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<Empty, FullChannelStates>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetChannelStateByParticipants(com.vector.ChannelStateByParticipantsRequest) returns (com.vector.FullChannelState);
     */
    getChannelStateByParticipants(input: ChannelStateByParticipantsRequest, options?: RpcOptions): UnaryCall<ChannelStateByParticipantsRequest, FullChannelState> {
        const method = this.methods[6], opt = this._transport.mergeOptions(options);
        return stackIntercept<ChannelStateByParticipantsRequest, FullChannelState>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetTransferState(com.vector.TransfersRequest) returns (com.vector.FullTransferState);
     */
    getTransferState(input: TransfersRequest, options?: RpcOptions): UnaryCall<TransfersRequest, FullTransferState> {
        const method = this.methods[7], opt = this._transport.mergeOptions(options);
        return stackIntercept<TransfersRequest, FullTransferState>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetTransferStateByRoutingId(com.vector.TransferStateByRoutingIdRequest) returns (com.vector.FullTransferState);
     */
    getTransferStateByRoutingId(input: TransferStateByRoutingIdRequest, options?: RpcOptions): UnaryCall<TransferStateByRoutingIdRequest, FullTransferState> {
        const method = this.methods[8], opt = this._transport.mergeOptions(options);
        return stackIntercept<TransferStateByRoutingIdRequest, FullTransferState>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetTransferStatesByRoutingId(com.vector.TransferStatesByRoutingIdRequest) returns (com.vector.FullTransferStates);
     */
    getTransferStatesByRoutingId(input: TransferStatesByRoutingIdRequest, options?: RpcOptions): UnaryCall<TransferStatesByRoutingIdRequest, FullTransferStates> {
        const method = this.methods[9], opt = this._transport.mergeOptions(options);
        return stackIntercept<TransferStatesByRoutingIdRequest, FullTransferStates>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetActiveTransfers(com.vector.ActiveTransfersRequest) returns (com.vector.FullTransferStates);
     */
    getActiveTransfers(input: ActiveTransfersRequest, options?: RpcOptions): UnaryCall<ActiveTransfersRequest, FullTransferStates> {
        const method = this.methods[10], opt = this._transport.mergeOptions(options);
        return stackIntercept<ActiveTransfersRequest, FullTransferStates>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetRegisteredTransfers(com.vector.RegisteredTransfersRequest) returns (com.vector.RegisteredTransfers);
     */
    getRegisteredTransfers(input: RegisteredTransfersRequest, options?: RpcOptions): UnaryCall<RegisteredTransfersRequest, RegisteredTransfers> {
        const method = this.methods[11], opt = this._transport.mergeOptions(options);
        return stackIntercept<RegisteredTransfersRequest, RegisteredTransfers>("unary", this._transport, method, opt, input);
    }
    /**
     * external interface for server node functionality
     *
     * @generated from protobuf rpc: ClearStore(com.vector.ClearStoreRequest) returns (com.vector.Empty);
     */
    clearStore(input: ClearStoreRequest, options?: RpcOptions): UnaryCall<ClearStoreRequest, Empty> {
        const method = this.methods[12], opt = this._transport.mergeOptions(options);
        return stackIntercept<ClearStoreRequest, Empty>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: CreateNode(com.vector.CreateNodeRequest) returns (com.vector.CreateNodeReply);
     */
    createNode(input: CreateNodeRequest, options?: RpcOptions): UnaryCall<CreateNodeRequest, CreateNodeReply> {
        const method = this.methods[13], opt = this._transport.mergeOptions(options);
        return stackIntercept<CreateNodeRequest, CreateNodeReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: Setup(com.vector.SetupRequest) returns (com.vector.FullChannelState);
     */
    setup(input: SetupRequest, options?: RpcOptions): UnaryCall<SetupRequest, FullChannelState> {
        const method = this.methods[14], opt = this._transport.mergeOptions(options);
        return stackIntercept<SetupRequest, FullChannelState>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: InternalSetup(com.vector.SetupRequest) returns (com.vector.FullChannelState);
     */
    internalSetup(input: SetupRequest, options?: RpcOptions): UnaryCall<SetupRequest, FullChannelState> {
        const method = this.methods[15], opt = this._transport.mergeOptions(options);
        return stackIntercept<SetupRequest, FullChannelState>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: Deposit(com.vector.DepositRequest) returns (com.vector.FullChannelState);
     */
    deposit(input: DepositRequest, options?: RpcOptions): UnaryCall<DepositRequest, FullChannelState> {
        const method = this.methods[16], opt = this._transport.mergeOptions(options);
        return stackIntercept<DepositRequest, FullChannelState>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: SendDepositTx(com.vector.DepositTxRequest) returns (com.vector.TxHash);
     */
    sendDepositTx(input: DepositTxRequest, options?: RpcOptions): UnaryCall<DepositTxRequest, TxHash> {
        const method = this.methods[17], opt = this._transport.mergeOptions(options);
        return stackIntercept<DepositTxRequest, TxHash>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: SendRequestCollateral(com.vector.DepositRequest) returns (com.vector.FullChannelState);
     */
    sendRequestCollateral(input: DepositRequest, options?: RpcOptions): UnaryCall<DepositRequest, FullChannelState> {
        const method = this.methods[18], opt = this._transport.mergeOptions(options);
        return stackIntercept<DepositRequest, FullChannelState>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: CreateTransfer(com.vector.ConditionalTransferRequest) returns (com.vector.FullChannelState);
     */
    createTransfer(input: ConditionalTransferRequest, options?: RpcOptions): UnaryCall<ConditionalTransferRequest, FullChannelState> {
        const method = this.methods[19], opt = this._transport.mergeOptions(options);
        return stackIntercept<ConditionalTransferRequest, FullChannelState>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ResolveTransfer(com.vector.ResolveTransferRequest) returns (com.vector.FullChannelState);
     */
    resolveTransfer(input: ResolveTransferRequest, options?: RpcOptions): UnaryCall<ResolveTransferRequest, FullChannelState> {
        const method = this.methods[20], opt = this._transport.mergeOptions(options);
        return stackIntercept<ResolveTransferRequest, FullChannelState>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: Withdraw(com.vector.WithdrawRequest) returns (com.vector.FullChannelState);
     */
    withdraw(input: WithdrawRequest, options?: RpcOptions): UnaryCall<WithdrawRequest, FullChannelState> {
        const method = this.methods[21], opt = this._transport.mergeOptions(options);
        return stackIntercept<WithdrawRequest, FullChannelState>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: RestoreState(com.vector.RestoreStateRequest) returns (com.vector.FullChannelState);
     */
    restoreState(input: RestoreStateRequest, options?: RpcOptions): UnaryCall<RestoreStateRequest, FullChannelState> {
        const method = this.methods[22], opt = this._transport.mergeOptions(options);
        return stackIntercept<RestoreStateRequest, FullChannelState>("unary", this._transport, method, opt, input);
    }
    /**
     * dispute methods
     *
     * @generated from protobuf rpc: SendDisputeChannelTx(com.vector.ChannelStateRequest) returns (com.vector.TxHash);
     */
    sendDisputeChannelTx(input: ChannelStateRequest, options?: RpcOptions): UnaryCall<ChannelStateRequest, TxHash> {
        const method = this.methods[23], opt = this._transport.mergeOptions(options);
        return stackIntercept<ChannelStateRequest, TxHash>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: SendDefundChannelTx(com.vector.ChannelStateRequest) returns (com.vector.TxHash);
     */
    sendDefundChannelTx(input: ChannelStateRequest, options?: RpcOptions): UnaryCall<ChannelStateRequest, TxHash> {
        const method = this.methods[24], opt = this._transport.mergeOptions(options);
        return stackIntercept<ChannelStateRequest, TxHash>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: SendDisputeTransfer(com.vector.TransferRequest) returns (com.vector.TxHash);
     */
    sendDisputeTransfer(input: TransferRequest, options?: RpcOptions): UnaryCall<TransferRequest, TxHash> {
        const method = this.methods[25], opt = this._transport.mergeOptions(options);
        return stackIntercept<TransferRequest, TxHash>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: SendDefundTransfer(com.vector.TransferRequest) returns (com.vector.TxHash);
     */
    sendDefundTransfer(input: TransferRequest, options?: RpcOptions): UnaryCall<TransferRequest, TxHash> {
        const method = this.methods[26], opt = this._transport.mergeOptions(options);
        return stackIntercept<TransferRequest, TxHash>("unary", this._transport, method, opt, input);
    }
    /**
     * subscriptions - server to client stream
     *
     * @generated from protobuf rpc: IsAliveStream(com.vector.Empty) returns (stream com.vector.IsAlivePayload);
     */
    isAliveStream(input: Empty, options?: RpcOptions): ServerStreamingCall<Empty, IsAlivePayload> {
        const method = this.methods[27], opt = this._transport.mergeOptions(options);
        return stackIntercept<Empty, IsAlivePayload>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: SetupStream(com.vector.Empty) returns (stream com.vector.SetupPayload);
     */
    setupStream(input: Empty, options?: RpcOptions): ServerStreamingCall<Empty, SetupPayload> {
        const method = this.methods[28], opt = this._transport.mergeOptions(options);
        return stackIntercept<Empty, SetupPayload>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ConditionalTransferCreatedStream(com.vector.Empty) returns (stream com.vector.ConditionalTransferCreatedPayload);
     */
    conditionalTransferCreatedStream(input: Empty, options?: RpcOptions): ServerStreamingCall<Empty, ConditionalTransferCreatedPayload> {
        const method = this.methods[29], opt = this._transport.mergeOptions(options);
        return stackIntercept<Empty, ConditionalTransferCreatedPayload>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ConditionalTransferResolvedStream(com.vector.Empty) returns (stream com.vector.ConditionalTransferCreatedPayload);
     */
    conditionalTransferResolvedStream(input: Empty, options?: RpcOptions): ServerStreamingCall<Empty, ConditionalTransferCreatedPayload> {
        const method = this.methods[30], opt = this._transport.mergeOptions(options);
        return stackIntercept<Empty, ConditionalTransferCreatedPayload>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: DepositReconciledStream(com.vector.Empty) returns (stream com.vector.DepositReconciledPayload);
     */
    depositReconciledStream(input: Empty, options?: RpcOptions): ServerStreamingCall<Empty, DepositReconciledPayload> {
        const method = this.methods[31], opt = this._transport.mergeOptions(options);
        return stackIntercept<Empty, DepositReconciledPayload>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: RequestCollateralStream(com.vector.Empty) returns (stream com.vector.RequestCollateralPayload);
     */
    requestCollateralStream(input: Empty, options?: RpcOptions): ServerStreamingCall<Empty, RequestCollateralPayload> {
        const method = this.methods[32], opt = this._transport.mergeOptions(options);
        return stackIntercept<Empty, RequestCollateralPayload>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: WithdrawalCreatedStream(com.vector.Empty) returns (stream com.vector.WithdrawalCreatedPayload);
     */
    withdrawalCreatedStream(input: Empty, options?: RpcOptions): ServerStreamingCall<Empty, WithdrawalCreatedPayload> {
        const method = this.methods[33], opt = this._transport.mergeOptions(options);
        return stackIntercept<Empty, WithdrawalCreatedPayload>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: WithdrawalResolvedStream(com.vector.Empty) returns (stream com.vector.WithdrawalCreatedPayload);
     */
    withdrawalResolvedStream(input: Empty, options?: RpcOptions): ServerStreamingCall<Empty, WithdrawalCreatedPayload> {
        const method = this.methods[34], opt = this._transport.mergeOptions(options);
        return stackIntercept<Empty, WithdrawalCreatedPayload>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: WithdrawalReconciledStream(com.vector.Empty) returns (stream com.vector.WithdrawalReconciledPayload);
     */
    withdrawalReconciledStream(input: Empty, options?: RpcOptions): ServerStreamingCall<Empty, WithdrawalReconciledPayload> {
        const method = this.methods[35], opt = this._transport.mergeOptions(options);
        return stackIntercept<Empty, WithdrawalReconciledPayload>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: RestoreStateStream(com.vector.Empty) returns (stream com.vector.SetupPayload);
     */
    restoreStateStream(input: Empty, options?: RpcOptions): ServerStreamingCall<Empty, SetupPayload> {
        const method = this.methods[36], opt = this._transport.mergeOptions(options);
        return stackIntercept<Empty, SetupPayload>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * eth provider pass-through
     *
     * @generated from protobuf rpc: EthProvider(com.vector.EthProviderRequest) returns (com.vector.EthProviderReply);
     */
    ethProvider(input: EthProviderRequest, options?: RpcOptions): UnaryCall<EthProviderRequest, EthProviderReply> {
        const method = this.methods[37], opt = this._transport.mergeOptions(options);
        return stackIntercept<EthProviderRequest, EthProviderReply>("unary", this._transport, method, opt, input);
    }
}
